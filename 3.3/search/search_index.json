{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Papermerge DMS","text":"<p>Papermerge DMS is open source document management system for digital archives.</p> <p>It is designed to be user friendly: it has easy to use desktop like web interface with familiar features like folders or drag 'n drop. In same time, it has very powerful DMS features: document versioning, custom fields, path templates, OCR, full text search, users and permissions management.</p> <p>It supports PDF, TIFF, JPEG and PNG document file formats. Papermerge DMS is perfect tool for long term storage of your documents.</p> <p></p>"},{"location":"#features-highlights","title":"Features Highlights","text":"<ul> <li>Supports PDF, TIFF, JPEG, PNG file formats</li> <li>Desktop like user interface</li> <li>Dual panel mode</li> <li>Document versioning</li> <li>Custom fields</li> <li>Document types</li> <li>OCR - used to extract text for documents indexing</li> <li>OCRed text overlay (you can download document with OCRed text overlay)</li> <li>Full text search (supports multiple search engines)</li> <li>Tags - assign colored tags to documents or folders</li> <li>Folders - users can organize documents in folders</li> <li>Multi-User (Users/Groups/Permissions)</li> <li>Authorization via granular permissions to limit users' scopes</li> <li>SSO - single sign on using standard protocols such as OIDC</li> <li>REST API</li> <li>Page Management - delete, reorder, rotate, merge, move, extract pages</li> </ul>"},{"location":"#what-is-a-document","title":"What is a Document?","text":"<p>In short: document = PDF.</p> <p>For Papermerge DMS a document is anything which is a good candidate for archiving - some piece of information which is not editable but you need to store it for future reference. For example receipts - you don't need to read receipts everyday, you don't need to change them, but eventually you will need them for your tax declaration. scanned documents, which are usually in PDF or TIFF format, are documents in Papermerge DMS sense.</p> <p>PDF (Portable Document Format) is de facto standard for storing archived documents. In correct technical terms - it is PDF/A subset. PDF/A differs from PDF by prohibiting features unsuitable for long-term archiving, such as font linking and encryption.</p> <p>Most of the modern office scanners will output scanned files in PDF/A format. This is why, PDF is practically synonymous for document in context of Papermerge.</p> <p>A picture made with smartphone of A4 paper document is regarded by Papermerge DMS as document.</p>"},{"location":"backup-restore/","title":"Backup/Restore","text":"<p>Papermerge DMS docker image is shipped with backup and restore utilities. Shipped utility will backup all your folders, documents with their associated versions and OCR data, tags and users. Search engine index is not included in backup though.</p> <p>Note</p> <p>User passwords are included in backup file as well. Passwords are stored as digests.</p>"},{"location":"backup-restore/#backup","title":"Backup","text":"<p>Backup your documents with following command:</p> <pre><code>$ docker exec &lt;papermerge-server-container&gt; backup.sh &lt;optional-location&gt;\n</code></pre> <p>where <code>&lt;optional-location&gt;</code> is the path to file or folder inside container where to save backup file. If location is not provided, backup file will be saved in /core_app/ folder - the papermerge core application's current folder.</p> <p>Example:</p> <pre><code>    $ docker ps --format '{\\{.ID\\}} {\\{.Command\\}} {\\{.Names\\}}'\n\n    914dda21dd3d \"/run.bash server\" 091223_30-web-1\n    42095cee91f0 \"docker-entrypoint.s\u2026\" 091223_30-solr-1\n    d65b3205d9ec \"/run.bash worker\" 091223_30-worker-1\n    ac5cfd76993a \"docker-entrypoint.s\u2026\" 091223_30-redis-1\n    8ad6d0a7eb6c \"/opt/bitnami/script\u2026\" 091223_30-db-1\n</code></pre> <p>In above example the Papermerge DMS has 5 containers: app server (the core or web or http or REST API server, pick the name you like :P), solr search engine, redis, database and finally one paper worker.</p> <p>To create a backup in root folder of the app container just run:</p> <pre><code>$ docker exec 914dda21dd3d backup.sh /\n</code></pre> <p>When above command is ready, check that backup file was created:</p> <pre><code>$ docker exec 914dda21dd3d ls /\n\nauth_server_app\nbackup_10_12_2023-11_30_37.tar.gz\nbin\nboot\n...\ncore_app\ncore_ui\ndb\n...\nusr\nvar\n</code></pre> <p>Backup file is backup_10_12_2023-06_30_37.tar.gz. Now you can copy backup file to your local filesystem:</p> <pre><code>$ docker cp 914dda21dd3d:/backup_10_12_2023-06_30_37.tar.gz .\n</code></pre> <p>You may choose to name file differently:</p> <pre><code>$ docker exec 914dda21dd3d backup.sh /my-daily-backup.tar.gz\n</code></pre> <p>Then copy it to your local filesystem:</p> <pre><code>$ docker cp 914dda21dd3d:/my-daily-backup.tar.gz .\n</code></pre> <p>Note</p> <p>Backup files are gzipped tar archives, thus you probably want to append \".tar.gz\" to their name.</p>"},{"location":"backup-restore/#restore","title":"Restore","text":"<p>When you plan to restore previous backup, we suggest to start with new Papermerge DMS instance, with only one superuser (which is created by default anyway). Make sure there are no documents in the new instance.</p> <p>For sake of example, let's say the superuser's username is \"admin\". For restoring use <code>restore.sh</code> command:</p> <pre><code>$ docker exec &lt;papermerge-server-container&gt; restore.sh &lt;backup-file&gt;\n</code></pre> <p>For that to work, you need first to copy backup archive file to core (server) container. Sticking with example from previous section:</p> <pre><code>$ docker cp my-backup.tar.gz 914dda21dd3d:/my-backup.tar.gz\n$ docker exec 914dda21dd3d restore.sh /my-backup.tar.gz\n</code></pre> <p>If \"admin\" user already existed in backup file, then admin's password will be set to the one from the backup file.</p>"},{"location":"backup-restore/#backup-file-structure","title":"Backup File Structure","text":"<p>The backup file is a gzipped tar archive with following content:</p> <ol> <li><code>backup.json</code> file</li> <li><code>ocr/</code> folder</li> <li><code>docvers/</code>  folder</li> <li><code>username1</code>/, <code>username2</code>, ... i.e. one folder per user with folder title being user's username</li> </ol> <p><code>backup.json</code> file contains all necessary info to restore the database i.e. all users, their nodes, tags etc.</p> <p><code>docvers/</code> contains actually document versions files. Your documents are here.</p> <p><code>ocr/</code> contains OCR data of each individual page in the document.</p> <p>User folders mentioned in point 4. are provided for convenience, so that you may quickly get an understanding of the folder structure and their content. Each file in user folder is actually a symbolic link pointing to the last version of the document (from <code>docvers</code>).</p> <p>Warning</p> <p>Each user has two special folders: <code>.home</code> and <code>.inbox</code>; special folder's title start with dot. If you open backup archive in file browsers which hides dot files (file starting with dot character) - the content of user folder may appear empty! When opening backup archive make sure you set 'show hidden files flag' on.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>For complete changelog see changelog file in github repository.</p>"},{"location":"roadmap/","title":"Roadmap 2025","text":"<p>For year 2025 we plan to implement in Papermerge DMS following major features:</p> <ol> <li>Localization</li> <li>UI settings</li> <li>Per object access management</li> <li>Group ownership</li> <li>Search by custom fields</li> <li>System audit</li> </ol>"},{"location":"roadmap/#1-localization","title":"1. Localization","text":"<p>Localization is about making UI available in other languages than English. On initial release application will be available in English and German languages. It will be up to community to provides translation for other languages.</p>"},{"location":"roadmap/#2-ui-settings","title":"2. UI Settings","text":"<p>Currently, the only way to configure Papermerge DMS is via environment variables. UI Settings means - users will be able to change configurations like default UI language, dark/light UI mode, default language to use in OCR, date format etc via web user interface.</p>"},{"location":"roadmap/#3-per-object-access-management","title":"3. Per Object Access Management","text":"<p>This is big one. \"Per Object\" here means access management for specific folder or documents. In short, it is about shared folders and shared documents. We will address sharing of tags, categories, and custom fields as well.</p>"},{"location":"roadmap/#4-group-ownership","title":"4. Group Ownership","text":"<p>It is not clear yet if this one will be shipped as separate release or together with 3. In any case, this feature is about adding group ownership for the objects (related to 3.) Current version (3.3) supports only ownership of resources like folders, documents, tags, custom fields, categories by individual user (the user who created the resource). The feature is about adding one extra possibility of resource (folder, document, tag etc) being owned by a group of individuals.</p>"},{"location":"roadmap/#5-search-by-custom-fields","title":"5. Search by Custom Fields","text":"<p>The title says it all.</p>"},{"location":"roadmap/#6-system-audit","title":"6. System Audit","text":"<p>Here System = Papermerge DMS. The feature is about providing insights what happens in the system i.e. who did what and when.</p>"},{"location":"whatsnew/","title":"What's new in 3.3?","text":"<p>Version 3.3 introduces following new major features:</p> <ul> <li>Document types</li> <li>Custom fields</li> <li>Path templates</li> <li>S3 storage backend</li> </ul>"},{"location":"whatsnew/#document-types","title":"Document Types","text":"<p>Document types enable you to categorize documents. You can define types such as \"Receipt\", \"Invoice\", or \"Contract\".</p> <p>Read more about document type in user manual</p>"},{"location":"whatsnew/#custom-fields","title":"Custom Fields","text":"<p>New, extremely powerful, flexible and easy to use feature. Before version 2.1 custom fields were named \"metadata\", however, we introduced a significant twist in the concept: instead of being assigned directly to the document, custom fields are now assigned via document types.</p> <p>Read more about custom fields in user manual</p>"},{"location":"whatsnew/#path-templates","title":"Path Templates","text":"<p>You need to decide where to place the document only once. Once decided - you never need to worry in which folder does the document X or Y belong - it will be handled automatically. Path templates are per document category.</p> <p>Read more about it in Path Templates</p>"},{"location":"whatsnew/#s3-storage-backend","title":"S3 Storage Backend","text":"<p>You can configure S3 compatible storage for you documents. It means that you may configure Papermerge DMS to store documents on S3 storage.</p> <p>Feature is there, but its documentation is not . Documentation is being written  ...</p>"},{"location":"cli/cli/","title":"Papermerge CLI","text":"<p>Command line utility which uses REST API to interact with your Papermerge DMS instance. It can be used to upload documents from local filesystem to yout Papermerge DMS instance.</p> <p></p>"},{"location":"cli/cli/#requirements","title":"Requirements","text":"<p>In order to use <code>papermerge-cli</code> you need to have python installed. You need python version &gt;= 3.10.</p>"},{"location":"cli/cli/#install","title":"Install","text":"<p>Install <code>papermerge-cli</code> with following command:</p> <pre><code>pip install papermerge-cli\n</code></pre> <p>pip is package installer for python - it usually comes with python interpreter. In order to install pip on Ubuntu use following command:</p> <pre><code>sudo apt install python3-pip\n</code></pre>"},{"location":"cli/cli/#configuration","title":"Configuration","text":"<p>Papermerge Cli is configured via environment variables:</p> <ul> <li><code>PAPERMERGE_CLI__HOST</code></li> <li><code>PAPERMERGE_CLI__TOKEN</code></li> </ul> <p>as the name suggests, the first one is the host of the REST API server and second value is the REST API token.</p> <p>REST API server should be specified with <code>http://</code> or <code>https://</code> prefix, but without the <code>/api</code> suffix. Valid values examples: http://papermege.local, https://my-dms.papermerge.de.</p> <p>Note</p> <p>The host may or may not contain the <code>/</code>. E.g. http://papermege.local and http://papermerge.local/ are both valid values and point to the same host</p> <p>To get REST API token follow these instructions.</p>"},{"location":"cli/cli/#ls","title":"ls","text":"<p>List the content of you home folder:</p> <pre><code>  papermerge-cli ls\n</code></pre> <p>In order to list content of specific folder (including inbox folder)::</p> <pre><code>  papermerge-cli ls --parent-uuid=UUID-of-the-folder\n</code></pre>"},{"location":"cli/cli/#me","title":"me","text":"<p>In order to see current user details use <code>me</code> command:</p> <pre><code>  papermerge-cli me\n</code></pre>"},{"location":"cli/cli/#import","title":"import","text":"<p>Recursively imports documents and folders from local filesystem. For example, in order to import recursively all documents from local folder:</p> <pre><code>papermerge-cli import /path/to/local/folder/\n</code></pre> <p>You can also import one single document:</p> <pre><code>papermerge-cli import /path/to/some/document.pdf\n</code></pre> <p>By default all documents are imported to your user's <code>.inbox</code> folder. If you want to import to another folder, use <code>--target-uuid</code>:</p> <pre><code>papermerge-cli import /path/to/some/document.pdf --target-uuid &lt;uuid&gt;\n</code></pre> <p>In order to learn UUID of the folder you want to import to use <code>papermerge-cli ls</code> command. To get UUIDs of <code>.home</code> and <code>.inbox</code> folders, use <code>papermerge-cli me</code> command.</p> <p>If you want the local copy the uploaded documents to be deleted after successful import - use <code>--delete</code> flag:</p> <pre><code>papermerge-cli import --delete /path/to/folder/\n</code></pre> <p>Danger</p> <p>Be careful with <code>--delete</code> flag! When present,</p> <p><code>papermerge-cli</code> will irreversible delete the local copy of all    documents and folders in the <code>/path/to/folder/</code>!</p> <p>Danger</p> <p>Always, before using this flag make safe backup of the documents to be uploaded!</p> <p>!!! note: <code>--delete</code> flag deletes the local copy of the documents/path to import     after successful upload - this means that even if though you local copy     of the documents vanished - the originals are still available in Papermerge DMS!</p>"},{"location":"cli/cli/#help","title":"help","text":"<p>In order to get general help about the command use:</p> <pre><code>  papermerge-cli --help\n</code></pre> <p>In order to get help for individual commands, place <code>--help</code> flag after the command:</p> <pre><code>  papermerge-cli import --help\n</code></pre>"},{"location":"cli/overview/","title":"Overview","text":"<p>This section describes a set of command line utilities which can interact (e.g. import documents to, list nodes etc) with your Papermerge DMS instance.</p> <p>What is common to all command line utilities listed here is that they all use REST API interface. In order to use REST API you need to know:</p> <ul> <li>host address of the REST API server</li> <li>the token used for authentication - REST API token</li> </ul>"},{"location":"cli/overview/#host-address","title":"Host Address","text":"<p>Host address should be provided with <code>http://</code> or <code>https://</code> prefix.</p> <p>Examples:</p> <ul> <li>http://papermerge.local</li> <li>https://mydms.com/</li> <li>https://my-own-digital-archives.de</li> </ul> <p>Note</p> <p>REST API server may or may not end with <code>/</code> character. Thus, both http://papermerge.local     and http://papermerge.local/ are valid.</p>"},{"location":"cli/overview/#rest-api-token","title":"REST API Token","text":"<p>Currently there is no web UI for getting your user's token. The only way to get REST API token is by running docker command.</p> <p>Click here for details.</p>"},{"location":"contributor/docker/","title":"Docker","text":"<p>There is docker image for development mode. Docker image is tagged with <code>3.0devX</code>. With dev image, you can get feedback of your source code changes without needing to install any dependency or any deveopment environment configurations.</p> <p>All examples described below assume that you got Papermerge DMS source code and you are in root repository of source code folder:</p> <pre><code>$ git clone git@github.com:papermerge/papermerge-core.git PapermergeSourceCode\n$ cd PapermergeSourceCode\n</code></pre>"},{"location":"contributor/docker/#web-app","title":"Web App","text":"<p>This is the simplest local dev scenario, you start docker compose file only with web app i.e. REST API server + ui.</p> <p>The go to the folder where source was cloned and create following docker compose file:</p> <pre><code>version: \"3.9\"\n\nservices:\n  backend:\n    image: papermerge/papermege:3.0dev  # check the latest dev image number in dockerhub!\n    volumes:\n        - ./papermerge:/core_app/papermerge/\n        - ./ui:/core_ui/\n    environment:\n      PAPERMERGE__SECURITY__SECRET_KEY: 1234  # top secret\n      PAPERMERGE__AUTH__USERNAME: admin\n      PAPERMERGE__AUTH__PASSWORD: 1234\n    ports:\n      - \"11000:80\"\n</code></pre> <p>Assuming you are in root folder of the source code, above docker compose will mount the source code to the correct location in docker image. The appliction will be accessible to on local port 11000.</p> <p>Here is docker compose file for the case when you want to build dev docker image yourself:</p> <pre><code>version: \"3.9\"\n\nservices:\n  backend:\n    build:\n      context: .\n      dockerfile: docker/dev/Dockerfile\n    volumes:\n        - ./papermerge:/core_app/papermerge/\n        - ./ui:/core_ui/\n    environment:\n      PAPERMERGE__SECURITY__SECRET_KEY: 1234  # top secret\n      PAPERMERGE__AUTH__USERNAME: admin\n      PAPERMERGE__AUTH__PASSWORD: 1234\n    ports:\n      - \"11000:80\"\n</code></pre>"},{"location":"contributor/docker/#web-app-worker","title":"Web App + Worker","text":"<p>Following docker compose adds worker service. Worker and Web App communicate via redis (message broker), thus we need to add redis service as well:</p> <pre><code>version: \"3.9\"\n\nx-backend: &amp;common  # yaml anchor definition\n  build:\n    context: .\n    dockerfile: docker/dev/Dockerfile\n  environment:\n      PAPERMERGE__SECURITY__SECRET_KEY: 1234  # top secret\n      PAPERMERGE__AUTH__USERNAME: admin\n      PAPERMERGE__AUTH__PASSWORD: 1234\n      PAPERMERGE__REDIS__URL: redis://redis:6379/0\n  volumes:\n      - ./papermerge:/core_app/papermerge/\n      - ./ui:/core_ui/\n      - data:/db\n      - index_db:/core_app/index_db\n      - media_root:/core_app/media\n\nservices:\n  web:\n    &lt;&lt;: *common\n    ports:\n     - \"11000:80\"\n    depends_on:\n      - redis\n  worker:\n    &lt;&lt;: *common\n    command: worker\n  redis:\n    image: redis:6\n\nvolumes:\n    data:\n    index_db:\n    media_root:\n</code></pre>"},{"location":"contributor/docker/#logging-config","title":"Logging Config","text":"<p>Both worker and web app read their logging configurations from file pointed by <code>PAPERMERGE__MAIN__LOGGING_CFG</code> environment variable. An example of custom logging config would be:</p> <pre><code>version: 1\ndisable_existing_loggers: true\n\nformatters:\n  verbose:\n    format: '%(asctime)s %(levelname)s %(name)s.%(funcName)s %(message)s'\n\nhandlers:\n  console:\n    level: DEBUG\n    class: logging.StreamHandler\n    formatter: verbose\n\nloggers:\n  auth_server:\n    level: DEBUG\n    handlers: [console]\n  papermerge.search.tasks:\n    level: DEBUG\n    handlers: [console]\n    propagate: no\n    format: verbose\n</code></pre> <p>You may recognize it. It should be YAML version of python logging config.</p> <p>Here is an example of docker compose with web wepp + worker + custom logging configuration:</p> <pre><code>version: \"3.9\"\n\nx-backend: &amp;common\n  build:\n    context: .\n    dockerfile: docker/dev/Dockerfile\n  environment:\n      PAPERMERGE__SECURITY__SECRET_KEY: 1234  # top secret\n      PAPERMERGE__AUTH__USERNAME: admin\n      PAPERMERGE__AUTH__PASSWORD: 1234\n      PAPERMERGE__REDIS__URL: redis://redis:6379/0\n      PAPERMERGE__MAIN__LOGGING_CFG: /logging.yml  # &lt;-- absolute path to custom config file\n  volumes:\n      - ./papermerge:/core_app/papermerge/\n      - ./ui:/core_ui/\n      - data:/db\n      - index_db:/core_app/index_db\n      - media_root:/core_app/media\n      - ./custom_logging.yml:/logging.yml  # mount local logging config file\n\nservices:\n  web:\n    &lt;&lt;: *common\n    ports:\n     - \"11000:80\"\n    depends_on:\n      - redis\n  worker:\n    &lt;&lt;: *common\n    command: worker\n  redis:\n    image: redis:6\n\nvolumes:\n    data:\n    index_db:\n    media_root:\n</code></pre>"},{"location":"contributor/docker/#solr","title":"Solr","text":"<p>Papermerge DMS is shipped with a default search library - Xapian.</p> <p>However, you may opt-in to use full fledged search engine like Solr. In order to change search backend, use <code>PAPERMERGE__SEARCH__URL</code> env variable:</p> <pre><code>version: \"3.9\"\n\nx-backend: &amp;common\n  build:\n    context: .\n    dockerfile: docker/dev/Dockerfile\n  environment:\n      PAPERMERGE__SECURITY__SECRET_KEY: 1234\n      PAPERMERGE__AUTH__USERNAME: admin\n      PAPERMERGE__AUTH__PASSWORD: 1234\n      PAPERMERGE__REDIS__URL: redis://redis:6379/0\n      PAPERMERGE__SEARCH__URL: solr://solr:8983/pmg-index  # &lt;- use Solr's \"pmg-index\" index\n  volumes:\n      - ./papermerge:/core_app/papermerge/\n      - ./ui:/core_ui/\n      - data:/db\n      - index_db:/core_app/index_db\n      - media_root:/core_app/media\n\nservices:\n  web:\n    &lt;&lt;: *common\n    ports:\n     - \"11000:80\"\n    depends_on:\n      - redis\n      - solr\n  worker:\n    &lt;&lt;: *common\n    command: worker\n  redis:\n    image: redis:6\n  solr:\n    image: solr:9.3\n    ports:\n     - \"8983:8983\"\n    volumes:\n      - solr_data:/var/solr\n    command:\n      - solr-precreate\n      - pmg-index  # &lt;- creates index at startup of the Solr service\n\nvolumes:\n  data:\n  solr_data:\n  index_db:\n  media_root:\n</code></pre> <p>Notice that Solr is started with <code>solr-precreate pmg-index</code> command, which means that Solr service will be started with pre-created index named <code>pmg-index</code>.</p>"},{"location":"contributor/docker/#postgresql","title":"PostgreSQL","text":"<p>Here is an example of docker compose which uses PostgreSQL as database:</p> <pre><code>version: \"3.9\"\n\nx-backend: &amp;common\n  build:\n    context: .\n    dockerfile: docker/dev/Dockerfile\n  environment:\n      PAPERMERGE__SECURITY__SECRET_KEY: 1234  # top secret\n      PAPERMERGE__AUTH__USERNAME: admin\n      PAPERMERGE__AUTH__PASSWORD: 1234\n      PAPERMERGE__DATABASE__URL: postgresql://postgres:123@db:5432/postgres\n      PAPERMERGE__REDIS__URL: redis://redis:6379/0\n      PAPERMERGE__SEARCH__URL: solr://solr:8983/pmg-index\n  volumes:\n    - ./papermerge:/core_app/papermerge/\n    - ./ui:/core_ui/\n    - index_db:/core_app/index_db\n    - media_root:/core_app/media\n  depends_on:\n    - redis\n    - solr\n    - db\n\nservices:\n  web:\n    &lt;&lt;: *common\n    ports:\n     - \"11000:80\"\n  worker:\n    &lt;&lt;: *common\n    command: worker\n  redis:\n    image: redis:6\n  solr:\n    image: solr:9.3\n    ports:\n     - \"8983:8983\"\n    volumes:\n      - solr_data:/var/solr\n    command:\n      - solr-precreate\n      - pmg-index\n  db:\n    image: bitnami/postgresql:14.4.0\n    volumes:\n      - postgres_data:/var/lib/postgresql/data/\n    environment:\n      - POSTGRES_PASSWORD=123\n\nvolumes:\n  postgres_data:\n  solr_data:\n  index_db:\n  media_root:\n</code></pre>"},{"location":"contributor/docker/#oauth-20","title":"OAuth 2.0","text":""},{"location":"rest-api/overview/","title":"Overview","text":"<p>Papermerge DMS provides very powerful REST API. In order to user REST API, you need REST API server URL and user token.</p> <p>REST server URL is the http address of your running instance. HTTP address also include the scheme.</p> <p>Examples of REST API server URLs:</p> <ul> <li>http://papermerge.homelab.dev</li> <li>https://papers.berlin</li> </ul> <p>Currently there is no web UI to get token, the only way to get REST API token is by running docker command. See next section for details.</p>"},{"location":"rest-api/reference/","title":"Reference","text":"<p>Papermerge REST API is exposed via Open API standard.</p> <p>Papermerge DMS ships with swagger REST API documentation reference. You can access it in your running Papermerge DMS instance from user menu -&gt; REST API:</p> <p></p>"},{"location":"rest-api/token/","title":"REST API Token","text":"<p>Currently there is no web UI for getting the REST API token. Instead, you get the REST API token by running one docker command:</p> <pre><code>docker exec &lt;papermege-container&gt; create_token.sh &lt;username&gt;\n</code></pre> <p>You can list users in Papermerge DMS with following command:</p> <pre><code>docker exec &lt;papermege-container&gt; list_users.sh\n</code></pre> <p>Example:</p> <pre><code>$ docker ps --format '{\\{.ID\\}} {\\{.Command\\}} {\\{.Names\\}}'\n\nd8b965388fd9 \"/run.bash server\" fordoc-web-1\n8fb8f6f565a2 \"/run.bash worker\" fordoc-worker-1\n8a42db0bb7f9 \"/opt/bitnami/script\u2026\" fordoc-db-1\n8a6146801936 \"docker-entrypoint.s\u2026\" fordoc-redis-1\n</code></pre> <p>In above example the Papermerge has four containers: app server, redis, database and one worker. For our purpose we need app container (in example above - fordoc-web-1). Let's list all users first:</p> <pre><code>$ docker exec d8b965388fd9 list_users.sh\n\nusername=john email=admin@example.com\n</code></pre> <p>There is only one user with username \"john\". In order to get REST API token for user \"john\" run following command:</p> <pre><code>$ docker exec d8b965388fd9 create_token.sh john\n\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJqb2huIiwidXNlcl9pZCI6IjJiODQwY2RhLThjMmYtNDExYy05NDYwLTY0ZDA3YWY3YTJiZSIsImV4cCI6MTcwMzM1MTUzNn0.KJAL9TjRiV63liwVO5bh9GQ_I_QFXMoviKV9Lww3cDs\n</code></pre> <p>The long list of characters from above is the token for user with username \"john\".</p> <p>By default generated REST API token is valid for 6 hours. If you want to change expiration time for the token use PAPERMERGE__SECURITY__TOKEN_EXPIRE_MINUTES configuration setting.</p> <p></p>"},{"location":"settings/auth/","title":"Auth","text":""},{"location":"settings/auth/#auth__username","title":"AUTH__USERNAME","text":"<p>Username for the superuser. Default value is <code>admin</code>.</p> <p>Example:</p> <pre><code>PAPERMERGE__AUTH__USERNAME=john\n</code></pre>"},{"location":"settings/auth/#auth__password","title":"AUTH__PASSWORD","text":"<p>Password for the superuser. No default value.</p> <p>Example:</p> <pre><code>PAPERMERGE__AUTH__PASSWORD=topsecret\n</code></pre>"},{"location":"settings/auth/#auth__email","title":"AUTH__EMAIL","text":"<p>Email for the superuser. Default value is <code>admin@example.com</code>.</p> <p>Example:</p> <pre><code>PAPERMERGE__AUTH__EMAIL=john@mail.com\n</code></pre>"},{"location":"settings/auth/#auth__oidc_client_secret","title":"AUTH__OIDC_CLIENT_SECRET","text":"<p>When using OAuth 2.0/OIDC authentication, this variables is client secret.</p> <p>Example:</p> <pre><code>PAPERMERGE__AUTH__OIDC_CLIENT_SECRET=GOCSPX-qlqlqlqlqlqlqlqlq-FuOOOOORf\n</code></pre>"},{"location":"settings/auth/#auth__oidc_client_id","title":"AUTH__OIDC_CLIENT_ID","text":"<p>When using OAuth 2.0/OIDC authentication, this variables is client ID.</p> <p>Example:</p> <pre><code>PAPERMERGE__AUTH__OIDC_CLIENT_ID=papermerge\n</code></pre>"},{"location":"settings/auth/#auth__oidc_authorize_url","title":"AUTH__OIDC_AUTHORIZE_URL","text":"<p>Must be set to value OIDC authorization endpoint.</p> <pre><code>PAPERMERGE__AUTH__OIDC_AUTHORIZE_URL=http://keycloak.trusel.net:8080/realms/myrealm/protocol/openid-connect/auth\nPAPERMERGE__AUTH__OIDC_AUTHORIZE_URL=http://authk.trusel.net/application/o/authorize/\n</code></pre> <p>Value points to identity provider's domain.</p>"},{"location":"settings/auth/#auth__oidc_access_token_url","title":"AUTH__OIDC_ACCESS_TOKEN_URL","text":"<p>When using oauth2/oidc authentication, this variable contains access token endpoint.</p> <p>Example:</p> <pre><code>PAPERMERGE__AUTH__OIDC_ACCESS_TOKEN_URL=http://authk.trusel.net/application/o/token/\nPAPERMERGE__AUTH__OIDC_ACCESS_TOKEN_URL=http://keycloak.trusel.net:8080/realms/myrealm/protocol/openid-connect/token\n</code></pre> <p>Value points to identity provider's domain.</p>"},{"location":"settings/auth/#auth__oidc_user_info_url","title":"AUTH__OIDC_USER_INFO_URL","text":"<p>When using oauth2/oidc authentication, this variable contains user info endpoint.</p> <p>Example:</p> <pre><code>PAPERMERGE__AUTH__OIDC_USER_INFO_URL=http://authk.trusel.net/application/o/userinfo/\nPAPERMERGE__AUTH__OIDC_USER_INFO_URL=http://keycloak.trusel.net:8080/realms/myrealm/protocol/openid-connect/userinfo\n</code></pre> <p>Value points to identity provider's domain.</p>"},{"location":"settings/auth/#auth__oidc_logout_url","title":"AUTH__OIDC_LOGOUT_URL","text":"<p>When using oauth2/oidc authentication, this variable contains logout endpoint.</p> <p>Example:</p> <pre><code>PAPERMERGE__AUTH__OIDC_LOGOUT_URL=http://keycloak.trusel.net:8080/realms/myrealm/protocol/openid-connect/logout\nPAPERMERGE__AUTH__OIDC_LOGOUT_URL=http://authk.trusel.net/application/o/calypso/end-session/\n</code></pre> <p>Value points to identity provider's domain.</p>"},{"location":"settings/auth/#auth__oidc_introspect_url","title":"AUTH__OIDC_INTROSPECT_URL","text":"<p>Introspect endpoint.</p> <pre><code>PAPERMERGE__AUTH__OIDC_INTROSPECT_URL=http://keycloak.trusel.net:8080/realms/myrealm/protocol/openid-connect/token/introspect\n</code></pre> <p>Value points to identity provider domain. Introspect endpoint is used to validate all incoming requests if they are authenticated or not.</p>"},{"location":"settings/auth/#auth__oidc_scope","title":"AUTH__OIDC_SCOPE","text":"<p>List of OIDC scopes delimited by space. Example:</p> <pre><code>PAPERMERGE__AUTH_OIDC_SCOPE=\"openid email profile\"\n</code></pre>"},{"location":"settings/auth/#auth__oidc_redirect_url","title":"AUTH__OIDC_REDIRECT_URL","text":"<p>This value always should be set to <code>&lt;http|https&gt;://&lt;your-papermerge-domain&gt;/oidc/callback</code>. Example:</p> <pre><code>PAPERMERGE__AUTH__OIDC_REDIRECT_URL=http://papermerge.instance.net/oidc/callback\n</code></pre> <p>Value points to Papermerge DMS domain. This is basically domain where the identity provider (e.g. keycloak) will send information, or redirect, after successfull authentication.</p>"},{"location":"settings/auth/#auth__ldap_url","title":"AUTH__LDAP_URL","text":"<p>If this environment variable is set to non-empty value, Papermerge DMS will assume that authentication will be performed using LDAP backend. Value should be set to URL of the ldap server. URL is specified without scheme (i.e. no ldap://, ldaps:// prefix). Example:</p> <pre><code>PAPERMERGE__AUTH__LDAP_URL=ldap.trusel.net\n</code></pre>"},{"location":"settings/auth/#auth__ldap_user_dn_format","title":"AUTH__LDAP_USER_DN_FORMAT","text":"<p>Format of distinguished name to the user entry. The \"{username}\" literal is used as placeholder; in other words you mark the part of the DN where actual username will be placed with \"{username}\" string. Example:</p> <pre><code>PAPERMERGE__AUTH__LDAP_USER_DN_FORMAT=\"uid={username},ou=People,dc=ldap,dc=trusel,dc=net\"\n</code></pre> <p>Another example:</p> <pre><code>PAPERMERGE__AUTH__LDAP_USER_DN_FORMAT=\"uid={username},ou=Users,dc=example,dc=com\"\n</code></pre> <p>Yet another, fictional example:</p> <pre><code>PAPERMERGE__AUTH__LDAP_USER_DN_FORMAT=\"uid={username},ou=Accounts,dc=acme,dc=com\"\n</code></pre> <p>You see? \"{username}\" part stay fixed. It is placeholder.</p>"},{"location":"settings/auth/#auth__ldap_use_ssl","title":"AUTH__LDAP_USE_SSL","text":"<p>Boolean value (True/False). Instructs Papermerge DMS if secure connection should be used (TLS/SSL) when connecting to LDAP server. Default value is True. Example:</p> <pre><code>PAPERMERGE__AUTH__LDAP_USE_SSL=False\n</code></pre>"},{"location":"settings/auth/#auth__ldap_email_attr","title":"AUTH__LDAP_EMAIL_ATTR","text":"<p>Email attribute name in user LDAP entry. Default value is <code>mail</code>.</p>"},{"location":"settings/auth/#auth__ldap_user_email_domain_fallback","title":"AUTH__LDAP_USER_EMAIL_DOMAIN_FALLBACK","text":"<p>Fallback value of the email domain. In case Papermerge DMS fails to extract user's email, it will use this value as fallback for email domain. The full email format that Papermerge DMS will set as fallback is:</p> <pre><code>&lt;username&gt;@&lt;email-domain-fallback&gt;\n</code></pre> <p>For example, if:</p> <pre><code>PAPERMERGE__AUTH__LDAP_USER_EMAIL_DOMAIN_FALLBACK=starship.com\n</code></pre> <p>and username is <code>coco</code> and, say, LDAP user entry does not feature mail attribute, the email assigned to user will be <code>coco@starship.com</code></p>"},{"location":"settings/auth/#auth__remote","title":"AUTH__REMOTE","text":"<p>When set to non-empty value it enables remote user authentication support. By default this environment variable is not set.</p> <p>Following examples enable remote user authentication:</p> <pre><code>PAPERMERGE__AUTH__REMOTE=1\n</code></pre> <p>or</p> <pre><code>PAPERMERGE__AUTH__REMOTE=True\n</code></pre> <p>or</p> <pre><code>PAPERMERGE__AUTH__REMOTE=Yes\n</code></pre> <p>When remote user authentication is enabled, Papermerge DMS expects to receive user details via following http headers AND cookies:</p> <ul> <li><code>Remote-User</code> (header) - user's username e.g. <code>john</code></li> <li><code>Remote-Groups</code> (header) - comma delimited list of groups user belongs to e.g. <code>admin</code>, <code>accounting,research</code></li> <li><code>Remote-Email</code> (header) - user's email</li> <li><code>Remote-Name</code> (header) - user's name</li> <li><code>remote_user</code> (cookie) - user's username</li> <li><code>remote_groups</code> (cookie) - comma delimited list of groups</li> <li><code>remote_email</code> (cookie)</li> <li><code>remote_name</code> (cookie)</li> </ul> <p>Note</p> <p>Currently <code>Remote-Groups</code> header and <code>remote_groups</code> cookie have no effect. User groups will be introduced soon.</p>"},{"location":"settings/auth/#auth__remote_logout_endpoint","title":"AUTH__REMOTE_LOGOUT_ENDPOINT","text":"<p>When remote user authentication is enabled, it points to the logout endpoint which ends user's session. Endpoint must be specified with full URL including scheme, domain and path.</p> <p>Example:</p> <pre><code>PAPERMERGE__AUTH__REMOTE_LOGOUT_ENDPOINT=https://auth.trusel.net/logout\n</code></pre>"},{"location":"settings/database/","title":"Database","text":"<p>This sections is for database configurations. Papermerge DMS supports following databases SQLite3, PostgreSQL, MySQL/MariaDB.</p>"},{"location":"settings/database/#database__url","title":"DATABASE__URL","text":"<p>For PostgreSQL the database URL is given in following format:</p> <pre><code>postgresql://USER:PASSWORD@HOST:PORT/NAME\n</code></pre> <p>Example:</p> <pre><code>postgresql://scott:tiger@db:5432/mydatabase\n</code></pre> <p>For MariaDB and MySQL the URL scheme is <code>mysql</code>.</p> <p>Example:</p> <pre><code>mysql://myuser:mypass@db:3306/paperdb\n</code></pre> <p>For SQLite the format is: <code>sqlite:///PATH</code>.</p> <p>Example:</p> <pre><code>sqlite:////db/db.sqlite3\n</code></pre> <p>Default value is <code>sqlite:////db/db.sqlite3</code>, in other words, if <code>DATABASE__URL</code> is missing, Papermerge DMS will use SQLite with <code>/db/db.sqlite3</code> as db file.</p>"},{"location":"settings/database/#database__pool_size","title":"DATABASE__POOL_SIZE","text":"<p>Applies only for Tivoli. Set database connections pool size. Defaults to 5.</p> <p>Note</p> <p>This configuration option applies only to Tivoli, which is internal JWT token validator component. Tivoli uses SQLAlchemy as ORM. SQLAlchemy has built-in database connections pooling. The core app though, uses Django ORM - which does not have built-in pooling capabilities.</p>"},{"location":"settings/main/","title":"Main","text":""},{"location":"settings/main/#main__media_root","title":"MAIN__MEDIA_ROOT","text":"<p>Absolute filesystem path to the directory that will hold user-uploaded documents.</p> <p>Example:</p> <pre><code>PAPERMERGE__MAIN__MEDIA_ROOT=/var/www/example.com/media/\n</code></pre>"},{"location":"settings/main/#main__logging_cfg","title":"MAIN__LOGGING_CFG","text":"<p>Absolute filesystem path to the yaml file that will hold logging detailed configuration. Content of logging configuration file is expected to be in yaml format and it is very python specific.</p> <p>Example:</p> <pre><code>  PAPERMERGE__MAIN__LOGGING_CFG=/etc/papermerge/logging.yaml\n</code></pre>"},{"location":"settings/main/#main__timezone","title":"MAIN__TIMEZONE","text":"<p>Which timezone to use.</p> <p>Example:</p> <pre><code>PAPERMERGE__MAIN__TIMEZONE=Europe/Berlin\n</code></pre>"},{"location":"settings/ocr/","title":"OCR","text":"<p>This section groups all OCR specific configurations.</p>"},{"location":"settings/ocr/#ocr__default_language","title":"OCR__DEFAULT_LANGUAGE","text":"<p>By default Papermerge DMS will use language specified with this option to perform OCR. Change this value for language used by majority of your documents. For detailed list of three letter codes see 639-2/T column from ISO 639 2.</p> <p>Example as environment variable:</p> <pre><code>PAPERMERGE__OCR__DEFAULT_LANGUAGE=spa\n</code></pre> <p>Default value is \"deu\" (German language).</p>"},{"location":"settings/overview/","title":"Overview","text":"<p>Papermerge DMS loads its settings from environment variables.</p> <p>Environment variables have following format:</p> <pre><code>PAPERMERGE__&lt;section&gt;__&lt;name&gt;\n</code></pre> <p>double underscores are used as delimiter; environment variables names must be all upper case.</p> <p>Only required environment variables are:</p> <ul> <li>PAPERMERGE__SECURITY__SECRET_KEY</li> <li>PAPERMERGE__AUTH__PASSWORD</li> </ul> <p><code>PAPERMERGE__SECURITY__SECRET_KEY</code> is the key to securing signed data \u2013 it is vital you keep this secure, or attackers could use it to generate their own signed values.</p> <p><code>PAPERMERGE__AUTH__PASSWORD</code> is the password for super user (administrative user or admin user). Super user is created automatically for you when Papermerge DMS starts for the first time.</p> <p>Note</p> <p>In the documentation, for brevity sake, <code>PAPERMERGE__</code> prefix may be omitted. For example docs may say: default value for <code>DATABASE__URL</code> is \"sqlite:////db/db.sqlite3\"; what is meant actually is: default value for <code>PAPERMERGE__DATABASE_URL</code> is \"sqlite:////db/db.sqlite3\".</p>"},{"location":"settings/redis/","title":"Redis","text":"<p>Papermerge DMS uses redis.</p>"},{"location":"settings/redis/#redis__url","title":"REDIS__URL","text":"<p>For Redis the URL is given in following format:</p> <pre><code>redis://HOST:PORT/NUMBER\n</code></pre> <p>For example:</p> <pre><code>redis://redis:6379/0\n</code></pre> <p>Note</p> <p>Both web_app and worker must have same <code>PAPERMERGE__REDIS__URL</code></p>"},{"location":"settings/search/","title":"Search Engine","text":"<p>Papermerge DMS supports multiple search engine backends. Currently two backends are available:</p> <ul> <li>xapian</li> <li>solr</li> </ul>"},{"location":"settings/search/#search__url","title":"SEARCH__URL","text":"<p>Search engine backend to use. For Solr format is:</p> <pre><code>solr://HOST:PORT/INDEX\n</code></pre> <p>Example: <code>solr://solr:8983/pmg-index</code></p> <p>For Xapian URL format is <code>xapian:///PATH</code>. Example: <code>xapian:////index_db</code> - in other words, xapian will store all index data in <code>/index_db</code> folder.</p> <p>Default value for <code>PAPERMERGE__SEARCH__URL</code> is <code>xapian:////index_db</code></p> <p>Note</p> <p>Both web_app and worker must have same <code>PAPERMERGE__SEARCH__URL</code></p>"},{"location":"settings/security/","title":"Security","text":""},{"location":"settings/security/#security__secret_key","title":"SECURITY__SECRET_KEY","text":"<p> Required . Unique secret key. The secret key must be a large random value and it must be kept secret. This option does not have default value, you always need to supply a value for it. Secret key is used to sign JWT tokens.</p> <p>Example as environment variable:</p> <pre><code>PAPERMERGE__SECRET__SECRET_KEY=asjrijfpHHJH00huge00secret00QMNB344GHOOooaq\n</code></pre>"},{"location":"settings/security/#security__token_expire_minutes","title":"SECURITY__TOKEN_EXPIRE_MINUTES","text":"<p>REST API token expiration in minutes. Default value is 360 (i.e. 6 hours).</p> <p>Example, set token to expire in 7 days (10080 = 60x24x7):</p> <pre><code>PAPERMERGE__SECURITY__TOKEN_EXPIRE_MINUTES=10080\n</code></pre>"},{"location":"setup/add-ocr-langs/","title":"Add OCR Languages","text":"<p>By default the Papermerge DMS docker image includes English, German, French, Italian, Spanish, Dutch, Romanian and Portugues OCR languages.</p> <p>You can install extra languages by creating a new docker image from base <code>papermerge/papermerge</code>.</p> <p>Create new docker file with following content:</p> <pre><code>FROM papermerge/papermerge:3.3b16\n\n# add Danish and Polish OCR languages\nRUN apt install tesseract-ocr-dan tesseract-ocr-pol\n</code></pre> <p>All languages are specified in three letters code as per ISO 639-2T standard - second column in the table.</p> <p>In order to build your image run:</p> <pre><code>docker build -t mypaper:3.0 -f Dockerfile .\n</code></pre> <p>Check that OCR languages were installed:</p> <pre><code>docker run -it --rm  mypaper:3.0  tesseract --list-langs\n</code></pre>"},{"location":"setup/ansible/","title":"Ansible","text":"<p>Ansible playbook is available at papermerge/ansible.</p> <p>Playbook will install web app, two workers, database, Redis and Solr search engine on target host. All services will be deployed as docker containers. All services will be placed behind traefik, reverse proxy which will take care of TLS certficates.</p> <p></p> <p>Choose one of following options:</p> <ul> <li>option 1: install Papermerge with PostgreSQL database</li> <li>option 2: install Papermerge with PostgreSQL + PgBouncer</li> <li>option 3: install Papermerge with MariaDB as database</li> </ul>"},{"location":"setup/ansible/#secrets","title":"Secrets","text":"<p>Ansible repository does not include secrets file. Secrets file contains all sensitive (paswords, api tokens) information.</p> <p>You need to create secrets filein <code>group_vars</code> folder:</p> <pre><code>$ touch groups_vars/secrets\n</code></pre> <p>Place following content:</p> <pre><code>secret_key: ...\nsuperuser_password: ...\ndatabase_url: ...\ndb_pass: ...\ncloudflare_api_key: ...\ntraefik_api_password: ...\n</code></pre> <p>Of course you need to replace dots with correct passwords, secret_key etc. database_url is in secrets file because it includes password.</p>"},{"location":"setup/ansible/#option-1-postgresql","title":"Option 1 / PostgreSQL","text":"<p>Make sure <code>database_url</code> in your secrets files matches database related options in <code>group_vars/all</code> (db_user, db_name). Also port number <code>database_url</code> should match the one in <code>db_postgres/vars/main.yml</code>.</p> <p><code>database_url</code> should have following format:</p> <pre><code>postgresql://&lt;user&gt;:&lt;pass&gt;@db:5432/&lt;dbname&gt;\n</code></pre> <p>Install Papermerge DMS with PostgreSQL:</p> <pre><code>$ ansible-playbook install_1.yml -i inventory --extra-vars \"@group_vars/secrets\"\n</code></pre> <p>Application will be accessible via https:// <code>acme_domain</code> is variable you set in <code>group_vars/all</code> e.g. trusel.net"},{"location":"setup/ansible/#option-2-postgresql-pgbouncer","title":"Option 2 / PostgreSQL + PgBouncer","text":"<p>In this setup application will connect to the database via pgbouncer, this means that <code>database_url</code> should point to pgbouncer.</p> <p>Your <code>database_url</code> should look like:</p> <pre><code>postgresql://&lt;user&gt;:&lt;pass&gt;@pgbouncer:6432/&lt;dbname&gt;\n</code></pre> <p>Install Papermerge DMS with PostgreSQL and PgBouncer:</p> <pre><code>$ ansible-playbook install_2.yml -i inventory --extra-vars \"@group_vars/secrets\"\n</code></pre> <p>Application will be accessible via https:// <code>acme_domain</code> is variable you set in <code>group_vars/all</code> e.g. trusel.net"},{"location":"setup/ansible/#option-3-mariadb","title":"Option 3 / MariaDB","text":"<p>For Mysql/MariaDB <code>database_url</code> should have following format:</p> <pre><code>mysql://&lt;user&gt;:&lt;pass&gt;@db:3306/&lt;dbname&gt;\n</code></pre> <p>Install Papermerge DMS with MariaDB:</p> <pre><code>$ ansible-playbook install_3.yml -i inventory --extra-vars \"@group_vars/secrets\"\n</code></pre>"},{"location":"setup/ansible/#backup","title":"Backup","text":"<p>In order to create a backup:</p> <pre><code>$ ansible-playbook backup.yml\n</code></pre>"},{"location":"setup/ansible/#restore","title":"Restore","text":"<p>In order to restore the backup:</p> <pre><code>ansible-playbook restore.yml --extra-vars \"backup_file=/backup/backup_20_11_2023-07_33_03.tar.gz\"\n</code></pre> <p>The backup file path is the one from inside docker container.</p>"},{"location":"setup/ansible/#contribute","title":"Contribute","text":"<p>papermerge/ansible assumes Debian12/Ubuntu 22.04 host.</p> <p>We are happy to accept your pull requests for other hosts.</p>"},{"location":"setup/authentification/","title":"Authentication","text":"<p>This section briefly describes authentication. It focuses mostly on relevant settings so that you can quickly set it up.</p> <p>For detailed information about each method as well as how to configure it with specific identity provider check SSO documentation.</p> <p>Papermerge DMS comes with flexible authentication features. It can handle user accounts, groups, permissions. Papermerge DMS supports following authentication modes:</p> <ul> <li>Built-in</li> <li>OpenID Connect (OIDC)</li> <li>Remote User</li> <li>LDAP</li> </ul>"},{"location":"setup/authentification/#built-in","title":"Built-in","text":"<p>By default Papermerge DMS will use built-in authentication mechanism. You only need to provide <code>PAPERMERGE__AUTH__USERNAME</code>, <code>PAPERMERGE__AUTH__PASSWORD</code> environment variables. In this mode there is no external party involved as all authentication is performed by Papermerge DMS internal components.</p> <p>Built-in authentication mechanism is suitable for simple setups when Papermerge DMS is your only application of concern.</p> <p>When you want to give users access to multiple applications using same accounts, you may consider:</p>"},{"location":"setup/authentification/#openid-connect-oidc","title":"OpenID Connect (OIDC)","text":"<p>Papermerge DMS supports OpenID Connect (OIDC) authentication.</p> <p>In order to enable OIDC authentication you need to provide following environment variables:</p> <ul> <li>PAPERMERGE__AUTH__OIDC_CLIENT_SECRET</li> <li>PAPERMERGE__AUTH__OIDC_CLIENT_ID</li> <li>PAPERMERGE__AUTH__OIDC_AUTHORIZE_URL</li> <li>PAPERMERGE__AUTH__OIDC_ACCESS_TOKEN_URL</li> <li>PAPERMERGE__AUTH__OIDC_USER_INFO_URL</li> <li>PAPERMERGE__AUTH__OIDC_LOGOUT_URL</li> <li>PAPERMERGE__AUTH__OIDC_INTROSPECT_URL</li> <li>PAPERMERGE__AUTH__OIDC_REDIRECT_URL</li> </ul> <p>Note that last one, redirect URL, is the only URL pointing to Papermerge DMS instance domain. It should have following format <code>&lt;http|https&gt;://&lt;papermerge-instance-domain&gt;/oidc/callback</code>. Example:</p> <pre><code>PAPERMERGE__AUTH__OIDC_REDIRECT_URL=https://papermerge.net/oidc/callback\n</code></pre> <p>All other URLs, authorize URL, access point URL, user info URL, introspect URL and logout URL, should point to OIDC provider domain. Examples:</p> <pre><code>PAPERMERGE__AUTH__OIDC_CLIENT_SECRET=pT5Ff-your-token-eWOSvEPmtyY\nPAPERMERGE__AUTH__OIDC_CLIENT_ID=papermerge\nPAPERMERGE__AUTH__OIDC_AUTHORIZE_URL=http://keycloak.trusel.net:8080/realms/myrealm/protocol/openid-connect/auth\nPAPERMERGE__AUTH__OIDC_ACCESS_TOKEN_URL=http://keycloak.trusel.net:8080/realms/myrealm/protocol/openid-connect/token\nPAPERMERGE__AUTH__OIDC_USER_INFO_URL=http://keycloak.trusel.net:8080/realms/myrealm/protocol/openid-connect/userinfo\nPAPERMERGE__AUTH__OIDC_LOGOUT_URL=http://keycloak.trusel.net:8080/realms/myrealm/protocol/openid-connect/logout\nPAPERMERGE__AUTH__OIDC_INTROSPECT_URL=http://keycloak.trusel.net:8080/realms/myrealm/protocol/openid-connect/token/introspect\n</code></pre> <p>For detailed information OpenID Connect see SSO/OIDC documentation.</p>"},{"location":"setup/authentification/#remote-user","title":"Remote User","text":""},{"location":"setup/authentification/#ldap","title":"LDAP","text":"<p>Papermerge DMS can perform authentication against users stored in LDAP system. In order to enable LDAP authentication you need to provide at least two environment variables:</p> <ul> <li>PAPERMERGE__AUTH__LDAP_URL</li> <li>PAPERMERGE__AUTH__LDAP_USER_DN_FORMAT</li> </ul> <p>First one is the URL to your ldap server, without scheme, example:</p> <pre><code>PAPERMERGE__AUTH__LDAP_URL=ldap.trusel.net\n</code></pre> <p>By default, Papermerge DMS will connect to LDAP server using secure TLS connection. If you want Papermerge DMS to access LDAP server using plain text connection, set PAPERMERGE__AUTH__LDAP_USE_SSL to False:</p> <pre><code>PAPERMERGE__AUTH__LDAP_USE_SSL=False\n</code></pre> <p>The second mandatory option is PAPERMERGE__AUTH__LDAP_USER_DN_FORMAT. It instructs Papermerge DMS the DN (distinguished name) of the user you want to authenticate against. Example:</p> <pre><code>PAPERMERGE__AUTH__LDAP_USER_DN_FORMAT=uid={username},ou=People,dc=ldap,dc=trusel,dc=net\n</code></pre> <p>Notice \"{username}\" part - it must be literaly this value; the \"{username}\" will be replaced with actual username of the user when performing LDAP bind.</p> <p>Info</p> <p>In case you are curious, Papermerge DMS uses ldap3 python package to perform LDAP authentication. Here is source code of ldap authentication part.</p> <p>By default Papermerge DMS will try to extract user's email from <code>mail</code> attribute of LDAP entry identified <code>PAPERMERGE__AUTH__LDAP_USER_DN_FORMAT</code> distinguished name. You can instruct Papermerge DMS about email attribute in LDAP entry with PAPERMERGE__AUTH__LDAP_URL.</p>"},{"location":"setup/docker-compose/","title":"Docker Compose","text":"<p>This section describes how to setup Papermerge DMS using docker compose. As mentioned in overview section, Papermerge DMS philosophy revolves around progressive setup concept. As such, you are advised to start with simple setups and progress, in small steps, towards more complicated scenarios. The idea is that on the way you will learn and understand better internals, which in turn will enable you to be build very creative deployments.</p>"},{"location":"setup/docker-compose/#databasepostgresql","title":"Database/PostgreSQL","text":"<p>By default, web app uses SQLite database. SQLite is great for quick demos, not for production environments.</p> <p>Following docker compose file starts Papermerge DMS with PostgreSQL 16.1 database:</p> <pre><code>services:\n  webapp:\n    image: papermerge/papermerge:3.3b16\n    environment:\n      PAPERMERGE__SECURITY__SECRET_KEY: 12345\n      PAPERMERGE__AUTH__USERNAME: admin\n      PAPERMERGE__AUTH__PASSWORD: admin\n      PAPERMERGE__DATABASE__URL: postgresql://coco:jumbo@db:5432/pmgdb\n    ports:\n     - \"12000:80\"\n    depends_on:\n      - db\n  db:\n    image: postgres:16.1\n    volumes:\n      - pgdata:/var/lib/postgresql/data/\n    environment:\n      POSTGRES_PASSWORD: jumbo\n      POSTGRES_DB: pmgdb\n      POSTGRES_USER: coco\n    healthcheck:\n      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB\n      interval: 5s\n      timeout: 10s\n      retries: 5\n      start_period: 10s\nvolumes:\n  pgdata:\n</code></pre> <p>Start it with:</p> <pre><code>  $ docker compose up\n</code></pre> <p>You can access Papermerge DMS user interface using any modern web browser (e.g. Firefox, Chrome). Open your web browser and point it to http://localhost:12000.</p> <p>\ud83e\udd73 Congratulations! \ud83e\udd73 You have two microservices running: web app and PostgreSQL 16.1 database. The web app will wait until db service is up and running - and only then it will start.</p> <p>The format <code>PAPERMERGE__DATABASE__URL</code> is documented in database settings.</p> <p>However, in this setup has a problem \ud83d\ude41. To understand it - upload couple of documents. Now if you remove docker containers with:</p> <pre><code>  $ docker compose down\n</code></pre> <p>And then bring them back with:</p> <pre><code>  $ docker compose up\n</code></pre> <p>You will notice that all documents \"sort of disappeared\". You can see document's titles, but when opening them there are errors.</p> <p>Why so?</p> <p>The problem is that the storage where uploaded documents are stored is not persistent i.e. it uploaded pdf files lives inside docker container and when docker container is removed - so are our documents! Only documents \"titles\" are still there, because that part is stored in database, which at this time is persistent.</p> <p>Note</p> <p>Uploaded files are NOT stored in database! They are stored in file system directory called media root</p>"},{"location":"setup/docker-compose/#persistent-media-storage","title":"Persistent Media Storage","text":"<p>Uploaded files are not stored in database. They are stored in file system directory called media root. In order to persist uploaded files, you need to:</p> <ol> <li>Mount persistent volume</li> <li>Point Papermerge DMS to upload files to the persisted directory</li> </ol> <p>In our example we will create docker compose volume <code>media_root</code> and mount it to internal (to container) directory <code>/var/media/pmg</code>. Finally, we use <code>PAPERMERGE__MAIN__MEDIA_ROOT</code> environment variable to tell Papermerge DMS where to upload documents. Here is docker compose file:</p> <pre><code>services:\n  webapp:\n    image: papermerge/papermerge:3.3b16\n    environment:\n      PAPERMERGE__SECURITY__SECRET_KEY: 12345\n      PAPERMERGE__AUTH__USERNAME: admin\n      PAPERMERGE__AUTH__PASSWORD: admin\n      PAPERMERGE__DATABASE__URL: postgresql://coco:jumbo@db:5432/pmgdb\n      PAPERMERGE__MAIN__MEDIA_ROOT: /var/media/pmg\n    volumes:\n      - media_root:/var/media/pmg\n    ports:\n     - \"12000:80\"\n    depends_on:\n      - db\n  db:\n    image: postgres:16.1\n    volumes:\n      - pgdata:/var/lib/postgresql/data/\n    environment:\n      POSTGRES_PASSWORD: jumbo\n      POSTGRES_DB: pmgdb\n      POSTGRES_USER: coco\n    healthcheck:\n      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB\n      interval: 5s\n      timeout: 10s\n      retries: 5\n      start_period: 10s\nvolumes:\n  pgdata:\n  media_root:\n</code></pre> <p>Now you can:</p> <pre><code>$ docker compose up\n</code></pre> <p>and</p> <pre><code>$ docker compose down\n</code></pre> <p>How many times you want! Your documents will still be there for you \ud83e\udd73! We call that - persistent \ud83d\ude0e.</p> <p>Here are important parts of the compose file highlighted:</p> <p></p> <p>Following illustration visualizes the concept of persistent media storage:</p> <p></p>"},{"location":"setup/docker-compose/#path-templates-worker","title":"Path Templates Worker","text":"<p>This one is optional, but you definitely want it in your team. To understand why, you need to understand why is Path Templates feature all about.</p> <pre><code>services:\n  webapp:\n    image: papermerge/papermerge:3.3b16\n    environment:\n      PAPERMERGE__SECURITY__SECRET_KEY: 12345\n      PAPERMERGE__AUTH__USERNAME: admin\n      PAPERMERGE__AUTH__PASSWORD: admin\n      PAPERMERGE__DATABASE__URL: postgresql://coco:jumbo@db:5432/pmgdb\n      PAPERMERGE__MAIN__MEDIA_ROOT: /var/media/pmg\n      PAPERMERGE__REDIS__URL: redis://redis:6379/0\n    volumes:\n      - media_root:/var/media/pmg\n    ports:\n     - \"12000:80\"\n    depends_on:\n      - db\n      - redis\n  path_template_worker:\n    image: papermerge/path-tmpl-worker:0.3\n    command: worker\n    environment:\n      PAPERMERGE__DATABASE__URL: postgresql://coco:jumbo@db:5432/pmgdb\n      PAPERMERGE__REDIS__URL: redis://redis:6379/0\n      PATH_TMPL_WORKER_ARGS: \"-Q path_tmpl -c 2\"\n    depends_on:\n      - redis\n  db:\n    image: postgres:16.1\n    volumes:\n      - pgdata:/var/lib/postgresql/data/\n    environment:\n      POSTGRES_PASSWORD: jumbo\n      POSTGRES_DB: pmgdb\n      POSTGRES_USER: coco\n    healthcheck:\n      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB\n      interval: 5s\n      timeout: 10s\n      retries: 5\n      start_period: 10s\n  redis:\n    image: bitnami/redis:7.2\n    ports:\n      - \"6379:6379\"\n    environment:\n      ALLOW_EMPTY_PASSWORD: \"yes\"\nvolumes:\n  pgdata:\n  media_root:\n</code></pre>"},{"location":"setup/docker/","title":"Docker","text":""},{"location":"setup/docker/#the-most-basic-setup","title":"The Most Basic Setup","text":"<p>The only two required environment variables are <code>PAPERMERGE__SECURITY__SECRET_KEY</code> and <code>PAPERMERGE__AUTH__PASSWORD</code>. To start web app use following command:</p> <pre><code>docker run -p 12000:80 \\\n    -e PAPERMERGE__SECURITY__SECRET_KEY=abc \\\n    -e PAPERMERGE__AUTH__PASSWORD=pass123 \\\n    papermerge/papermerge:3.3b16\n</code></pre> <p>Point your web browser to <code>http://localhost:12000</code>:</p> <p></p> <p>Credentials are:</p> <ul> <li>username <code>admin</code></li> <li>password <code>pass123</code></li> </ul> <p>Above setup, although incomplete, it is pretty good start. It does not include features like search function or OCR, but it serves well as quick demo to get a feeling of Papermerge DMS. Check docker compose section for more advanced setups.</p>"},{"location":"setup/kubernetes/","title":"Kubernetes","text":"<p>To be added soon...</p>"},{"location":"setup/overview/","title":"Overview","text":"<p>Papermerge DMS is build upon microservice architecture. Microservice architecture means that there are different parts, called microservices, which can be combined in different ways to match your needs.</p> <p>The idea is to start with very simple setup and then add to it, step by step only what you need.</p> <p>The simplest possible setup it following:</p> <pre><code>docker run -p 12000:80 \\\n    -e PAPERMERGE__SECURITY__SECRET_KEY=abc \\\n    -e PAPERMERGE__AUTH__PASSWORD=pass123 \\\n    papermerge/papermerge:3.3b16\n</code></pre> <p>It starts the basic Papermerge DMS microservice, the web app, with one administrative user account, which has username <code>admin</code> and password <code>pass123</code>. Instance is accessible on <code>http://localhost:12000</code>.</p> <p></p> <p>What you see in picture above is so called web app microservice. It is the starting point of many setups. Although incomplete, it is pretty good start. Other capabilities can be added as separate microservices. For example in production environment it is better to use production ready database like PostgreSQL (or MariaDB). Depending on your deployment environment you may consider to add S3 storage.</p> <p>Tip</p> <p>Always start with basic setup. Extend it gradually based on your needs.</p> <p>Starting with complex deployment may be overwhelming, especially if you don't understand the basics. Papermerge DMS can have extremely complex deployment k8s cluster setups: with many stateless web app pods, with external authentication server, with S3 storage backend, CDN etc.</p>"},{"location":"setup/overview/#microservices","title":"Microservices","text":"<p>Following is the list of microservices which can be combined with Papermerge DMS to extend its capabilities:</p> <ul> <li>database (PostgreSQL, MariaDB)</li> <li>search engine (currently only Solr is supported)</li> <li>search indexer (syncs database with search engine)</li> <li>OCR worker - performs OCRs on the documents</li> <li>websockets service - use it if you want user to receive real time notifications about background events</li> <li>path template service - moves documents into target path based on the document metadata</li> <li>S3 service - syncs documents with S3 storage</li> </ul> <p>In following sections you will find details of setup of each separate service.</p> <p>Each service is deployed as docker image. As such, it can be deployed in any dockerized environment. However, this documentation focuses on docker, docker compose, ansible and kubernetes.</p>"},{"location":"setup/overview/#progressive-setup","title":"Progressive Setup","text":"<p>We call this architecture - progressive setup: you start small, and then you grow and extend Papermerge DMS deployment environment as much as you like.</p>"},{"location":"setup/requirements/","title":"Requirements","text":""},{"location":"setup/requirements/#software","title":"Software","text":"<p>Papermerge DMS is designed to run on Linux compatible system.</p> <p>You need to have docker installed, or docker runtime, as Papermerge DMS is shipped as docker image. All docker images are stored on docker hub.</p> <p>Make sure that you have docker available:</p> <pre><code>    $ docker --version\n    Docker version 26.1.3, build b72abbb\n</code></pre>"},{"location":"setup/requirements/#hardware","title":"Hardware","text":"<p>It depends on the setup. The hardware requiremnets for k8s cluster setup will be very different than for lab deployment on one single VM. It also deplends if you intend to use OCR features.</p> <p>An absolute minimul requirement, for running just web app, would be 1GB of RAM memory. In k8s deployment - Papermerge DMS helm chart describes minimum resource requirement for each individual web service. See k8s deployment setups for details.</p>"},{"location":"sso/overview/","title":"Overview","text":"<p>Papermerge DMS supports SSO - single sign on - a way of offloading authentication task to a centralized entity, usually referred as Identity Provider.</p> <p>SSO can be configured in many different ways. Papermerge DMS supports following SSO methods:</p> <ul> <li>OIDC</li> <li>Remote User</li> <li>LDAP</li> </ul> <p>OIDC is a standardized protocol. \"Remote User\" user method conventional. LDAP is the most creative method part of the three - means there many ways to configure LDAP authentication.</p>"},{"location":"sso/oidc/authentik/","title":"Authentik","text":"<p>This guide shows how to setup Papermerge DMS + Authentik as OIDC identity provider. It was tested with Authentik 2023.10.7</p> <p>To follow this guide you need one Papermerge DMS and one Authentik instance. For this guide we have:</p> <pre><code>http://authk.trusel.net:9000/ (Authentik instance)\nhttp://demo.trusel.net:12000/ (Papermerge DMS instance)\n</code></pre> <p>Of course for your specific deployment you'll want to serve both apps over https, with valid certificates and without featuring ports in URLs, but for our guide we will skip those parts.</p> <p>In first part of the guide we will add administrative user (superuser). Superuser has all permissions, in other words, superuser is the most privileged user in Papermerge DMS. In second part of the guide we will add one non-superuser.</p>"},{"location":"sso/oidc/authentik/#administrative-user-superuser","title":"Administrative User (Superuser)","text":""},{"location":"sso/oidc/authentik/#step-1-create-application","title":"Step 1 - Create Application","text":"<p>Create new application. Applications -&gt; Create:</p> <pre><code>Name: Papermerge\nSlug: papermerge\nPolicy engine mode: any\n</code></pre> <p>Leave <code>Provider</code> field empty for this moment, we will fill it in later.</p>"},{"location":"sso/oidc/authentik/#step-2-create-provider","title":"Step 2 - Create Provider","text":"<p>Create OIDC provider. Applications -&gt; Providers -&gt; Create:</p> <pre><code>Choose OAuth2/OpenID Provider\nName: papermerge\nAuthentication flow: default-authentication-flow\nAuthorization flow: default-provider-authorization-explicit-consent\nClient type: confidential\nSubject mode (in Advanced protocol settings): Based on User's UUID\nScopes (in Advanced protocol settings): make sure email, openid, profile are selected\n</code></pre> <p>Last point is very important as it will setup <code>sub</code> claim to contain user's UUID.</p> <p></p>"},{"location":"sso/oidc/authentik/#step-3-associated-provider-with-application","title":"Step 3 - Associated Provider with Application","text":"<p>Applications -&gt; Papermerge -&gt; Edit. Change <code>Provider</code> field to <code>papermerge</code>. Update.</p>"},{"location":"sso/oidc/authentik/#step-4-create-user","title":"Step 4 - Create User","text":"<p>Let's create a user in Authentik.</p> <p>Directory -&gt; Users -&gt; Create. Create user with following details:</p> <pre><code>- username: bender\n- email: bender@mail.com\n- password: benderpass\n</code></pre> <p>User \"bender\" will be administrative user in Papermerge DMS.</p> <p>Note</p> <p>User is created in Authentik. User password is set in Authentik as well.</p>"},{"location":"sso/oidc/authentik/#step-5-start-papermerge","title":"Step 5 - Start Papermerge","text":"<p>Get all OIDC related settings from Authentik's Providers -&gt; papermerge. There you will find client ID, client secret etc.</p> <p>Start Papermerge DMS with OIDC enabled, with following docker compose:</p> <pre><code>version: \"3.9\"\n\nx-backend: &amp;common\n  image: papermerge/papermerge:3.3b16\n  environment:\n    PAPERMERGE__SECURITY__SECRET_KEY: super-secret-12345\n    PAPERMERGE__AUTH__USERNAME: bender\n    PAPERMERGE__AUTH__EMAIL: bender@mail.com\n    PAPERMERGE__AUTH__PASSWORD: 1234-not-relevant-but-still-needs-to-be-here\n    PAPERMERGE__AUTH__OIDC_CLIENT_SECRET: cBqWCID8xt0fjpTFJwup32K8gaF4zufuUYVmUPoAUY90FxVpnPqL1Krl74viDaKzpLyhzBNWgstKztITpstBdvjEfzlA6jr3g2HL6tqwGW6W5Ax93xGzkTD2xw0WsVTu\n    PAPERMERGE__AUTH__OIDC_CLIENT_ID: o2h90p8RuJe2GQT01LkNGlM3QuN8yxjQUdOE5Ylw\n    PAPERMERGE__AUTH__OIDC_AUTHORIZE_URL: http://authk.trusel.net:9000/application/o/authorize/\n    PAPERMERGE__AUTH__OIDC_ACCESS_TOKEN_URL: http://authk.trusel.net:9000/application/o/token/\n    PAPERMERGE__AUTH__OIDC_INTROSPECT_URL: http://authk.trusel.net:9000/application/o/introspect/\n    PAPERMERGE__AUTH__OIDC_USER_INFO_URL: http://authk.trusel.net:9000/application/o/userinfo/\n    PAPERMERGE__AUTH__OIDC_LOGOUT_URL: http://authk.trusel.net:9000/application/o/papermerge/end-session/\n    PAPERMERGE__AUTH__OIDC_SCOPE: \"openid email profile\"\n    PAPERMERGE__AUTH__OIDC_REDIRECT_URL: http://demo.trusel.net:12000/oidc/callback\nservices:\n  web:\n    &lt;&lt;: *common\n    ports:\n     - \"12000:80\"\n  worker:\n    &lt;&lt;: *common\n    command: worker\n</code></pre> <p>Note that <code>PAPERMERGE__AUTH__OIDC_CLIENT_SECRET</code>, <code>PAPERMERGE__AUTH__OIDC_CLIENT_ID</code> should match their counterpart in \"papermerge provider\" created in Authentik.</p> <p><code>PAPERMERGE__AUTH__USERNAME</code> and <code>PAPERMERGE__AUTH__EMAIL</code> should match the user we created in step 4. As it was mentioned, we will use \"bender\" as administrative user in Papermerge DMS. Note that you need to specify <code>PAPERMERGE__AUTH__PASSWORD</code>, but whatever you put there is completely irrelevant because administrative user will login with password managed in Authentik (in our example it is \"benderpass\").</p> <p><code>PAPERMERGE__AUTH__OIDC_REDIRECT_URL</code> should match \"Valid redirect URIs\" from Step 3 and it should be of format: <code>[http|https]://&lt;papermerge-instance-domain&gt;/oidc/callback</code>.</p> <p><code>PAPERMERGE__AUTH__OIDC_SCOPE</code> must include \"profile\", otherwise JWT token won't contain <code>preferred_username</code> and <code>groups</code> claims</p> <p>It may happen that not all OIDC endpoints are shown in Authentik UI. To get all OIDC endpoints, use \"OpenID Configuration URL\" directly in your browser:</p> <p></p>"},{"location":"sso/oidc/authentik/#step-6-login-as-superuser","title":"Step 6 - Login as Superuser","text":"<p>Warning</p> <p>There is a known issue that after successful login - \"sign in\" view is still shown. As workaround you need to hit browser's refresh button.</p>"},{"location":"sso/oidc/authentik/#groups-permissions","title":"Groups / Permissions","text":"<p>In this part we will add less privileged users. Users added in this part have limited permissions - they won't be able to add/view/delete other groups and users. User permissions are set via groups. Each group has a specific set of permissions; if user belongs to a group - he or she has all permissions assigned to respective group.</p> <p>For this part to work, make sure you've completed the \"superuser\" part of this guide.</p> <p>All non-superusers (i.e. normal users) must belong to one or more groups.</p> <p>In this part we will create one user \"leela\". \"leela\" will have all permissions but view/create/delete for users/groups.</p>"},{"location":"sso/oidc/authentik/#step-1-create-group-in-papermerge","title":"Step 1 - Create Group in Papermerge","text":"<p>First we need to create group, named \"family\", with desired set of permissions. You do this in Papermerge DMS with user \"bender\".</p> <p></p> <p>Note</p> <p>Group names in Authentik and in Papermerge DMS should match.</p>"},{"location":"sso/oidc/authentik/#step-2-add-user","title":"Step 2 - Add User","text":"<p>Create user \"leela\" in Authentik. Create \"family\" group in Authentik. Add user \"leela\" to group \"family\" (in Authentik). Of course you will set leela's password in Authentik as well.</p> <p>The outcome should look like:</p> <p></p>"},{"location":"sso/oidc/authentik/#step-3-login-as-leela","title":"Step 3 - Login as \"leela\"","text":"<p>Login with as leela in Papermerge DMS. Notice that \"users\" and \"groups\" tabs on the left side bar are not visible, as leela does not have permissions to to manage users and groups.</p> <p></p>"},{"location":"sso/oidc/keycloak/","title":"Keycloak","text":"<p>This guide shows how to setup Papermerge + Keyloak as OIDC identity provider. It was tested with Keycloak 24.0.2.</p> <p>To follow this guide you need one Papermerge DMS and one Keycloak instance. For this guide we have:</p> <ul> <li>http://keycloak.trusel.net:8080/ (Keycloak instance)</li> <li>http://demo.trusel.net:12000/  (Papermerge DMS instance)</li> </ul> <p>Of course for your specific deployment you'll want to serve both apps over https, with valid certificates and without featuring ports in URLs, but for our guide we will skip those parts.</p> <p>In first part of the guide we will add administrative user (superuser). Superuser has all permissions, in other words, superuser is the most privileged user in Papermerge DMS. In second part of the guide we will add one non-superuser.</p>"},{"location":"sso/oidc/keycloak/#administrative-user-superuser","title":"Administrative User (Superuser)","text":""},{"location":"sso/oidc/keycloak/#step-1-create-realm","title":"Step 1 - Create Realm","text":"<p>Create a new realm in Keycloak as described here. We will name it \"myrealm\".</p>"},{"location":"sso/oidc/keycloak/#step-2-create-user","title":"Step 2 - Create User","text":"<p>In \"myrealm\" create a user, as described here with following details:</p> <pre><code>- username: bender\n- email: bender@mail.com\n- password: benderpass\n</code></pre> <p>User \"bender\" will be administrative user in Papermerge DMS. Let's create OIDC client.</p>"},{"location":"sso/oidc/keycloak/#step-3-create-oidc-client","title":"Step 3 - Create OIDC Client","text":"<p>Make sure you are currently in \"myrealm\". Click Clients -&gt; Create client. Choose:</p> <pre><code>- Client type: OpenID Connect\n- Client ID: papermerge\n- Client authentication: \"ON\"\n- Home URL: http://demo.trusel.net:12000\n- Valid redirect URIs: http://demo.trusel.net:12000/oidc/callback\n</code></pre> <p>Click \"Save\"</p> <p>Now, with OIDC Client saved, you can go to it's \"Credentials\" tab and note its \"Client Secret\". You will need it in next step. For this guide, the Client Secret is:</p> <pre><code>- Client Secret: OHGMBgyAjcvDtn4PAu8w8vE9yf06aHn1\n</code></pre>"},{"location":"sso/oidc/keycloak/#step-4-start-papermerge","title":"Step 4 - Start Papermerge","text":"<p>Now, start Papermerge DMS with OIDC enabled, with following docker compose:</p> <pre><code>version: \"3.9\"\n\nx-backend: &amp;common\n  image: papermerge/papermerge:3.3b16\n  environment:\n    PAPERMERGE__SECURITY__SECRET_KEY: super-secret-12345\n    PAPERMERGE__AUTH__USERNAME: bender\n    PAPERMERGE__AUTH__EMAIL: bender@mail.com\n    PAPERMERGE__AUTH__PASSWORD: 1234-not-relevant-but-still-needs-to-be-here\n    PAPERMERGE__AUTH__OIDC_CLIENT_SECRET: OHGMBgyAjcvDtn4PAu8w8vE9yf06aHn1\n    PAPERMERGE__AUTH__OIDC_CLIENT_ID: papermerge\n    PAPERMERGE__AUTH__OIDC_AUTHORIZE_URL: http://keycloak.trusel.net:8080/realms/myrealm/protocol/openid-connect/auth\n    PAPERMERGE__AUTH__OIDC_ACCESS_TOKEN_URL: http://keycloak.trusel.net:8080/realms/myrealm/protocol/openid-connect/token\n    PAPERMERGE__AUTH__OIDC_INTROSPECT_URL: http://keycloak.trusel.net:8080/realms/myrealm/protocol/openid-connect/token/introspect\n    PAPERMERGE__AUTH__OIDC_USER_INFO_URL: http://keycloak.trusel.net:8080/realms/myrealm/protocol/openid-connect/userinfo\n    PAPERMERGE__AUTH__OIDC_LOGOUT_URL: http://keycloak.trusel.net:8080/realms/myrealm/protocol/openid-connect/logout\n    PAPERMERGE__AUTH__OIDC_REDIRECT_URL: http://demo.trusel.net:12000/oidc/callback\nservices:\n  web:\n    &lt;&lt;: *common\n    ports:\n     - \"12000:80\"\n  worker:\n    &lt;&lt;: *common\n    command: worker\n</code></pre> <p>Note that <code>PAPERMERGE__AUTH__OIDC_CLIENT_SECRET</code>, <code>PAPERMERGE__AUTH__OIDC_CLIENT_ID</code> should match their counterpart from step 3.</p> <p><code>PAPERMERGE__AUTH__USERNAME</code> and <code>PAPERMERGE__AUTH__EMAIL</code> should match the user we created in step 2. As it was mentioned, we will use \"bender\" as administrative user in Papermerge DMS. Note that you need to specify <code>PAPERMERGE__AUTH__PASSWORD</code>, but whatever you put there is completely irrelevant because administrative user will login with password managed in Keycloak (in our example it is \"benderpass\").</p> <p><code>PAPERMERGE__AUTH__OIDC_REDIRECT_URL</code> should match \"Valid redirect URIs\" from Step 3 and it should be of format: <code>[http|https]://&lt;papermerge-instance-domain&gt;/oidc/callback</code>.</p>"},{"location":"sso/oidc/keycloak/#step-5-login-as-superuser","title":"Step 5 - Login as Superuser","text":"<p>Warning</p> <p>There is a known issue that after successful login - \"sign in\" view is still shown. As workaround you need to hit browser's refresh button.</p>"},{"location":"sso/oidc/keycloak/#groups-permissions","title":"Groups / Permissions","text":"<p>In this part we will add less privileged users. Users added in this part have limited permissions - they won't be able to add/view/delete other groups and users. User permissions are set via groups. Each group has a specific set of permissions; if user belongs to a group - he or she has all permissions assigned to respective group.</p> <p>For this part to work, make sure you've completed the \"superuser\" part from above.</p> <p>All non-superuser (i.e. normal users) must belong to one or more groups.</p> <p>In this part we will create one user \"leela\". \"leela\" will have all permissions but view/create/delete for users/groups.</p>"},{"location":"sso/oidc/keycloak/#step-1-create-group-in-papermerge","title":"Step 1 - Create Group in Papermerge","text":"<p>First we need to create group, named \"family\", with desired set of permissions. You do this in Papermerge DMS with user \"bender\".</p> <p></p> <p>Note</p> <p>Group names in Keycloak and in Papermerge DMS should match.</p>"},{"location":"sso/oidc/keycloak/#step-2-add-user","title":"Step 2 - Add User","text":"<p>Create user \"leela\" in Keycloak and add her to group \"family\".</p> <p></p>"},{"location":"sso/oidc/keycloak/#step-3-configure-groups-claim","title":"Step 3 - Configure \"groups\" Claim","text":"<p>By default Keycloak creates JWT token without \"groups\" claim. We need to add \"groups\" claim to the JWT token. While adding it make sure you uncheck \"Full group path\": Clients -&gt; papermerge -&gt; Client Scopes -&gt; papermerge-dedicated -&gt; Add mapper -&gt; By Configuration -&gt; Group Membership.</p> <ul> <li>Name: \"groups\"</li> <li>Token Claim Name: \"groups\"  (it must be plural!)</li> <li>Uncheck \"Full group path\"  (important!)</li> </ul> <p></p>"},{"location":"sso/oidc/keycloak/#step-4-login-as-leela","title":"Step 4 - Login as \"leela\"","text":"<p>Leela's password is managed by Keycloak. In Keycloak You can go to Users -&gt; leela -&gt; Credentials to change her password.</p> <p>Login with as leela in Papermerge DMS. Notice that \"users\" and \"groups\" tabs on the left side bar are not visible, as leela does not have permissions to manage users and groups.</p> <p></p>"},{"location":"sso/oidc/keycloak/#troubleshooting","title":"Troubleshooting","text":"<p>While troubleshooting you may want to see the actual JWT token. For that right click -&gt; Inspect -&gt; Application -&gt; Cookies -&gt; \"access_token\". Access token cookie is basically the JWT access token. Use     jwt.io page to see decoded token.</p>"},{"location":"sso/oidc/overview/","title":"Overview","text":""},{"location":"sso/oidc/overview/#protocol","title":"Protocol","text":"<p>OpenID Connect (OIDC) is an interoperable authentication protocol based on the OAuth 2.0 framework of specifications.</p> <p>OIDC is a standardized protocol.</p> <p>With OIDC, the accounts registration, authentication, accounts management (e.g. password management), is offloaded from the shoulders of the app to separate entity - identity provider.</p> <p></p> <p>Note</p> <p>\"Authenticate\" means same as \"sign in\", \"login\". Verbs \"authenticate\", \"sign in\", \"login\" are used interchangeably</p> <p>With OIDC, instead of authenticating in each individual app, user authenticates with on identity provider (IP) side. To authenticate users, identity provider can employ various schemes like 2FA (two factor authentication). Once authentication is successful on the identity provider side, IP sends Papermerge DMS a digitally signed token. All the subsequent requests to Papermerge DMS need to have that token, or otherwise they will be denied as not authorized.</p> <p>It may sounds abstract, because it is abstract. I think couple of illustration will clear the waters.</p> <p>First, in order to authenticate, OIDC enabled app (Papermerge DMS) will redirect user to OIDC provider sign in page. On successful authentication Papermerge DMS receives a token - so called jwt token.</p> <p></p> <p>In above illustration, for step 1 -&gt; 2 to work <code>PAPERMERGE__AUTH__OIDC_AUTHORIZE_URL</code> setting is employed. For step 2 -&gt; 3 to work <code>PAPERMERGE__AUTH__OIDC_REDIRECT_URL</code> is used.</p> <p>The trophy, which Papermerge DMS receives from identity provider for successful sign in, is so call called JWT token. Users have no idea (and rightfully so) about JWT tokens, as all token business happens behind the scenes.</p> <p>Note</p> <p>All processes described from here on, are not visible to the users. It all happens behind the scenes for them. Information which follows is meant for devs, DevOps, SREs.</p> <p>Your OIDC application needs JWT token as prove of successful authentication. As you may guess, JWt token will be carried inside each subsequent http requsts as http header.</p> <p>All incoming http requests are proved for validity of JWT token. If http request has valid JWT token - request is permitted to reach app. If http request does not contain valid JWT token - it is denied access to the app.</p> <p>Note</p> <p>By \"valid JWT token\" is usually meant that it contain valid digital signature, it is not expired and maybe some other checks specific to identity provider.</p> <p>Following illustrations depict what happens with incoming requests:</p> <p></p> <p></p> <p>Inside Papermerge DMS there is a \"guard\" which, for every incoming request, asks identity provider if respective HTTP request is valid or not. If identity provider says that JWT token is valid - request is permitted to pass, otherwise access is denied. This step is possible due to <code>PAPERMERGE__AUTH__OIDC_INTROSPECT_URL</code> setting. OIDC introspect endpoint is go to endpoint to inquiry for validity of the JWT token.</p> <p>The last technical detail to clarify, with high risk of diving in too many details, is: what is this \"guard\" thingy? \"Guard\" is nginx's authorization based on sub-request result. In other words, there is nginx's \"auth_request\" for every incoming HTTP request and depending on it's response's status code the request is allowed to pass or not.</p>"},{"location":"sso/oidc/overview/#users","title":"Users","text":"<p>When using OIDC provider, users are managed on OIDC provider side. You will create, update, delete users on OIDC provider side. This means also that you set users' passwords on provider side (Keycloak, Authentik).</p> <p>The only exception from this rule is very first superuser account of the Papermerge DMS. Initial superuser account of Papermerge DMS is created on both sides: in Papermerge DMS via <code>PAPERMERGE__AUTH__USERNAME</code>, <code>PAPERMERGE__AUTH__EMAIL</code> <code>PAPERMERGE__AUTH__PASSWORD</code> environment variables and via OIDC provider.</p> <p>Note however that even though you must supply <code>PAPERMERGE__AUTH__PASSWORD</code>, its value is not used, as you will login using password configured in OIDC provider.</p>"},{"location":"sso/oidc/overview/#groups","title":"Groups","text":"<p>Every user which will login into Papermerge DMS via OIDC must belong to one or more groups. The only exception from this rule is initial superuser account.</p> <p>Groups must be created on both sides - on Papermerge DMS side and on OIDC provider side. Groups are matches by their names. This means, in order to match, on both sides group name must be same. Name matching is case sensitive, this means for examples that \"Family\" and \"family\" are distinct names.</p>"},{"location":"sso/oidc/overview/#permissions","title":"Permissions","text":"<p>When using OIDC provider, permissions are managed on Papermerge DMS side only. Group can be regarded as a set of permissions. Group &lt;-&gt; Permissions association is accomplished on Papermerge DMS side.</p> <p>On the OIDC provider side, users are assigned to groups. By matching group on the Papermerge DMS side, user gains all permissions of the groups they were assigned.</p> <p>Users, groups, permissions entities relations can be illustrated as in following picture:</p> <p></p>"},{"location":"sso/remote-user/authelia/","title":"Authelia","text":"<p>Following guide is based on Self-Hosted SSO with Authelia and NGINX.</p> <p>In this guide adoptation, we will use two domains:</p> <ul> <li>auth.trusel.net (Authelia)</li> <li>calypso.trusel.net (Papermerge)</li> </ul> <p>Both domains are accessiable via HTTPS (with valid certificates). Both domains are resolved to the same host. There is an NGINX which receives requests for above mentioned domains (and takes care of the certs) and proxy passes the requests to the locally running Papermerge DMS or Authelia.</p> <p>Local Authelia will run on <code>127.0.0.1:9091</code> and local Papermerge DMS will run on <code>127.0.0.1:12000</code>.</p> <p></p>"},{"location":"sso/remote-user/authelia/#step-1-authelias-compose","title":"Step 1 - Authelia's Compose","text":"<p>Let's start with docker compose file for Authelia:</p> <pre><code>networks:\n  net:\n    driver: bridge\n\nservices:\n  authelia:\n    image: authelia/authelia\n    container_name: authelia\n    volumes:\n      - ${PWD}/authelia/authelia:/config\n    networks:\n      - net\n    ports:\n      - 9091:9091\n    restart: unless-stopped\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=Europe/Berlin\n\n  redis:\n    image: redis:alpine\n    container_name: redis_authelia\n    volumes:\n      - ./redis:/data\n    networks:\n      - net\n    expose:\n      - 6379\n    restart: unless-stopped\n    environment:\n      - TZ=Europe/Berlin\n      - PUID=1000\n      - PGID=1000\n</code></pre>"},{"location":"sso/remote-user/authelia/#step-2-authelias-configs","title":"Step 2 - Authelia's Configs","text":"<p>As you can see in compose file, there is a mount from local \"authelia/authelia\" folder to \"/config\". Let's create that folder and place all configuration in it:</p> <pre><code>mkdir -p authelia/authelia\ncd authelia/authelia\ntouch configuration.yml\n</code></pre> <p>In configuration.yml put following:</p> <pre><code>server:\n  host: 0.0.0.0\n  port: 9091\nlog:\n  level: info\njwt_secret: zgpWgPv7lPDkxb0mJFZYc8DkE90jJ1LEl66RjQ6i6ekI7pXYrJQGmvHB6L6xNEEo\ndefault_redirection_url: https://auth.trusel.net\n\nauthentication_backend:\n  file:\n    path: /config/users_database.yml\n\naccess_control:\n  default_policy: deny\n  rules:\n    - domain:\n        - \"auth.trusel.net\"\n      policy: bypass\n    - domain:\n        - \"calypso.trusel.net\"\n      policy: one_factor\n\nsession:\n  name: authelia_session\n  secret: zgpWgPv7lPDkxb0mJFZYc8DkE90jJ1LEl66RjQ6i6ekI7pXYrJQGmvHB6L6xNEEo\n  expiration: 12h           # 12 hours\n  inactivity: 100m           # 100 minutes\n  remember_me_duration: 1M  # 1 month\n  domain: trusel.net\n\n  redis:\n    host: redis_authelia\n    port: 6379\n\nregulation:\n  max_retries: 6\n  find_time: 5m\n  ban_time: 15m\n\nstorage:\n  encryption_key: 12341234123412341234556987239847239478akjdhahdkjh\n  local:\n    path: /config/db2.sqlite3\n\nnotifier:\n  disable_startup_check: false\n  filesystem:\n    filename: /config/notification.txt\n</code></pre> <p>The important part to note here is:</p> <pre><code>...\naccess_control:\n  default_policy: deny\n  rules:\n    - domain:\n        - \"auth.trusel.net\"\n      policy: bypass\n    - domain:\n        - \"calypso.trusel.net\"\n      policy: one_factor\n...\n</code></pre> <p>Which setups access control for two domains: <code>auth.trusel.net</code> - which is the domain under which Authelia is available and <code>calypso.trusel.net</code> the domain under which Papermerge DMS application is available.</p>"},{"location":"sso/remote-user/authelia/#step-3-authelias-users","title":"Step 3 - Authelia's Users","text":"<p>Let's create users on Authelia side. There are two users: \"bender\" and \"leela\". \"bender\" is administrative (superuser). \"leela\" is normal user and she is part of \"family\" group.</p> <p>Here is the content of <code>users_database.yml</code>:</p> <pre><code>users:\n  bender:\n    displayname: \"Bender\"\n    password: $argon2id$v=19$m=65536,t=3,p=4$ML2qiuCXKNtSh1SC2zdiDA$Zq6ar+W+J1qUTbweP6uKfDCzPbhbHG3rrScaA6uKkcc\n    email: bender@mail.com\n  leela:\n    displayname: \"Leela\"\n    password: $argon2id$v=19$m=65536,t=3,p=4$Oe6oxqot1BT4Z8pb2EdNpw$qib0A48D71bybWPslNWBZ8ieK6B++XFtKbAvKMj0Px0\n    email: leela@mail.com\n    groups:\n      - family\n</code></pre>"},{"location":"sso/remote-user/authelia/#step-4-nginx","title":"Step 4 - NGINX","text":"<p>NGINX's sites-enabled has two files <code>auth.trusel.net</code>, which is Authelia's domain and <code>calypso.trusel.net</code> which is Papermerge DMS domain.</p> <p>Here is the content of <code>/etc/nginx/sites-enabled/auth.trusel.net</code>:</p> <pre><code>server {\n    server_name auth.trusel.net;\n    listen 80;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    server_name auth.trusel.net;\n    listen 443 ssl;\n    ssl_certificate /etc/letsencrypt/live/auth.trusel.net/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/auth.trusel.net/privkey.pem;\n\n    location / {\n        set $upstream_authelia http://127.0.0.1:9091;\n        proxy_pass $upstream_authelia;\n\n        add_header Access-Control-Allow-Origin *;\n\n        client_body_buffer_size 128k;\n\n        #Timeout if the real server is dead\n        proxy_next_upstream error timeout invalid_header http_500 http_502     http_503;\n\n        # Advanced Proxy Config\n        send_timeout 5m;\n        proxy_read_timeout 360;\n        proxy_send_timeout 360;\n        proxy_connect_timeout 360;\n\n        # Basic Proxy Config\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Host $http_host;\n        proxy_set_header X-Forwarded-Uri $request_uri;\n        proxy_set_header X-Forwarded-Ssl on;\n        proxy_redirect  http://  $scheme://;\n        proxy_http_version 1.1;\n        proxy_set_header Connection \"\";\n        proxy_cache_bypass $cookie_session;\n        proxy_no_cache $cookie_session;\n        proxy_buffers 64 256k;\n\n        # If behind reverse proxy, forwards the correct IP\n        set_real_ip_from 10.0.0.0/8;\n        set_real_ip_from 172.0.0.0/8;\n        set_real_ip_from 192.168.0.0/16;\n        set_real_ip_from fc00::/7;\n        real_ip_header X-Forwarded-For;\n        real_ip_recursive on;\n    }\n}\n</code></pre> <p>And below is the content of <code>/etc/nginx/sites-enabled/calypso.trusel.net</code>:</p> <pre><code>server {\n    server_name calypso.trusel.net;\n    listen 80;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    server_name calypso.trusel.net;\n    listen 443 ssl http2;\n    ssl_certificate /etc/letsencrypt/live/calypso.trusel.net/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/calypso.trusel.net/privkey.pem;\n\n    include snippets/authelia.conf; # Authelia auth endpoint\n\n    location / {\n        proxy_pass http://127.0.0.1:12000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n        include snippets/auth.conf; # Protect this endpoint\n    }\n}\n</code></pre> <p>It includes two snippets. One is <code>snippets/authelia.conf</code>:</p> <pre><code>location /authelia {\n    internal;\n    set $upstream_authelia http://127.0.0.1:9091/api/verify;\n    proxy_pass_request_body off;\n    proxy_pass $upstream_authelia;\n    proxy_set_header Content-Length \"\";\n\n    # Timeout if the real server is dead\n    proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;\n\n    # [REQUIRED] Needed by Authelia to check authorizations of the resource.\n    # Provide either X-Original-URL and X-Forwarded-Proto or\n    # X-Forwarded-Proto, X-Forwarded-Host and X-Forwarded-Uri or both.\n    # Those headers will be used by Authelia to deduce the target url of the     user.\n    # Basic Proxy Config\n    client_body_buffer_size 128k;\n    proxy_set_header Host $host;\n    proxy_set_header X-Original-URL $scheme://$http_host$request_uri;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $remote_addr;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_set_header X-Forwarded-Host $http_host;\n    proxy_set_header X-Forwarded-Uri $request_uri;\n    proxy_set_header X-Forwarded-Ssl on;\n    proxy_redirect  http://  $scheme://;\n    proxy_http_version 1.1;\n    proxy_set_header Connection \"\";\n    proxy_cache_bypass $cookie_session;\n    proxy_no_cache $cookie_session;\n    proxy_buffers 4 32k;\n\n    # Advanced Proxy Config\n    send_timeout 5m;\n    proxy_read_timeout 240;\n    proxy_send_timeout 240;\n    proxy_connect_timeout 240;\n}\n</code></pre> <p>And another snippet is <code>snippets/auth.conf</code>. This is the heart and the most relevant part of this guide!</p>"},{"location":"sso/remote-user/authelia/#the-most-important","title":"The Most Important","text":"<p>!! The most important part of the entire guide - START !!</p> <p>This is where \"remote-user\" header magic actually takes place. It is <code>snippets/auth.conf</code> file included <code>calypso.trusel.net</code>.</p> <p>Here is its content:</p> <pre><code># Basic Authelia Config\n# Send a subsequent request to Authelia to verify if the user is authenticated\n# and has the right permissions to access the resource.\nauth_request /authelia;\n\n# Set the `target_url` variable based on the request. It will be used to build the portal\n# URL with the correct redirection parameter.\nauth_request_set $target_url $scheme://$http_host$request_uri;\n\n# Set the X-Forwarded-User and X-Forwarded-Groups with the headers\n# returned by Authelia for the backends which can consume them.\n# This is not safe, as the backend must make sure that they come from the\n# proxy. In the future, it's gonna be safe to just use OAuth.\nauth_request_set $user $upstream_http_remote_user;\nauth_request_set $groups $upstream_http_remote_groups;\nauth_request_set $name $upstream_http_remote_name;\nauth_request_set $email $upstream_http_remote_email;\n\nproxy_set_header Remote-User $user;\nproxy_set_header Remote-Groups $groups;\nproxy_set_header Remote-Name $name;\nproxy_set_header Remote-Email $email;\nadd_header Set-Cookie \"remote_user=$user; path=/\";\nadd_header Set-Cookie \"remote_groups=$groups; path=/\";\nadd_header Set-Cookie \"remote_name=$name; path=/\";\nadd_header Set-Cookie \"remote_email=$email; path=/\";\n\n# If Authelia returns 401, then nginx redirects the user to the login portal.\n# If it returns 200, then the request pass through to the backend.\n# For other type of errors, nginx will handle them as usual.\nerror_page 401 =302 https://auth.trusel.net/?rd=$target_url;\n</code></pre> <p>The utmost importance are following lines:</p> <pre><code>proxy_set_header Remote-User $user;\nproxy_set_header Remote-Groups $groups;\nproxy_set_header Remote-Name $name;\nproxy_set_header Remote-Email $email;\nadd_header Set-Cookie \"remote_user=$user; path=/\";\nadd_header Set-Cookie \"remote_groups=$groups; path=/\";\nadd_header Set-Cookie \"remote_name=$name; path=/\";\nadd_header Set-Cookie \"remote_email=$email; path=/\";\n</code></pre> <p>In above statements remote headers are set. Notice that besides \"Remote-User\" etc headers there also are \"Set-Cookie\" in other words, the user information is also passed as cookie. Passing Remote-User information along via cookies as well is required by Papermerge DMS.</p> <p>!! The most important part of the entire guide - END !!</p>"},{"location":"sso/remote-user/authelia/#step-5-papermerge","title":"Step 5 - Papermerge","text":"<p>Start Papermerge DMS with following docker compose file:</p> <pre><code>\nservices:\n  paper:\n    image: papermerge/papermerge:3.2\n    container_name: paper\n    ports:\n      - 12000:80\n    restart: unless-stopped\n    environment:\n      - PAPERMERGE__SECURITY__SECRET_KEY=abc-secret\n      - PAPERMERGE__AUTH__REMOTE=yes\n      - PAPERMERGE__AUTH__REMOTE_LOGOUT_ENDPOINT=https://auth.trusel.net/logout\n      - PAPERMERGE__AUTH__USERNAME=bender\n      - PAPERMERGE__AUTH__PASSWORD=not-used-but-needs-to-be-present\n      - PAPERMERGE__AUTH__EMAIL=bender@mail.com\n</code></pre> <p>Some key points to notice:</p> <ol> <li>The username should match existing user configured in Authelia. In our case it is \"bender\".</li> <li>The email should match the bender's email from Authelia side.</li> <li>User \"shared\" between Authelia and Papermerge DMS is superuser i.e. administrative user.</li> <li>You need to supply <code>PAPERMERGE__AUTH__PASSWORD</code> value, however its value is not relevent, as you will be authenticating with password configured on Authelia side.</li> <li>Any non-empty value will do for <code>PAPERMERGE__AUTH__REMOTE</code>. It may be \"1\", \"True\", \"yes\".</li> </ol>"},{"location":"sso/remote-user/authelia/#step-6-sign-in-with-superuser","title":"Step 6 - Sign In with Superuser","text":"<p>In this guide superuser account is \"bender\". Its password is managed on Authelia side.</p> <p>Once you have all containers + nginx up and running you can sign in with superuser.</p> <p></p>"},{"location":"sso/remote-user/authelia/#step-7-create-family-group","title":"Step 7 - Create \"family\" Group","text":"<p>Once inside Papermerge DMS with superuser account, create \"family\" group. Any user from \"family\" group will have all permissions but to manage users and groups. In our configuration example the only user from \"family\" group is \"leela\".</p> <p></p>"},{"location":"sso/remote-user/authelia/#step-8-sign-in-as-leela","title":"Step 8 - Sign In as \"leela\"","text":"<p>Sign in as \"leela\". Notice that for user \"leela\" there are no \"users\" and \"groups\" tab on the left side panel, as she does not have permissions to manage users and groups.</p> <p></p>"},{"location":"sso/remote-user/overview/","title":"Overview","text":"<p>\"Remote User\" user authentication method is conventional, which means there are some conventions on how to set it up - but no standards around it.</p> <p>The general approach is that there is another application \"placed in front\" of Papermerge DMS which takes care of authentication, registration, passwords, 2FA etc. In our case it will be Authelia.</p> <p>Papermerge DMS will receive only information about already authenticated users via HTTP headers. The name of respective headers usually starts with \"Remote\", hence the name \"Remote User\" authentication.</p> <p></p> <p>With this approach there is no more Papermerge DMS own login view. Authelia takes over entirely login screen part as well. In other words Papermerge DMS does not participate in authentication process at all, it will just receive the ready user ID (plus some extra info) via HTTP header.</p> <p>While it is very easy to conceptualize, it is actually tricky to setup. Next section will detail into specifics.</p>"},{"location":"user/custom-fields/","title":"Custom Fields","text":"<p>Custom fields (abbreviated - cf) are attributes attached to your document; they are basically user defined data associated to the document. See the receipt in following illustration. The information which may concern you about the receipt may be: when receipt was issued, who issued the receipt and the amount (price, monetary value) on it.</p> <p>Note</p> <p>Custom fields are also known as \"metadata\". In following documentation we will use terms \"custom fields\" and \"metadata\" interchangeable</p> <p></p> <p>This information, date, shop, total amount, can be attached to the document.</p> <p>In illustration above \"amount = 17,96 EUR\" - that is essentially a custom field with a value. Custom fields have a name. Name of the field in last example is \"amount\". Custom fields have a type. The \"amount\" field is of type \"monetary\". To be precise, the type of field \"amount\" is \"monetary (EUR)\". Custom fields have also a value associated.</p> <p>Seeing these concepts in action will help. Let's create three custom fields: one of type \"date\", one \"monetary\" type and one of type \"text\":</p> <p></p> <p>With custom fields created, they can now be assigned to the documents. The key point here, is that you never assign custom fields directly to the document. Instead, you assign them via document types. It is four step process:</p> <ol> <li>Create custom fields</li> <li>Create document type (in our example, we will name it \"Receipts\")</li> <li>Assign custom fields to the document type</li> <li>Assign document to the document type</li> </ol> <p>We already did step 1. Let's quickly do 2. and 3:</p> <p></p> <p>Lastly, step 4: let's assign document to the document type \"Receipt\". Because document type \"Receipt\" has custom fields associated, if you assign any document to \"Receipt\" category - it will automatically show \"Receipt\" custom fields. An animated gif show this in action:</p> <p></p>"},{"location":"user/custom-fields/#custom-field-values","title":"Custom Field Values","text":"<p>What is great about custom fields feature is that you can list all documents along with their custom field values - this opens new insights into the \"structure\" of all of your documents. This is very powerful feature. But before we see it in action, let's fill in values for couple of receipts:</p> <p></p> <p>You need to do that for all your receipts.</p> <p>Info</p> <p>Filling metadata for each of your document may look like boring . And indeed, boring task it is! Future versions of Papermerge DMS will add ways to completely automate extraction of custom field values. Stay tuned! </p> <p>Do following:</p> <ul> <li>in commander switch view from \"Tiles\" to \"Document Type\".</li> <li>in drop down list choose which document type you want to view - in our example \"Receipt\"</li> </ul> <p>If you want to preview documents while list \"document type\" view, then you need to hold \"Ctrl\" key pressed while clicking on document's titles.</p> <p></p> <p>Following illustration shows how to switch back and forth between \"document type\" and \"tiles\" views:</p> <p></p>"},{"location":"user/custom-fields/#custom-field-types","title":"Custom Field Types","text":""},{"location":"user/custom-fields/#monetary","title":"Monetary","text":""},{"location":"user/custom-fields/#date","title":"Date","text":""},{"location":"user/custom-fields/#text","title":"Text","text":""},{"location":"user/custom-fields/#boolean-yesno","title":"Boolean (Yes/No)","text":""},{"location":"user/document-types/","title":"Document Types / Categories","text":"<p>Document type is a fundamental concept which draws the line between common file browser and document management system.</p> <p>Document types enable you to categorize documents. You can define types such as \"Receipt\", \"Invoice\", or \"Contract\".</p> <p>Note</p> <p>Document type is same as category, document category or document class. In following documentation we will you those terms interchangeable.</p> <p>Types are optional in sense that you don't need to specify document type when importing document(s), but you will definitely would like to assign them to a specific category later along the way.</p> <p>A document may or may not have a document type assigned. But if it has a type - it can be only one type.</p> <p>Note</p> <p>Database people call this one to one relation: one document can be associated with only one document type.</p> <p>Let's add some document types:</p> <p></p> <p>Tip</p> <p>Although a document type represents an unlimited number of documents, when deciding on a name, use the singular form. Singular form improves clarity.</p> <p>Notice in above animated picture that document type form, beside name, also features custom fields and path templates. That's where usefulness of documents types comes into the fore! You can assign custom fields and path templates to the documents only via categories.</p> <p>Example: imagine you have 100 receipts documents e.g. receipt001.pdf, receipt002, ..., receipt100.pdf. Now, you want to add \"Total (EUR)\" and \"Effective Date\" custom fields to all 100 receipts. How should you proceed? Should you add custom field to each individual document? What if there are not 100 receipts, but maybe 10 millions? Assigning custom fields one by one to 10 million documents is definitely not feasible. Instead, one can assign \"Total(EUR)\" and \"Effective Date\" custom fields to the category \"Receipt\", and then assign all documents, in one bulk operation to that category.</p> <p></p> <p>Tip</p> <p>Use document types to assign same custom fields (or path templates) to specific category of documents.</p> <p>In general, many parts of Papermerge DMS will rely of the document types, because it is much more custom to apply operations on group (class, or category) of documents than to individual documents.</p>"},{"location":"user/file-formats/","title":"File Formats","text":"<p>Papermerge DMS supports PDF, TIFF, JPEG and PNG file formats.</p> <p>PDF format is called native because Papermerge DMS interals operate as if all documents are PDF.</p> <p>TIFF, JPEG or PNG on the other hand are not native (non-native) formats.</p> <p>The import of native format yields one version document - the PDF itself i.e. orignal version.</p> <p>The import of any non-native formats yields two versions document:</p> <ul> <li>version 1 with non-native file i.e. original file</li> <li>version 2 with PDF file into which non-native format was converted</li> </ul> <p>Note</p> <pre><code>At its core Papermerge DMS code is written to work with PDF files only.\nAll other files (non-natives) are converted, on import, into PDF format.\n</code></pre>"},{"location":"user/getting-started/","title":"Getting Started","text":"<p>In this part of the documentation we define important concepts used Papermerge DMS parlance. We highly recommend you to read and understand this section.</p>"},{"location":"user/getting-started/#document","title":"Document","text":"<p>For Papermerge DMS a document is anything which is a good candidate for archiving - some piece of information which is not editable but you need to store it for future reference. For example receipts - you don't need to edit receipts or read them everyday, but eventually you will need them for your tax declaration. In this sense - scanned documents, which are usually in PDF, JPEG or TIFF format, are perfect match.</p> <p>If you take a picture of a paper document with your mobile phone - you'll have a file in jpeg format (or maybe png file format). In context of Papermerge DMS that picture of a document (though just a single jpeg file) is a valid one page document.</p> <p>On the other hand, if you take a picture of a flower and upload that jpeg image to Papermerge DMS - the 'document' will be processed. However, that jpeg format flower image is not a document in Papermerge DMS sense.</p> <p></p> <p>Usually office formats with .docx (Microsoft Word), .odt (Libre Office), .txt (plain text) are not good candidates for archiving - as by their nature they are meant to be changed/edit regularly. However, once converted to PDF format (for instance Contract_C2.docx to Contract_C2.pdf) they are full fledged documents in Papermerge DMS sense.</p> <p>Info</p> <p>Papermerge DMS works with four file formats: PDF, TIFF, JPEG and PNG.</p>"},{"location":"user/getting-started/#document-version","title":"Document Version","text":"<p>One document has one or multiple versions. The original document version - is version number 1. For every change applied to the document - a new document version is created with that change applied.</p> <p>When we say \"change applied to a document\" - we mean things like rotate pages, reorder pages or merge two documents.</p> <p>The point of document versions is to keep track of changes applied to the document.</p>"},{"location":"user/getting-started/#folder","title":"Folder","text":"<p>Folder in Papermerge DMS is counterpart of \"folder\" concept used in major computer file manager applications (e.g. Finder in macOS). Folders in Papermerge DMS are, intuitively enough, hierarchical - in other words one folder may contain other folders and/or documents.</p>"},{"location":"user/getting-started/#node","title":"Node","text":"<p>Node is an abstraction of two concepts: document and folder. Every time you read node, you can mentally replace that term with either document or folder and the statement will still hold.</p> <p>Bellow is graphical example of Folder, Document, Document Version relationship:</p> <p></p> <p>Same hierarchy can be illustrated as nodes:</p> <p></p>"},{"location":"user/getting-started/#special-folders","title":"Special Folders","text":"<p>Each user in Papermerge DMS has two special folders: Inbox and Home.</p> <p>Inbox folder is where all incoming documents land first. Home folder is where all user documents are.</p> <p>Special folders are top level folders (they don't have parent folder).</p> <p></p> <p>Note</p> <p>Both <code>Inbox</code> and <code>Home</code> folders are special only by convention; structurally they are just normal folders. Internally their title is actually \".inbox\" and \".home\". By convention special folders start with dot character.</p>"},{"location":"user/getting-started/#ocr","title":"OCR","text":"<p>OCR (Optical Character Recognition) is a technique to extract text information from binary image formats. This technique enables users to:</p> <ul> <li>copy/paste  text from the document's content</li> <li>search documents by document's actual text content</li> </ul> <p>OCR is essential tool (or technique if you will) which helps basically to extract textual information and thus derive useful work-flows (based on document's actual content) with the documents. Papermerge relies on external open source specialized tools like Google's Tesseract OCR</p>"},{"location":"user/getting-started/#tags","title":"Tags","text":"<p>Organizing documents in folders is very common. Thus the idea of keeping your documents in folders doesn't need further introduction. The idea of using tags to organize your documents may be new for you though. Tags are kind of labels. You can associate tags to a document or to a folder. Tags have a color and a name.</p> <p></p> <p>Once tagged, documents can be searched by their tags. Conversely, is it also possible to show all the documents tagged with a particular tag(s).</p> <p>Both tags and folders complement each other and provide you with powerful means to stay organized.</p>"},{"location":"user/getting-started/#page-management","title":"Page Management","text":"<p>Many times scanning documents in bulk yields documents with blank pages; some pages my be out of order, rotated, maybe part of totally different document. Even if you notices these flaws immediately it is time consuming and frustrating to redo scanning process. Papermerge DMS helps you with your scanned documents like no other tool. With Papermerge DMS you can reorder, rotate or even delete pages in case you need to do so.</p> <p></p> <p>There is a separate chapter about page management where you can learn details about this feature.</p>"},{"location":"user/merge-documents/","title":"Merge Documents","text":"<p>Let's first clarify what is meant by documents merging. Merging is the process of combining two documents into one: all pages from the source document are transferred into destination document and then source document is deleted.</p> <p>On the target document, transferred pages can:</p> <ol> <li>entirely replace target pages</li> <li>be appended to the target pages</li> </ol> <p>The rest of this documentation chapter describes how to use Papermerge DMS in case 1. For how to use Papermerge DMS in case 2, see :ref:<code>Page Moving &lt;page_move&gt;</code>.</p>"},{"location":"user/merge-documents/#1-source-pages-replace-target-pages","title":"1. Source pages replace target pages","text":"<p>Figure 1 illustrate this case. Both source (better_scan.pdf) and target (scan_d.pdf) documents have only one version (v1). Both source and target have two pages.</p> <p>In this case merge result is that in scan_d.pdf document there is a new version created (v2) and new version contains only source pages (BS1 and BS2). Previous pages of scan_d.pdf document (D1, D2) are still available in version 1 (v1 in figure) of the document.</p> <p></p> <p>This use case is useful when you scan same document twice and for some reason you want to keep both copies around. Because both copies contain slightly different versions of the same document, it is more practical to keep them as two document versions in one single file. In such case you will avoid duplicate results in search results.</p>"},{"location":"user/merge-documents/#2-source-pages-are-appended-to-the-target-pages","title":"2. Source pages are appended to the target pages","text":"<p>Figure 2 illustrate this case. Both source (better_scan.pdf) and target (scan_d.pdf) documents have only one version (v1). Also, both source and target have two pages.</p> <p>In this case result is that in scan_d.pdf document there is a new version created (v2) and new version contains now four pages: BS1, BS2, D1, D2. Previous version of scan_d.pdf document (v1) has contains two pages: D1 and D2.</p> <p></p> <p>This scenario is special case of 'moving pages' between documents with all pages selected on the source. How to use Papermerge DMS in this scenario is described in detail in Moving Pages section.</p> <p>Important</p> <p>When merging two documents, one of them (source) is deleted. That's why, it is very important that when you merge two documents, you correctly choose which one is the source and which one is the target.</p> <p>Now, that you understand what is meant exactly by \"document merging\", let's see how you can merge document with Papermerge DMS.</p>"},{"location":"user/merge-documents/#dual-panel","title":"Dual Panel","text":"<p>In order to merge two documents in Papermerge DMS you need to open each of them in two panels:</p> <p></p> <p>In one of the panels, the one which you want to be the source, right click the mouse button to open the context menu.</p> <p>Important</p> <p>Merge Documents context menu item will be displayed only if there are no selected pages.</p> <p></p> <p>In Figure 3, notice the direction of the arrow icon just before \"Merge Document\". The arrow icon points from source to the target. In Figure 3, context menu was opened in left panel, this means that document opened in left panel (better_scan.pdf) is the source. On the other hand if we would open context menu in right panel, then the arrow will point from right to left - which also implies that in such case document opened in the right panel would be the source.</p> <p>Click the \"Merge Document\" context menu item. After you confirm the operation, the source document (better_scan.pdf) will be merged with scan_d.pdf.</p> <p></p>"},{"location":"user/ocr/","title":"OCR","text":"<p>OCR is the process which extracts text information from the scanned document and makes them searchable.</p> <p>By default, ocr process is triggered automatically on document file upload. The OCR process status is indicated by little circle next to document's title. When OCR process is completed new document version is created and document becomes searchable.</p>"},{"location":"user/ocr/#default-ocr-language","title":"Default OCR Language","text":"<p>In order to perform OCR on the document you need to indicate beforehand the language of respective document. When you click \"Run OCR\" in document viewer you will need to choose OCR language.</p> <p>When you upload documents, the value of <code>PAPERMERGE__OCR__DEFAULT_LANGUAGE</code> indicates OCR language system will use (if you don't change anything it will use <code>deu</code>, which stands for German).</p> <p>Question</p> <p>Or maybe UI should ask user OCR language on upload as well, some sort of   modal dialog which appears when user drops docs/clicks upload? Or there   should be an UI preference where user can opt which way he/she wants to   indicate default OCR language without being ask on every doc upload?   Open a disscussion on this   topic and let's disscuss it!</p>"},{"location":"user/ocr/#status-indicator","title":"Status Indicator","text":"<p>Papermerge DMS features real time OCR status indicator - this means that you can see document's OCR status updates as they happen (i.e. in real time). The OCR status is displayed by a small circle next to the document's title. The status indicates has following meanings:</p> <ul> <li>gray circle - status is unknown (figure 1)</li> <li>orange still circle - document was scheduled for OCR (figure 2)</li> <li>orange rotating circle - document's OCR process is in progress (figure 3)</li> <li>green check - document's OCR process completed successfully and document is now searchable (figure 4)</li> <li>red cross - document's OCR process failed.</li> </ul> <p> </p>"},{"location":"user/ocr/#ocred-text-layer","title":"OCRed Text Layer","text":"<p>Once OCR process completed successfully a new document version is created - version with OCRed text layer. This version is available for download from the <code>Download</code> dropdown in document view.</p> <p></p> <p>Note</p> <p>Under the hood Papermerge DMS uses awesome OCRmyPDF utility to create   OCRed text layer. Thus, in respect of OCRed text layer, Papermerge DMS acts   like a graphical user interface for OCRmyPDF.</p>"},{"location":"user/ocr/#document-ocred-text","title":"Document OCRed Text","text":"<p>You can view OCRed text of the entire document either from commander or from viewer, in both cases choose \"OCRed Text\" from context menu:</p> <p></p> <p>If you want to see OCRed text of entire document (to be exact - all pages of the last document version) from the viewer - just make sure that no pages are selected:</p> <p></p>"},{"location":"user/ocr/#selected-pages-ocred-text","title":"Selected Pages OCRed Text","text":"<p>In case document has many pages and you are interested in OCRed text of one (or multiple) very specific pages, then select pages first and then from context menu choose \"OCRed Text\" item:</p> <p></p> <p>Note</p> <p>In case there are selected pages, OCRed Text menu item will show you OCRed   text ONLY of the selected pages.</p> <p></p>"},{"location":"user/ocr/#ocr-languages-support","title":"OCR Languages Support","text":"<p>Papermerge DMS uses Tesseract to extract text from scanned documents. Tesseract supports over 130 languages - thus with Papermerge DMS you can have documents in any of those languages.</p>"},{"location":"user/page-management/","title":"Page Management","text":"<p>Many times scanning documents in bulk results in documents with blank pages; some pages maybe out of order or maybe part of totally different document. Even if you notice these problems immediately it is time consuming to redo scanning process. Wouldn't it be nice to fix out of order pages without scanning all docs again?</p> <p>Page management is set of features which helps to fix scanning process errors. In other words you can delete, reorder, rotate, and extract pages within document(s).</p> <p>Every time one of the operations described in this section is applied - a new document version is created. Because of this, the changes you apply on the document like rotate, delete, extract, reorder, do not destroy the document, in other words  page management is non-destructive  process.</p> <p>Note</p> <p>In order perform any of operations described below (delete, reorder, rotate or extract) you need to have Change Permission on respective document. You have automatically granted Change Permission on the documents you uploaded (because you own the documents uploaded by you).</p>"},{"location":"user/page-management/#delete","title":"Delete","text":"<p>You can delete specific pages (for instance blank pages) from the document. Although many scanners have automatic \"remove blank pages\" feature, many times they get confused of what a blank page is. In case your scans end up with undesired blank pages you can easily remove those pages.</p> <p></p> <p>In order to delete a page, you need to select desired page by clicking on it, then <code>Right Click--&gt; Delete Page</code>.</p> <p>Every time you delete one or several pages, document version is incremented by one. For instance if document Invoice-X56.pdf currently has four pages and the document latest version is version 1, then, after deleting one page - document latest version will be 2. Thus document's version 1 has all four pages and document version 2 has three pages:</p> <p></p>"},{"location":"user/page-management/#reorder","title":"Reorder","text":"<p>Out of order pages occur very often during scanning process. Papermerge DMS empowers users to change pages order within the document.</p> <p>For instance, in figure below you can see that pages 2 and 4 are out of place. To correct pages' order use drag 'n drop. For example grab page 2 and drop it in correct position, and then do same thing with page 3:</p> <p></p> <p>For these changes to take effect you need to click 'Apply Changes' button.</p> <p>Warning</p> <p>Document pages reorder will only be saved when you click 'Apply Changes'</p> <p></p> <p>Similarly to deleting pages, every time you save new pages order, document version will be incremented (i.e. advanced by one).</p> <p></p>"},{"location":"user/page-management/#rotate","title":"Rotate","text":"<p>Often scanned pages are upside down or maybe rotated 90\u00b0 (degrees). In order to quickly fix that, select one or multiple pages you want to rotate and then <code>Right Click --&gt; Rotate --&gt; 180\u00b0 CCW</code> (or 90\u00b0 CW, 90\u00b0 CCW depending on your specific case):</p> <p></p> <p>Note</p> <p>CW stand for clockwise. CCW stands for counter-clockwise.</p> <p>Similarly to page deletion and page ordering, every time you rotate a page, document version will be incremented (i.e. advanced by one).</p> <p>Warning</p> <p> After page rotation you have to re-run OCR  for the document. It is because if page was upside down when ingested, the OCR operation won't make sense of it and thus won't be able to extract text (and then index) from that page. After you have manually fixed the page (by correctly rotating it) - OCR will be able to extract and index page's contented.</p>"},{"location":"user/page-management/#move-document-to-document","title":"Move (Document to Document)","text":"<p>You can move one, multiple or even all strayed pages from one document (source) to another (target). If you choose to move all documents from the source - the source will be deleted, because it does not make sense to have \"document with zero pages\".</p> <p>When moving pages between documents you will be prompted to choose between two different move strategies:</p> <ol> <li>Replace target</li> <li>Append to target</li> </ol> <p>The outcome between replace vs append strategies is illustrated below:</p> <p></p> <p></p> <p>The difference is outcome of the B.pdf (target). With replace strategy, the document B.pdf ended up having two pages (which replaced previous ones), while with append strategy the document B.pdf ended up with four pages as source pages were appened to the existing ones.</p> <p>Note</p> <p>What happens if you select all source pages, i.e. when you</p> <p>select A1, B1, B2, A2? In such case - source document (A.pdf) will be    deleted, because it does not make any sense to have a document with zero    pages. For the target document (B.pdf) this case does not make any    difference, as the outcome is always the same.</p> <p>Note</p> <p>Use case when you select all pages and chose \"replace strategy\" has same outcome as merging documents.</p> <p>Now, that \"theory\" is clear, let's move on to the practical part and see Papermerge DMS in action. First of all, note that in Papermerge DMS you can move pages between documents either using context menu or by using drag 'n drop.</p> <p>Tip</p> <p>You can also move pages between documents with REST API as well</p>"},{"location":"user/page-management/#use-context-menu","title":"Use Context Menu","text":"<p>In order to move pages between documents, using context menu:</p> <ol> <li>Make sure both documents are open in left and right panels</li> <li>Select pages you want to move in :ref:<code>thumbnails panel &lt;Thumbnails_Panel&gt;</code> of the source document viewer</li> <li>Use right click to open context menu in source document viewer</li> <li>Choose \"Move\" context menu item</li> </ol> <p>Context menu is dynamic - which means it renders only relevant menu items. If for example you have in one panel opened :ref:<code>document viewer &lt;Viewer&gt;</code> while other panel is in :ref:<code>commander mode &lt;Commander&gt;</code>, then \"there will be \"extract\" menu item instead of \"move\". In other words, \"move\" menu item will be visible only if:</p> <ol> <li>both panels are in :ref:<code>viewer mode &lt;Viewer&gt;</code></li> <li>there is at least one page selected</li> </ol> <p></p> <p>Important</p> <pre><code>The arrow next to the \"Move\" menu item changes direction depending in which\npanel you invoke context menu - it hints direction of the pages transfer.\nArrow icon of the \"Move\" item always **points from source to target**.\n</code></pre> <p></p>"},{"location":"user/page-management/#drag-n-drop","title":"Drag 'n Drop","text":"<p>In example illustrated in pictures below there are two documents:</p> <ul> <li>document A - with pages marked as A1, A2, B1, A3</li> <li>document B - with pages B2, B3</li> </ul> <p>During scan page B1 wrongly ended up in document A, although it belongs to document B.</p> <p>Note</p> <pre><code>A page that during the scan ended up in wrong document is called *strayed page*.\nIn example above, page B1 is strayed page.\n</code></pre> <p>In order to fix this scanning issue, you need open documents in two panels and then drag 'n drop page B1 from document A (source) to document B (target):</p> <p></p> <p>Note</p> <pre><code>Pages are moved immediately after 'mouse drop' i.e. there\nis no need to 'click apply button' as in re-order operation\n</code></pre> <p>Note</p> <pre><code>Both documents' (source and target) version will be incremented\nby one\n</code></pre>"},{"location":"user/page-management/#extract-document-to-folder","title":"Extract (Document to Folder)","text":"<p>Page extraction is moving page out of the document as completely new document. It differs from <code>page moving &lt;page_move&gt;</code> because the destination is a folder, not a document.</p> <p>You can extract one or multiple pages at once. Pages can be extracted:</p> <ol> <li>as one document; in this case one document will be created in the target    folder, new document will contain all extracted pages</li> <li>as multiple documents; in this case multiple documents will be created in the    target folder, each new document will have one page</li> </ol> <p>Note that in Papermerge DMS you can extract pages either using context menu or by using drag 'n drop.</p> <p>Tip</p> <p>You can also extract pages by using REST API</p>"},{"location":"user/page-management/#using-context-menu","title":"Using Context Menu","text":"<p>In order to extract pages from the document, using context menu:</p> <ol> <li>Open document in one panel and open target folder in another panel</li> <li>Select pages you want to extract in thumbnails panel of the source document viewer</li> <li>Use right click to open context menu in source document viewer</li> <li>Choose \"Extract\" context menu item</li> </ol> <p>Because of the dynamic nature of the context menu, \"Extract\" menu item will be visible only if all of the following conditions are true:</p> <ol> <li>Two panels are opened</li> <li>One of the panels is in <code>viewer mode</code> while another is in <code>commander mode</code></li> <li>There is at least one page selected</li> </ol> <p></p> <p>After you've clicked \"Extract\", the \"Extract Pages\" modal dialog will prompt you for additional details like title of the newly created document(s) and if you want to extract all pages as you or multiple documents:</p> <p></p> <p>A couple of notes here. First, newly created document will have extension \".pdf\", you cannot change that. Second, if \"Extract each page into separate document\" is checked, each pages will be, obviously enough, extracted as separate one page documents, otherwise all extracted pages will be placed into a single document in the target folder.</p> <p>Note</p> <p>Papermerge DMS will try to make sure that newly created documents feature unique name. Thus if you choose to extract, say, two pages as separate documents, Papermerge DMS will append to the title an UUID number. In case you choose to extract two pages into a single document - no UUID number will be appended. In case you leave \"Title format\" field empty, Papermerge DMS will generate an unique title for you.</p>"},{"location":"user/page-management/#using-drag-n-drop","title":"Using Drag 'n Drop","text":"<p>Let's show how page extraction works by example. Say we have one document - document A - with following pages: A1, A2, B1, B2, A3. What we want to do is to extract pages B1 and B2 into a new document. As mentioned above there are two cases:</p> <ol> <li>Both pages B1 and B2 are extracted into one single new document (two page document)</li> <li>Both pages B1 and B2 are extracted into multiple (new) single page documents.</li> </ol> <p></p> <p>In order to extract pages B1 and B2 into one single new document you need to uncheck 'Extract each page into separate document' checkbox in modal dialog:</p> <p></p> <p>Similarly to other operations document A's (source document) version is incremented by one.</p>"},{"location":"user/page-management/#ocr-data","title":"OCR Data","text":"<p>Do you need re-run OCR after document's page was moved/rotated/extracted/deleted ?</p> <p>In short - no, you don't need to re-run OCR. The only exception is page rotation. Every time you rotate a page in the document, you need to re-run OCR for that document. It actually makes sense, because if page was upside down when document was ingested, the OCR operation won't make much sense of it and thus won't be able to extract any text data from the page. Once you correct that part manually (rotate page), you re-run OCR so that correct text will be extracted and then indexed.</p> <p>Note</p> <p>Generally speaking you don't need to re-run OCR after performing page management operations. The only exception from this rule is page rotation.</p> <p>For longer answer, let's clarify first what OCR data is. OCR data is: text information extracted from the document by OCR and associated with that document. That text information is stored in both database and on filesystem.</p> <p>When one page is moved from one document into another (or when page is deleted), the text associated with source (or target) document changes as well. For example, say document fruits.pdf has three pages: apples, oranges and bananas, i.e each page has only one word page 1 has work apples etc. You can find document fruits.pdf by searching 'apples' (will match first page), 'orages' (will match second page) or bananas (will match last page).</p> <p>After you extract first page (apples) from document fruits.pdf into another document, searching by term 'apples' should not reveal document 'fruits.pdf' - because term/page 'apples' is not part of it anymore.</p> <p>In order to keep text information associated with document fruits.pdf up to date, there are at least two possibilities:</p> <ol> <li>re-run OCR after each extract/delete/move/rotate operation</li> <li>re-use existing OCR and move it/delete it according to the operation</li> </ol> <p>From technical point of view 1. is very easy to implement but very inefficient in terms of computing power. Think that you have 100 pages document and you delete one blank page - what a waste of CPU resources to re-OCR entire document when OCR data is already available!</p> <p>The second possibility (point 2.) is very challenging to implement, but extremely efficient - you need to run OCR on the document only once (maybe twice, in case you decide to fix couple of pages by rotating them).</p> <p>Papermerge decided on 2. in other words, Papermerge reuses already extracted OCR data and updates it accordingly every time you re-order/move/extract/delete pages.</p> <p>The result is that whatever page management operation you perform the search results are always up-to-date without the need to re-OCR the document! As mentioned above the only exception are page rotations.</p> <p>Below is illustrated the case of three page fruits.pdf document with apples/oranges/bananas content. Initially search term 'apples' will reveal fruits.pdf document (from Inbox). After 'apples' page was extracted into separate document (found in Home/My Documents folder) search term 'apples' correctly reveals new document! Notice here that search index is updated instantaneously:</p> <p></p>"},{"location":"user/path-templates/","title":"Path Templates","text":"<p>Imagine you've got couple of receipts from your customer in the inbox. They are in your inbox. But inbox is just temporary location, so you'll need to move documents to their \"final destination\" - target folder.</p> <p>Or may you just want to upload couple of documents yourself. Still you need to decide where to place them.</p> <p>Regardless which way documents end up in Papermerge DMS - every time you need to decide where you place them: which folder?</p>"},{"location":"user/path-templates/#target-folder","title":"Target Folder","text":"<p>The question \"what is the target folder for document X\" may not seem like a big deal. And indeed - if you just do it for very first folder, only one time it is simple. But more your document base grows, more complex folder layout you have more vexed the question becomes. Especially if you do it say, onece a week.</p> <p>More realistic scenario would be this: you work on your lovely project, you are fully focused on your project. You receive an invoice from your customer (we will refer to this customer - Coco). Now you decide to upload Coco's invoice into Papermerge DMS.</p> <p>And... where should you place it? Is it in <code>/home/Customers/2024/coco/invoice-2024-01.pdf</code>? Or in <code>/home/Invoices/2024/Customers/coco-2024-01.pdf</code>? Or maybe in <code>/home/My Documents/invoices</code>?</p> <p>You see, we humans tend to forget. The question of the target folder is vexed one. It distracts you from your real tasks.</p>"},{"location":"user/path-templates/#path-templates_1","title":"Path Templates","text":"<p>Meet path templates. The idea is simple: you need to decide where to place your receipts only once. Once you decide where you put to them - you write it down as \"path template\" and then all your receipts will automatically be placed to that path. Of course you can do that for any document type.</p> <p>Basically, for each document type you create a \"template\" of the place where documents of that type will be stored. And then Papermerge DMS will use that information to move the document to the target folder automatically !</p> <p>Info</p> <p>Path templates are per document type. They create a \"template\" of where documents of that type will be placed. The path includes both target folder and file name.</p> <p>Let's see couple of examples.</p> <p>In first example, let's create document type \"Receipt\" and set its path template to <code>/home/My Documents/Receipts/</code>:</p> <p></p> <p>Notice that path template ends with \"/\". If path ends with \"/\", it means that the last part is a folder. We will come back to this point later. Also please remark that there no <code>My Documents</code> folder; neither <code>Receipts</code> folder is not there; both of them will be automatically created.</p> <p>From now on, any document of type Receipt will be moved into <code>/home/My Documents/Receipts/</code>. Let's see it in action. In video below initially document <code>brother_004485.pdf</code> is in <code>inbox</code> and it has no document type assigned yet. Also, notice that in <code>home</code> there is no folder <code>My Documents</code> yet. However, once <code>brother_004485</code> is changed to type \"Receipt\" it is automatically moved from <code>inbox</code> into its target folder designed by Receipt's path template: <code>/home/My Documents/Receipts/</code>.</p> <p></p> <p>It is very important that template path <code>/home/My Documents/Receipts/</code> ends with \"/\". It tells Papermerge DMS that target is a folder. If we would change it to <code>/home/My Documents/coco</code>, then Papermerge DMS would move <code>brother_004485.pdf</code> into target folder <code>My Documents</code> and rename file from <code>brother_004485.pdf</code> to <code>coco</code>.</p> <p>Info</p> <p>Path templates ending in \"/\" designates a folder. Any other ending means last part of the path is document name.</p> <p>Examples:</p> <ul> <li>/home/coco - target folder is <code>home</code> and file will be renamed to <code>coco</code></li> <li>/home/Clients/CocoInc/invoice.pdf - target folder is <code>CocoInc</code> and file will be renamed to <code>invoice.pdf</code></li> <li>/home/Clients/CocoInc/ - target <code>CocoInc</code> - a folder. Documents will be moved into <code>/home/Clients/CocoInc/</code> folder</li> </ul>"},{"location":"user/path-templates/#target-root","title":"Target Root","text":"<p>In all examples above, path template, started with <code>/home</code>. Actually you can omit <code>/home</code> part as it is always implicit. Thus following paths are equivalent:</p> <ul> <li>/home/Invoices/Clients/</li> <li>/Invoices/Clients/</li> <li>Invoices/Clients/</li> </ul> <p>Info</p> <p>Template path root folder is always assumed to be user's home folder</p> <p>Thus, if you set template path as <code>Toto/</code> - it will move documents of respective type into <code>/home/Toto/</code> folder. If you set template path to <code>/inbox/Toto/</code> - it will move documents of respective type into <code>/home/inbox/Toto/</code> folder.</p> <p>Tip</p> <p>Always start you path templates target folders with <code>/home/</code></p> <p>Following table is a summary of cases described so far:</p> Path Template Document Title Evaluation Outcome /home/Clients/Invoices/ bon.pdf /home/Clients/Invoices/bon.pdf /home/Clients/Invoices bon.pdf /home/Clients/Invoices /Letters/Misc/ zdf-love.pdf /home/Letters/Misc/zdf-love.pdf Letters/Misc/ zdf-love.pdf /home/Letters/Misc/zdf-love.pdf /inbox/Taxes/ 2021.pdf /home/inbox/Taxes/2021.pdf"},{"location":"user/path-templates/#jinja2-syntax","title":"Jinja2 Syntax","text":"<p>Path templates use so called jinja templates syntax. Using jinja syntax you can mix into template different attributes known at evaluation time (when template is evaluated for that specific document). An example:</p> <pre><code>/home/Invoices/Misc/{{ document.id }}-{{ document.title }}.pdf\n</code></pre> <p>The part between curly braces is evaluated for each document.</p> <pre><code>{{ document.id }}\n</code></pre> <p>will be replaced with document's ID. And</p> <pre><code>{{ document.title }}\n</code></pre> <p>with document's title. <code>document</code> within curly braces is contextual object; it can reference current document' attributes using <code>document.&lt;name of attribute&gt;</code> notation.</p> <p>You can use if statements:</p> <pre><code>{% if document.id %}\n    /home/My Documents/Invoices/{{ document.id }}.pdf\n{% else %}\n    /home/My Documents/Invoices/\n{% endif %}\n</code></pre> <p>Object <code>document</code> has following attributes:</p> <ul> <li>id</li> <li>title</li> <li>cf</li> <li>has_all_cf</li> </ul> <p>Via <code>cf</code> object you can access custom fields values. <code>has_all_cf</code> is true if and only if all all document's custom fields have non-empty values.</p> <p>Examples:</p> <pre><code>{% if document.has_all_cf %}\n    /home/Receipts/{{ document.cf['Shop'] }}-{{document.cf['Effective Date']}}.pdf\n{% else %}\n    /home/Receipts/{{ document.id }}.pdf\n{% endif %}\n</code></pre> <p>The template above reads: if document has all custom fields filled with non empty values, then use Shop, Effective Date custom fields to build its path, otherwise use only document id to build it's path. Using document ID is safety measure, because document's ID attribute is always defined.</p> <p>Warning</p> <p>Inside square brackets you must reference custom fields using custom fields names together with their spaces and their case.</p> <p>If field name is \"Total (EUR)\", then you reference it with</p> <pre><code>{{ document.cf['Total (EUR)'] }}\n</code></pre> <p>There is one space between word \"Total\" and \"(EUR)\". Word \"Total\" must be capital case (same case as custom field name).</p>"},{"location":"user/search/","title":"Search","text":"<p>Papermerge DMS offers an extensive searching mechanism that is designed to allow you to quickly find a document you're looking for.</p> <p>When you search Papermerge DMS for a document, it tries to match this query against your documents. Papermerge DMS will look for matching documents by inspecting their content, title, and tags.</p> <p>Note</p> <p>Papermerge DMS searches only in content of the last version of the document</p> <p>By default, Papermerge DMS returns only documents which contain any of the words typed in the search bar. However, Papermerge DMS also offers additional search syntax if you want to drill down the results further.</p> <p>Matching inexact words:</p> <pre><code>*5951\n</code></pre> <p>Will return document with title: brother_005951.pdf</p> <p>Matching specific tags:</p> <pre><code>tags:paid\n</code></pre> <p>will return documents with tag \"paid\"</p> <p>You can match document with logical expressions:</p> <pre><code>pizza AND salami\n</code></pre> <p>will return all documents containing both words: \"pizza\" and \"salami\".</p> <pre><code>pizza AND (salami OR speciale)\n</code></pre> <p>will return all documents containing either \"pizza\" and \"salami\"; or \"pizza\" and \"speciale\".</p> <p>Note</p> <p>Logical expression must be in capital case, otherwise they will be ignored.</p> <p>Implicit logical expression is \"OR\". In other words, if you search:</p> <pre><code>pizza salami\n</code></pre> <p>is same as you would search with following query:</p> <pre><code>pizza OR salami\n</code></pre> <p>All of these constructs can be combined as you see fit. For example, following search query will return all documents tagged with \"important\" and contain word \"pizza\":</p> <pre><code>pizza AND tags:important\n</code></pre>"},{"location":"user/tags/","title":"Tags","text":"<p>Tags are sort of labels. You can associate tags to a document or to a folder. Tags have a color and a name. Once tagged, documents can be searched by their tags.</p> <p></p>"},{"location":"user/upload-documents/","title":"Upload Documents","text":"<p>There are multiple ways to upload documents to your Papermerge DMS instance: web UI, command line utilities, REST API.</p> <p>The obvious way is via web UI. After briefly explaining how to upload documents from web user interface, this page will dive into more interesting parts: command line utilities and REST API.</p>"},{"location":"user/upload-documents/#web-ui","title":"Web UI","text":"<p>Uploading documents via user interface is the most straightforward method, just click <code>upload</code> button:</p> <p></p> <p>Documents will be uploaded into your current folder. Current folder is considered the one which you currently see as opened in web UI:</p> <p></p> <p>Also, instead of using upload button, you can drag'n drop documents from your desktop file manager into Papermerge DMS's web ui.</p> <p></p> <p>Warning</p> <p>Currently drag 'n drop feature does not work for folders, in other words you can drag 'n drop only documents. If you want to import an folders with entire content preserved - use <code>papermerge-cli</code> described in next paragraph.</p>"},{"location":"user/upload-documents/#command-line","title":"Command Line","text":"<p>You can upload documents and folders from your local filesystem using papermerge-cli command line utility:</p> <pre><code>papermerge-cli import /path/to/local/folder/\n</code></pre> <p>Note that <code>papermerge-cli</code> will import all content of /path/to/local/folder/ directory recursively i.e. it will preserve the structure of local folder in Papermerge DMS as well.</p> <p>You can upload one document by providing path to the document:</p> <pre><code>papermerge-cli import /path/to/document.pdf\n</code></pre> <p>Note</p> <p>By default all imported documents and folders will end up inside user's Inbox folder.</p> <p>For more information about <code>papermerge-cli</code> check papermerge-cli section.</p> <p></p>"},{"location":"user/upload-documents/#rest-api","title":"REST API","text":"<p>For uploading documents you can use directly REST API. You can access REST API swagger schema definition from user menu (upper right corner of the web UI). In order to upload a document there are two steps:</p> <ol> <li>Create document node without file</li> <li>Upload the file for the created node in previous step</li> </ol> <p>For step 1. use <code>POST /nodes/</code> REST API endpoint. For step 2 use <code>POST /documents/&lt;doc-uuid&gt;/upload</code> REST API endpoint, where <code>&lt;doc-uuid&gt;</code> is the ID of the node created in first step.</p>"},{"location":"user/user-interface/","title":"User Interface","text":"<p>Papermerge DMS comes with intuitive user interface (UI) layout. The UI is divided into four areas:</p> <ol> <li>Navigation Menu - contains different views like tags, users, inbox</li> <li>Search Bar - quick search of any document</li> <li>User Menu - contains user preferences, API tokens and other menu items.</li> <li>Commander Panel - or Commander - area for browsing documents and folders</li> </ol> <p></p>"},{"location":"user/user-interface/#dual-panel-mode","title":"Dual Panel Mode","text":"<p>Commander (in figure 1. marked with number 4.) is designed to have similar look and feel of modern desktop file browsers. This is the place where you browse your documents and folders.</p> <p>In order to assist you to quickly move around documents, folders and pages - there is a special mode - dual panel model. In dual panel mode there are two panels displayed side by side. Between two panels documents (as well as folders and pages) can be moved with one simple drag'n drop. Figure below shows how dual panel mode looks like:</p> <p></p> <p>In order to switch to dual panel mode, use Commander's upper right button:</p> <p></p> <p>To switch back to single panel mode, use close button - which is in the upper right corner of one of the panels:</p> <p></p> <p>Note</p> <pre><code>Close button will be displayed only on one of the panels.\nAlthough both panels look and feel exactly the same, internally\napplication still distinguishes them as main and secondary one. Main panel\nis the one which is always visible and secondary panel is the on which\nopens and closes i.e. the one with \"close button\" in upper right corner.\n</code></pre>"},{"location":"user/user-interface/#commander","title":"Commander","text":"<p>Commander or Commander Panel is one of the two available panels. Commander is the panel which shows documents and folders - modern web based file browser if you will.</p> <p></p> <p></p>"},{"location":"user/user-interface/#viewer","title":"Viewer","text":"<p>Viewer or Viewer Panel or Document Viewer is one of the two available panels. Viewer is the panel in which document is opened.</p> <p></p> <p>There can be two Viewers opened side by side. This mode (i.e. dual panel mode with a Viewer in each panel) is very handy when it comes to moving pages between documents.</p> <p></p>"},{"location":"user/user-interface/#thumbnails-panel","title":"Thumbnails Panel","text":"<p>Document viewer features a thumbnails panel which can be toggles on and off. Pages can be selected only inside thumbnails panel; also pages can be dragged/dropped only from thumbnails panel.</p> <p></p>"},{"location":"user/user-management/","title":"User Management","text":"<p>Papermerge DMS is multi user system.</p> <p>The most privileged user (which has all permissions) is called <code>superuser</code>. Brand new Papermerge DMS instance ships with one default user - which happens to be <code>superuser</code>. With default user, you can add as many users as you wish.</p> <p>Note</p> <p>You can add multiple <code>superusers</code> as well</p>"},{"location":"user/versions/","title":"Versions","text":"<p>Papermerge DMS is a non-destructive DMS, which means you always have available original document regardless how many transformations (page rotations, deletion, document merges) you apply on the document.</p> <p>Retention of the original is ensured because of document versioning feature. With each extra transformation you apply - a new document version is created.</p> <p> Version 1 (one)  of the uploaded document  is the original file  i.e. document without any changes applied. Original document version is always available, regardless what operation(s) you apply to the document (except deletion of the document itself).</p> <p>Any page management OCR operation on the document will increment (increase by one) its version.</p>"}]}