{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Papermerge DMS","text":"<p>Papermerge DMS or simply Papermerge is a open source document management system designed to work with scanned documents (also called digital archives). It extracts text from your scans using OCR, indexes them, and prepares them for full text search. Papermerge provides look and feel of modern desktop file browsers. It has features like dual panel document browser, drag and drop, tags, hierarchical folders and full text search so that you can efficiently store and organize your documents.</p> <p>It supports PDF, TIFF, JPEG and PNG document file formats. Papermerge is perfect tool for long term storage of your documents.</p> <p></p>"},{"location":"#features-highlights","title":"Features Highlights","text":"<ul> <li>Works with PDF, TIFF, JPEG, PNG formats</li> <li>Desktop like user interface</li> <li>Dual panel mode</li> <li>OCR - used to extract text for documents indexing</li> <li>OCRed text overlay (you can download document with OCRed text overlay)</li> <li>Full text search (supports multiple search engines)</li> <li>Document Versioning</li> <li>Tags - assign colored tags to documents or folders</li> <li>Folders - users can organize documents in folders</li> <li>Multi-User</li> <li>Fully REST API</li> <li>Page Management - delete, reorder, rotate, merge, move, extract</li> </ul>"},{"location":"#what-it-does","title":"What It Does","text":"<ul> <li>It extracts (using OCR) and indexes text from your documents</li> <li>Provides modern, desktop like user interface to easily find your documents</li> <li>Helps you instantly find your documents</li> <li>Helps you fix scanned documents issues like:</li> <li>delete blank, semi-blank or just irrelevant pages</li> <li>rotate pages</li> <li>move strayed pages between documents</li> <li>change page order within the document</li> </ul>"},{"location":"#what-it-doesnt-do","title":"What It Doesn't Do","text":"<ul> <li>It does not take control of your documents. Documents are stored on   filesystem in a simple and intuitive manner so that you can take snapshot of   your data at any time</li> <li>It does not overwrite your original documents</li> </ul>"},{"location":"#what-is-a-document","title":"What is a Document?","text":"<p>For Papermerge a document is anything which is a good candidate for archiving - some piece of information which is not editable but you need to store it for future reference. For example receipts are good examples - you don't need to read receipts everyday, but eventually you will need them for your tax declaration. In this sense - scanned documents, which are usually in PDF or TIFF format, are perfect match.</p> <p>PDF (Portable Document Format) is de facto standard for storing archived documents. In correct technical terms - it is PDF/A subset. PDF/A differs from PDF by prohibiting features unsuitable for long-term archiving, such as font linking and encryption.</p> <p>Most of the modern office scanners will output scanned files in PDF/A format. This is why, PDF is practically synonymous for document in context of Papermerge.</p> <p>A picture made with smart phone of A4 paper document is regarded by Papermerge as document.</p>"},{"location":"backup-restore/","title":"Backup/Restore","text":"<p>Papermerge docker image is shipped with backup and restore utilities. Shipped utility will backup all your folders, documents with their associated versions and OCR data, tags and users. Search engine index is not included in backup though.</p> <p>Note</p> <p>User passwords are included in backup file as well. Passwords are stored as digests.</p>"},{"location":"backup-restore/#backup","title":"Backup","text":"<p>Backup your documents with following command:</p> <pre><code>$ docker exec &lt;papermerge-server-container&gt; backup.sh &lt;optional-location&gt;\n</code></pre> <p>where <code>&lt;optional-location&gt;</code> is the path to file or folder inside container where to save backup file. If location is not provided, backup file will be saved in /core_app/ folder - the papermerge core application's current folder.</p> <p>Example:</p> <pre><code>    $ docker ps --format '{\\{.ID\\}} {\\{.Command\\}} {\\{.Names\\}}'\n\n    914dda21dd3d \"/run.bash server\" 091223_30-web-1\n    42095cee91f0 \"docker-entrypoint.s\u2026\" 091223_30-solr-1\n    d65b3205d9ec \"/run.bash worker\" 091223_30-worker-1\n    ac5cfd76993a \"docker-entrypoint.s\u2026\" 091223_30-redis-1\n    8ad6d0a7eb6c \"/opt/bitnami/script\u2026\" 091223_30-db-1\n</code></pre> <p>In above example the Papermerge has 5 containers: app server (the core or web or http or REST API server, pick the name you like :P), solr search engine, redis, database and finally one paper worker.</p> <p>To create a backup in root folder of the app container just run:</p> <pre><code>$ docker exec 914dda21dd3d backup.sh /\n</code></pre> <p>When above command is ready, check that backup file was created:</p> <pre><code>$ docker exec 914dda21dd3d ls /\n\nauth_server_app\nbackup_10_12_2023-11_30_37.tar.gz\nbin\nboot\n...\ncore_app\ncore_ui\ndb\n...\nusr\nvar\n</code></pre> <p>Backup file is backup_10_12_2023-06_30_37.tar.gz. Now you can copy backup file to your local filesystem:</p> <pre><code>$ docker cp 914dda21dd3d:/backup_10_12_2023-06_30_37.tar.gz .\n</code></pre> <p>You may choose to name file differently:</p> <pre><code>$ docker exec 914dda21dd3d backup.sh /my-daily-backup.tar.gz\n</code></pre> <p>Then copy it to your local filesystem:</p> <pre><code>$ docker cp 914dda21dd3d:/my-daily-backup.tar.gz .\n</code></pre> <p>Note</p> <p>Backup files are gzipped tar archives, thus you probably want to append \".tar.gz\" to their name.</p>"},{"location":"backup-restore/#restore","title":"Restore","text":"<p>When you plan to restore previous backup, we suggest to start with new Papermerge instance, with only one superuser (which is created by default anyway). Make sure there are no documents in the new instance.</p> <p>For sake of example, let's say the superuser's username is \"admin\". For restoring use <code>restore.sh</code> command:</p> <pre><code>$ docker exec &lt;papermerge-server-container&gt; restore.sh &lt;backup-file&gt;\n</code></pre> <p>For that to work, you need first to copy backup archive file to core (server) container. Sticking with example from previous section:</p> <pre><code>$ docker cp my-backup.tar.gz 914dda21dd3d:/my-backup.tar.gz\n$ docker exec 914dda21dd3d restore.sh /my-backup.tar.gz\n</code></pre> <p>If \"admin\" user already existed in backup file, then admin's password will be set to the one from the backup file.</p>"},{"location":"backup-restore/#backup-file-structure","title":"Backup File Structure","text":"<p>The backup file is a gzipped tar archive with following content:</p> <ol> <li><code>backup.json</code> file</li> <li><code>ocr/</code> folder</li> <li><code>docvers/</code>  folder</li> <li><code>username1</code>/, <code>username2</code>, ... i.e. one folder per user with folder title being user's username</li> </ol> <p><code>backup.json</code> file contains all necessary info to restore the database i.e. all users, their nodes, tags etc.</p> <p><code>docvers/</code> contains actually document versions files. Your documents are here.</p> <p><code>ocr/</code> contains OCR data of each individual page in the document.</p> <p>User folders mentioned in point 4. are provided for convenience, so that you may quickly get an understanding of the folder structure and their content. Each file in user folder is actually a symbolic link pointing to the last version of the document (from <code>docvers</code>).</p> <p>Warning</p> <p>Each user has two special folders: <code>.home</code> and <code>.inbox</code>; special folder's title start with dot. If you open backup archive in file browsers which hides dot files (file starting with dot character) - the content of user folder may appear empty! When opening backup archive make sure you set 'show hidden files flag' on.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>For complete changelog see changelog file in github repository.</p>"},{"location":"cli/cli/","title":"Papermerge CLI","text":"<p>Command line utility which uses REST API to interact with your Papermerge instance. It can be used to upload documents from local filesystem to yout Papermerge instance.</p> <p></p>"},{"location":"cli/cli/#requirements","title":"Requirements","text":"<p>In order to use <code>papermerge-cli</code> you need to have python installed. You need python version &gt;= 3.10.</p>"},{"location":"cli/cli/#install","title":"Install","text":"<p>Install <code>papermerge-cli</code> with following command:</p> <pre><code>pip install papermerge-cli\n</code></pre> <p>pip is package installer for python - it usually comes with python interpreter. In order to install pip on Ubuntu use following command:</p> <pre><code>sudo apt install python3-pip\n</code></pre>"},{"location":"cli/cli/#configuration","title":"Configuration","text":"<p>Papermerge Cli is configured via environment variables:</p> <ul> <li><code>PAPERMERGE_CLI__HOST</code></li> <li><code>PAPERMERGE_CLI__TOKEN</code></li> </ul> <p>as the name suggests, the first one is the host of the REST API server and second value is the REST API token.</p> <p>REST API server should be specified with <code>http://</code> or <code>https://</code> prefix, but without the <code>/api</code> suffix. Valid values examples: http://papermege.local, https://my-dms.papermerge.de.</p> <p>Note</p> <p>The host may or may not contain the <code>/</code>. E.g. http://papermege.local and http://papermerge.local/ are both valid values and point to the same host</p> <p>To get REST API token follow these instructions.</p>"},{"location":"cli/cli/#ls","title":"ls","text":"<p>List the content of you home folder:</p> <pre><code>  papermerge-cli ls\n</code></pre> <p>In order to list content of specific folder (including inbox folder)::</p> <pre><code>  papermerge-cli ls --parent-uuid=UUID-of-the-folder\n</code></pre>"},{"location":"cli/cli/#me","title":"me","text":"<p>In order to see current user details use <code>me</code> command:</p> <pre><code>  papermerge-cli me\n</code></pre>"},{"location":"cli/cli/#import","title":"import","text":"<p>Recursively imports documents and folders from local filesystem. For example, in order to import recursively all documents from local folder:</p> <pre><code>papermerge-cli import /path/to/local/folder/\n</code></pre> <p>You can also import one single document:</p> <pre><code>papermerge-cli import /path/to/some/document.pdf\n</code></pre> <p>By default all documents are imported to your user's <code>.inbox</code> folder. If you want to import to another folder, use <code>--target-uuid</code>:</p> <pre><code>papermerge-cli import /path/to/some/document.pdf --target-uuid &lt;uuid&gt;\n</code></pre> <p>In order to learn UUID of the folder you want to import to use <code>papermerge-cli ls</code> command. To get UUIDs of <code>.home</code> and <code>.inbox</code> folders, use <code>papermerge-cli me</code> command.</p> <p>If you want the local copy the uploaded documents to be deleted after successful import - use <code>--delete</code> flag:</p> <pre><code>papermerge-cli import --delete /path/to/folder/\n</code></pre> <p>Danger</p> <p>Be careful with <code>--delete</code> flag! When present,</p> <p><code>papermerge-cli</code> will irreversible delete the local copy of all    documents and folders in the <code>/path/to/folder/</code>!</p> <p>Danger</p> <p>Always, before using this flag make safe backup of the documents to be uploaded!</p> <p>!!! note: <code>--delete</code> flag deletes the local copy of the documents/path to import     after successful upload - this means that even if though you local copy     of the documents vanished - the originals are still available in Papermerge!</p>"},{"location":"cli/cli/#help","title":"help","text":"<p>In order to get general help about the command use:</p> <pre><code>  papermerge-cli --help\n</code></pre> <p>In order to get help for individual commands, place <code>--help</code> flag after the command:</p> <pre><code>  papermerge-cli import --help\n</code></pre>"},{"location":"cli/overview/","title":"Overview","text":"<p>This section describes a set of command line utilities which can interact (e.g. import documents to, list nodes etc) with your Papermerge instance.</p> <p>What is common to all command line utilities listed here is that they all use REST API interface. In order to use REST API you need to know:</p> <ul> <li>host address of the REST API server</li> <li>the token used for authentication - REST API token</li> </ul>"},{"location":"cli/overview/#host-address","title":"Host Address","text":"<p>Host address should be provided with <code>http://</code> or <code>https://</code> prefix.</p> <p>Examples:</p> <ul> <li>http://papermerge.local</li> <li>https://mydms.com/</li> <li>https://my-own-digital-archives.de</li> </ul> <p>Note</p> <p>REST API server may or may not end with <code>/</code> character. Thus, both http://papermerge.local     and http://papermerge.local/ are valid.</p>"},{"location":"cli/overview/#rest-api-token","title":"REST API Token","text":"<p>Currently there is no web UI for getting your user's token. The only way to get REST API token is by running docker command.</p> <p>Click here for details.</p>"},{"location":"contributor/docker/","title":"Docker","text":"<p>There is docker image for development mode. Docker image is tagged with <code>3.0devX</code>. With dev image, you can get feedback of your source code changes without needing to install any dependency or any deveopment environment configurations.</p> <p>All examples described below assume that you got Papermerge source code and you are in root repository of source code folder:</p> <pre><code>$ git clone git@github.com:papermerge/papermerge-core.git PapermergeSourceCode\n$ cd PapermergeSourceCode\n</code></pre>"},{"location":"contributor/docker/#web-app","title":"Web App","text":"<p>This is the simplest local dev scenario, you start docker compose file only with web app i.e. REST API server + ui.</p> <p>The go to the folder where source was cloned and create following docker compose file:</p> <pre><code>version: \"3.9\"\n\nservices:\n  backend:\n    image: papermerge/papermege:3.0dev  # check the latest dev image number in dockerhub!\n    volumes:\n        - ./papermerge:/core_app/papermerge/\n        - ./ui:/core_ui/\n    environment:\n      PAPERMERGE__SECURITY__SECRET_KEY: 1234  # top secret\n      PAPERMERGE__AUTH__USERNAME: admin\n      PAPERMERGE__AUTH__PASSWORD: 1234\n    ports:\n      - \"11000:80\"\n</code></pre> <p>Assuming you are in root folder of the source code, above docker compose will mount the source code to the correct location in docker image. The appliction will be accessible to on local port 11000.</p> <p>Here is docker compose file for the case when you want to build dev docker image yourself:</p> <pre><code>version: \"3.9\"\n\nservices:\n  backend:\n    build:\n      context: .\n      dockerfile: docker/dev/Dockerfile\n    volumes:\n        - ./papermerge:/core_app/papermerge/\n        - ./ui:/core_ui/\n    environment:\n      PAPERMERGE__SECURITY__SECRET_KEY: 1234  # top secret\n      PAPERMERGE__AUTH__USERNAME: admin\n      PAPERMERGE__AUTH__PASSWORD: 1234\n    ports:\n      - \"11000:80\"\n</code></pre>"},{"location":"contributor/docker/#web-app-worker","title":"Web App + Worker","text":"<p>Following docker compose adds worker service. Worker and Web App communicate via redis (message broker), thus we need to add redis service as well:</p> <pre><code>version: \"3.9\"\n\nx-backend: &amp;common  # yaml anchor definition\n  build:\n    context: .\n    dockerfile: docker/dev/Dockerfile\n  environment:\n      PAPERMERGE__SECURITY__SECRET_KEY: 1234  # top secret\n      PAPERMERGE__AUTH__USERNAME: admin\n      PAPERMERGE__AUTH__PASSWORD: 1234\n      PAPERMERGE__REDIS__URL: redis://redis:6379/0\n  volumes:\n      - ./papermerge:/core_app/papermerge/\n      - ./ui:/core_ui/\n      - data:/db\n      - index_db:/core_app/index_db\n      - media_root:/core_app/media\n\nservices:\n  web:\n    &lt;&lt;: *common\n    ports:\n     - \"11000:80\"\n    depends_on:\n      - redis\n  worker:\n    &lt;&lt;: *common\n    command: worker\n  redis:\n    image: redis:6\n\nvolumes:\n    data:\n    index_db:\n    media_root:\n</code></pre>"},{"location":"contributor/docker/#logging-config","title":"Logging Config","text":"<p>Both worker and web app read their logging configurations from file pointed by <code>PAPERMERGE__MAIN__LOGGING_CFG</code> environment variable. An example of custom logging config would be:</p> <pre><code>version: 1\ndisable_existing_loggers: true\n\nformatters:\n  verbose:\n    format: '%(asctime)s %(levelname)s %(name)s.%(funcName)s %(message)s'\n\nhandlers:\n  console:\n    level: DEBUG\n    class: logging.StreamHandler\n    formatter: verbose\n\nloggers:\n  auth_server:\n    level: DEBUG\n    handlers: [console]\n  papermerge.search.tasks:\n    level: DEBUG\n    handlers: [console]\n    propagate: no\n    format: verbose\n</code></pre> <p>You may recognize it. It should be YAML version of python logging config.</p> <p>Here is an example of docker compose with web wepp + worker + custom logging configuration:</p> <pre><code>version: \"3.9\"\n\nx-backend: &amp;common\n  build:\n    context: .\n    dockerfile: docker/dev/Dockerfile\n  environment:\n      PAPERMERGE__SECURITY__SECRET_KEY: 1234  # top secret\n      PAPERMERGE__AUTH__USERNAME: admin\n      PAPERMERGE__AUTH__PASSWORD: 1234\n      PAPERMERGE__REDIS__URL: redis://redis:6379/0\n      PAPERMERGE__MAIN__LOGGING_CFG: /logging.yml  # &lt;-- absolute path to custom config file\n  volumes:\n      - ./papermerge:/core_app/papermerge/\n      - ./ui:/core_ui/\n      - data:/db\n      - index_db:/core_app/index_db\n      - media_root:/core_app/media\n      - ./custom_logging.yml:/logging.yml  # mount local logging config file\n\nservices:\n  web:\n    &lt;&lt;: *common\n    ports:\n     - \"11000:80\"\n    depends_on:\n      - redis\n  worker:\n    &lt;&lt;: *common\n    command: worker\n  redis:\n    image: redis:6\n\nvolumes:\n    data:\n    index_db:\n    media_root:\n</code></pre>"},{"location":"contributor/docker/#solr","title":"Solr","text":"<p>Papermerge is shipped with a default search library - Xapian.</p> <p>However, you may opt-in to use full fledged search engine like Solr. In order to change search backend, use <code>PAPERMERGE__SEARCH__URL</code> env variable:</p> <pre><code>version: \"3.9\"\n\nx-backend: &amp;common\n  build:\n    context: .\n    dockerfile: docker/dev/Dockerfile\n  environment:\n      PAPERMERGE__SECURITY__SECRET_KEY: 1234\n      PAPERMERGE__AUTH__USERNAME: admin\n      PAPERMERGE__AUTH__PASSWORD: 1234\n      PAPERMERGE__REDIS__URL: redis://redis:6379/0\n      PAPERMERGE__SEARCH__URL: solr://solr:8983/pmg-index  # &lt;- use Solr's \"pmg-index\" index\n  volumes:\n      - ./papermerge:/core_app/papermerge/\n      - ./ui:/core_ui/\n      - data:/db\n      - index_db:/core_app/index_db\n      - media_root:/core_app/media\n\nservices:\n  web:\n    &lt;&lt;: *common\n    ports:\n     - \"11000:80\"\n    depends_on:\n      - redis\n      - solr\n  worker:\n    &lt;&lt;: *common\n    command: worker\n  redis:\n    image: redis:6\n  solr:\n    image: solr:9.3\n    ports:\n     - \"8983:8983\"\n    volumes:\n      - solr_data:/var/solr\n    command:\n      - solr-precreate\n      - pmg-index  # &lt;- creates index at startup of the Solr service\n\nvolumes:\n  data:\n  solr_data:\n  index_db:\n  media_root:\n</code></pre> <p>Notice that Solr is started with <code>solr-precreate pmg-index</code> command, which means that Solr service will be started with pre-created index named <code>pmg-index</code>.</p>"},{"location":"contributor/docker/#postgresql","title":"PostgreSQL","text":"<p>Here is an example of docker compose which uses PostgreSQL as database:</p> <pre><code>version: \"3.9\"\n\nx-backend: &amp;common\n  build:\n    context: .\n    dockerfile: docker/dev/Dockerfile\n  environment:\n      PAPERMERGE__SECURITY__SECRET_KEY: 1234  # top secret\n      PAPERMERGE__AUTH__USERNAME: admin\n      PAPERMERGE__AUTH__PASSWORD: 1234\n      PAPERMERGE__DATABASE__URL: postgresql://postgres:123@db:5432/postgres\n      PAPERMERGE__REDIS__URL: redis://redis:6379/0\n      PAPERMERGE__SEARCH__URL: solr://solr:8983/pmg-index\n  volumes:\n    - ./papermerge:/core_app/papermerge/\n    - ./ui:/core_ui/\n    - index_db:/core_app/index_db\n    - media_root:/core_app/media\n  depends_on:\n    - redis\n    - solr\n    - db\n\nservices:\n  web:\n    &lt;&lt;: *common\n    ports:\n     - \"11000:80\"\n  worker:\n    &lt;&lt;: *common\n    command: worker\n  redis:\n    image: redis:6\n  solr:\n    image: solr:9.3\n    ports:\n     - \"8983:8983\"\n    volumes:\n      - solr_data:/var/solr\n    command:\n      - solr-precreate\n      - pmg-index\n  db:\n    image: bitnami/postgresql:14.4.0\n    volumes:\n      - postgres_data:/var/lib/postgresql/data/\n    environment:\n      - POSTGRES_PASSWORD=123\n\nvolumes:\n  postgres_data:\n  solr_data:\n  index_db:\n  media_root:\n</code></pre>"},{"location":"contributor/docker/#oauth-20","title":"OAuth 2.0","text":""},{"location":"rest-api/overview/","title":"Overview","text":"<p>Papermerge provides very powerful REST API. In order to user REST API, you need REST API server URL and user token.</p> <p>REST server URL is the http address of your running instance. HTTP address also include the scheme.</p> <p>Examples of REST API server URLs:</p> <ul> <li>http://papermerge.homelab.dev</li> <li>https://papers.berlin</li> </ul> <p>Currently there is no web UI to get token, the only way to get REST API token is by running docker command. See next section for details.</p>"},{"location":"rest-api/reference/","title":"Reference","text":"<p>Papermerge REST API is exposed via Open API standard.</p> <p>Papermerge ships with swagger REST API documentation reference. You can access it in your running Papermerge instance from user menu -&gt; REST API:</p> <p></p>"},{"location":"rest-api/token/","title":"REST API Token","text":"<p>Currently there is no web UI for getting the REST API token. Instead, you get the REST API token by running one docker command:</p> <pre><code>docker exec &lt;papermege-container&gt; create_token.sh &lt;username&gt;\n</code></pre> <p>You can list users in Papermerge with following command:</p> <pre><code>docker exec &lt;papermege-container&gt; list_users.sh\n</code></pre> <p>Example:</p> <pre><code>$ docker ps --format '{\\{.ID\\}} {\\{.Command\\}} {\\{.Names\\}}'\n\nd8b965388fd9 \"/run.bash server\" fordoc-web-1\n8fb8f6f565a2 \"/run.bash worker\" fordoc-worker-1\n8a42db0bb7f9 \"/opt/bitnami/script\u2026\" fordoc-db-1\n8a6146801936 \"docker-entrypoint.s\u2026\" fordoc-redis-1\n</code></pre> <p>In above example the Papermerge has four containers: app server, redis, database and one worker. For our purpose we need app container (in example above - fordoc-web-1). Let's list all users first:</p> <pre><code>$ docker exec d8b965388fd9 list_users.sh\n\nusername=john email=admin@example.com\n</code></pre> <p>There is only one user with username \"john\". In order to get REST API token for user \"john\" run following command:</p> <pre><code>$ docker exec d8b965388fd9 create_token.sh john\n\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJqb2huIiwidXNlcl9pZCI6IjJiODQwY2RhLThjMmYtNDExYy05NDYwLTY0ZDA3YWY3YTJiZSIsImV4cCI6MTcwMzM1MTUzNn0.KJAL9TjRiV63liwVO5bh9GQ_I_QFXMoviKV9Lww3cDs\n</code></pre> <p>The long list of characters from above is the token for user with username \"john\".</p> <p>By default generated REST API token is valid for 6 hours. If you want to change expiration time for the token use PAPERMERGE__SECURITY__TOKEN_EXPIRE_MINUTES configuration setting.</p> <p></p>"},{"location":"settings/auth/","title":"Auth","text":""},{"location":"settings/auth/#auth__username","title":"AUTH__USERNAME","text":"<p>Username for the superuser. Default value is <code>admin</code>.</p> <p>Example:</p> <pre><code>PAPERMERGE__AUTH__USERNAME=john\n</code></pre>"},{"location":"settings/auth/#auth__password","title":"AUTH__PASSWORD","text":"<p>Password for the superuser. No default value.</p> <p>Example:</p> <pre><code>PAPERMERGE__AUTH__PASSWORD=topsecret\n</code></pre>"},{"location":"settings/auth/#auth__email","title":"AUTH__EMAIL","text":"<p>Email for the superuser. Default value is <code>admin@example.com</code>.</p> <p>Example:</p> <pre><code>PAPERMERGE__AUTH__EMAIL=john@mail.com\n</code></pre>"},{"location":"settings/auth/#auth__google_client_secret","title":"AUTH__GOOGLE_CLIENT_SECRET","text":"<p>When using oauth2 authentication with Google provider this variables is oauth2 client secret. You get oauth2 client secret from Google Console.</p> <p>Example:</p> <pre><code>PAPERMERGE__AUTH__GOOGLE_CLIENT_SECRET=GOCSPX-qlqlqlqlqlqlqlqlq-FuOOOOORf\n</code></pre>"},{"location":"settings/auth/#auth__google_client_id","title":"AUTH__GOOGLE_CLIENT_ID","text":"<p>When using oauth2 authentication with Google provider this variables is oauth2 client ID. You get oauth2 client ID from Google Console.</p> <p>Example:</p> <pre><code>PAPERMERGE__AUTH__GOOGLE_CLIENT_ID=900000999991-1tmegfjqqqqqqqqqqqqqqqqqqqqv.apps.googleusercontent.com\n</code></pre>"},{"location":"settings/auth/#auth__google_authorize_url","title":"AUTH__GOOGLE_AUTHORIZE_URL","text":"<p>Must be set to fixed value <code>https://accounts.google.com/o/oauth2/auth</code>:</p> <pre><code>PAPERMERGE__AUTH__GOOGLE_AUTHORIZE_URL=https://accounts.google.com/o/oauth2/auth\n</code></pre> <p>In case google changed their authorize URL, please open a ticket for Papermerge to update this documentation entry with correct value.</p>"},{"location":"settings/auth/#auth__google_redirect_uri","title":"AUTH__GOOGLE_REDIRECT_URI","text":"<p>This value always should be set to <code>&lt;http|https&gt;://&lt;your-domain&gt;/google/callback</code>. Example:</p> <pre><code>PAPERMERGE__AUTH__GOOGLE_REDIRECT_URI=https://demo.trusel.net/google/callback\n</code></pre>"},{"location":"settings/auth/#auth__github_client_secret","title":"AUTH__GITHUB_CLIENT_SECRET","text":"<p>When using oauth2 authentication with GitHub provider this variables is oauth2 client secret.</p> <p>Example:</p> <pre><code>PAPERMERGE__AUTH__GITHUB_CLIENT_SECRET=hohoho-edited-FuOOOOORf\n</code></pre>"},{"location":"settings/auth/#auth__github_client_id","title":"AUTH__GITHUB_CLIENT_ID","text":"<p>When using oauth2 authentication with GitHub provider, this variables is oauth2 client ID.</p> <p>Example:</p> <pre><code>PAPERMERGE__AUTH__GITHUB_CLIENT_ID=1tmegfjq-edited-qqqqv\n</code></pre>"},{"location":"settings/auth/#auth__github_authorize_url","title":"AUTH__GITHUB_AUTHORIZE_URL","text":"<p>Must be set to fixed value <code>https://github.com/login/oauth/authorize</code>:</p> <pre><code>PAPERMERGE__AUTH__GITHUB_AUTHORIZE_URL=https://github.com/login/oauth/authorize\n</code></pre> <p>In case GitHub changes their authorize URL, please open a ticket for Papermerge to update this documentation entry with correct value.</p>"},{"location":"settings/auth/#auth__github_redirect_uri","title":"AUTH__GITHUB_REDIRECT_URI","text":"<p>This value always should be set to <code>&lt;http|https&gt;://&lt;your-domain&gt;/github/callback</code>. Example:</p> <pre><code>PAPERMERGE__AUTH__GITHUB_REDIRECT_URI=https://demo.trusel.net/github/callback\n</code></pre>"},{"location":"settings/auth/#auth__ldap_url","title":"AUTH__LDAP_URL","text":"<p>If this environment variable is set to non-empty value, Papermerge will assume that authentication will be performed using LDAP backend. Value should be set to URL of the ldap server. URL is specified without scheme (i.e. no ldap://, ldaps:// prefix). Example:</p> <pre><code>PAPERMERGE__AUTH__LDAP_URL=ldap.trusel.net\n</code></pre>"},{"location":"settings/auth/#auth__ldap_user_dn_format","title":"AUTH__LDAP_USER_DN_FORMAT","text":"<p>Format of distinguished name to the user entry. The \"{username}\" literal is used as placeholder; in other words you mark the part of the DN where actual username will be placed with \"{username}\" string. Example:</p> <pre><code>PAPERMERGE__AUTH__LDAP_USER_DN_FORMAT=\"uid={username},ou=People,dc=ldap,dc=trusel,dc=net\"\n</code></pre> <p>Another example:</p> <pre><code>PAPERMERGE__AUTH__LDAP_USER_DN_FORMAT=\"uid={username},ou=Users,dc=example,dc=com\"\n</code></pre> <p>Yet another, fictional example:</p> <pre><code>PAPERMERGE__AUTH__LDAP_USER_DN_FORMAT=\"uid={username},ou=Accounts,dc=acme,dc=com\"\n</code></pre> <p>You see? \"{username}\" part stay fixed. It is placeholder.</p>"},{"location":"settings/auth/#auth__ldap_use_ssl","title":"AUTH__LDAP_USE_SSL","text":"<p>Boolean value (True/False). Instructs Papermerge if secure connection should be used (TLS/SSL) when connecting to LDAP server. Default value is True. Example:</p> <pre><code>PAPERMERGE__AUTH__LDAP_USE_SSL=False\n</code></pre>"},{"location":"settings/auth/#auth__ldap_email_attr","title":"AUTH__LDAP_EMAIL_ATTR","text":"<p>Email attribute name in user LDAP entry. Default value is <code>mail</code>.</p>"},{"location":"settings/auth/#auth__ldap_user_email_domain_fallback","title":"AUTH__LDAP_USER_EMAIL_DOMAIN_FALLBACK","text":"<p>Fallback value of the email domain. In case Papermerge fails to extract user's email, it will use this value as fallback for email domain. The full email format that Papermerge will set as fallback is:</p> <pre><code>&lt;username&gt;@&lt;email-domain-fallback&gt;\n</code></pre> <p>For example, if:</p> <pre><code>PAPERMERGE__AUTH__LDAP_USER_EMAIL_DOMAIN_FALLBACK=starship.com\n</code></pre> <p>and username is <code>coco</code> and, say, LDAP user entry does not feature mail attribute, the email assigned to user will be <code>coco@starship.com</code></p>"},{"location":"settings/database/","title":"Database","text":"<p>This sections is for database configurations. Papermerge supports following databases SQLite3, PostgreSQL, MySQL/MariaDB.</p>"},{"location":"settings/database/#database__url","title":"DATABASE__URL","text":"<p>For PostgreSQL the database URL is given in following format:</p> <pre><code>postgresql://USER:PASSWORD@HOST:PORT/NAME\n</code></pre> <p>Example:</p> <pre><code>postgresql://scott:tiger@db:5432/mydatabase\n</code></pre> <p>For MariaDB and MySQL the URL scheme is <code>mysql</code>.</p> <p>Example:</p> <pre><code>mysql://myuser:mypass@db:3306/paperdb\n</code></pre> <p>For SQLite the format is: <code>sqlite:///PATH</code>.</p> <p>Example:</p> <pre><code>sqlite:////db/db.sqlite3\n</code></pre> <p>Default value is <code>sqlite:////db/db.sqlite3</code>, in other words, if <code>DATABASE__URL</code> is missing, Papermerge will use SQLite with <code>/db/db.sqlite3</code> as db file.</p> <p>Note</p> <p>Both web_app and worker must have same <code>PAPERMERGE__DATABASE__URL</code>.</p>"},{"location":"settings/database/#database__pool_size","title":"DATABASE__POOL_SIZE","text":"<p>Applies only for Tivoli. Set database connections pool size. Defaults to 5.</p> <p>Note</p> <p>This configuration option applies only to Tivoli, which is internal JWT token validator component. Tivoli uses SQLAlchemy as ORM. SQLAlchemy has built-in database connections pooling. The core app though, uses Django ORM - which does not have built-in pooling capabilities.</p>"},{"location":"settings/main/","title":"Main","text":""},{"location":"settings/main/#main__media_root","title":"MAIN__MEDIA_ROOT","text":"<p>Absolute filesystem path to the directory that will hold user-uploaded documents.</p> <p>Example:</p> <pre><code>PAPERMERGE__MAIN__MEDIA_ROOT=/var/www/example.com/media/\n</code></pre>"},{"location":"settings/main/#main__logging_cfg","title":"MAIN__LOGGING_CFG","text":"<p>Absolute filesystem path to the yaml file that will hold logging detailed configuration. Content of logging configuration file is expected to be in yaml format and it is very python specific.</p> <p>Example:</p> <pre><code>  PAPERMERGE__MAIN__LOGGING_CFG=/etc/papermerge/logging.yaml\n</code></pre>"},{"location":"settings/main/#main__timezone","title":"MAIN__TIMEZONE","text":"<p>Which timezone to use.</p> <p>Example:</p> <pre><code>PAPERMERGE__MAIN__TIMEZONE=Europe/Berlin\n</code></pre>"},{"location":"settings/ocr/","title":"OCR","text":"<p>This section groups all OCR specific configurations.</p>"},{"location":"settings/ocr/#ocr__default_language","title":"OCR__DEFAULT_LANGUAGE","text":"<p>By default Papermerge will use language specified with this option to perform OCR. Change this value for language used by majority of your documents. For detailed list of three letter codes see 639-2/T column from ISO 639 2.</p> <p>Example as environment variable:</p> <pre><code>PAPERMERGE__OCR__DEFAULT_LANGUAGE=spa\n</code></pre> <p>Default value is \"deu\" (German language).</p>"},{"location":"settings/overview/","title":"Overview","text":"<p>Papermerge loads its settings from environment variables.</p> <p>Environment variables have following format:</p> <pre><code>PAPERMERGE__&lt;section&gt;__&lt;name&gt;\n</code></pre> <p>double underscores are used as delimiter; environment variables names must be all upper case.</p> <p>Only required environment variables are:</p> <ul> <li>PAPERMERGE__SECURITY__SECRET_KEY</li> <li>PAPERMERGE__AUTH__PASSWORD</li> </ul> <p><code>PAPERMERGE__SECURITY__SECRET_KEY</code> is the key to securing signed data \u2013 it is vital you keep this secure, or attackers could use it to generate their own signed values.</p> <p><code>PAPERMERGE__AUTH__PASSWORD</code> is the password for super user (administrative user or admin user). Super user is created automatically for you when Papermerge starts for the first time.</p> <p>Note</p> <p>In the documentation, for brevity sake, <code>PAPERMERGE__</code> prefix may be omitted. For example docs may say: default value for <code>DATABASE__URL</code> is \"sqlite:////db/db.sqlite3\"; what is meant actually is: default value for <code>PAPERMERGE__DATABASE_URL</code> is \"sqlite:////db/db.sqlite3\".</p>"},{"location":"settings/redis/","title":"Redis","text":"<p>Papermerge uses redis.</p>"},{"location":"settings/redis/#redis__url","title":"REDIS__URL","text":"<p>For Redis the URL is given in following format:</p> <pre><code>redis://HOST:PORT/NUMBER\n</code></pre> <p>For example:</p> <pre><code>redis://redis:6379/0\n</code></pre> <p>Note</p> <p>Both web_app and worker must have same <code>PAPERMERGE__REDIS__URL</code></p>"},{"location":"settings/search/","title":"Search Engine","text":"<p>Papermerge supports multiple search engine backends. Currently two backends are available:</p> <ul> <li>xapian</li> <li>solr</li> </ul>"},{"location":"settings/search/#search__url","title":"SEARCH__URL","text":"<p>Search engine backend to use. For Solr format is:</p> <pre><code>solr://HOST:PORT/INDEX\n</code></pre> <p>Example: <code>solr://solr:8983/pmg-index</code></p> <p>For Xapian URL format is <code>xapian:///PATH</code>. Example: <code>xapian:////index_db</code> - in other words, xapian will store all index data in <code>/index_db</code> folder.</p> <p>Default value for <code>PAPERMERGE__SEARCH__URL</code> is <code>xapian:////index_db</code></p> <p>Note</p> <p>Both web_app and worker must have same <code>PAPERMERGE__SEARCH__URL</code></p>"},{"location":"settings/security/","title":"Security","text":""},{"location":"settings/security/#security__secret_key","title":"SECURITY__SECRET_KEY","text":"<p> Required . Unique secret key. The secret key must be a large random value and it must be kept secret. This option does not have default value, you always need to supply a value for it. Secret key is used to sign JWT tokens.</p> <p>Example as environment variable:</p> <pre><code>PAPERMERGE__SECRET__SECRET_KEY=asjrijfpHHJH00huge00secret00QMNB344GHOOooaq\n</code></pre>"},{"location":"settings/security/#security__token_expire_minutes","title":"SECURITY__TOKEN_EXPIRE_MINUTES","text":"<p>REST API token expiration in minutes. Default value is 360 (i.e. 6 hours).</p> <p>Example, set token to expire in 7 days (10080 = 60x24x7):</p> <pre><code>PAPERMERGE__SECURITY__TOKEN_EXPIRE_MINUTES=10080\n</code></pre>"},{"location":"setup/add-ocr-langs/","title":"Add OCR Languages","text":"<p>By default the Papermerge docker image includes English, German, French, Italian, Spanish, Dutch, Romanian and Portugues OCR languages.</p> <p>You can install extra languages by creating a new docker image from base <code>papermerge/papermerge</code>.</p> <p>Create new docker file with following content:</p> <pre><code>FROM papermerge/papermerge:3.1\n\n# add Danish and Polish OCR languages\nRUN apt install tesseract-ocr-dan tesseract-ocr-pol\n</code></pre> <p>All languages are specified in three letters code as per ISO 639-2T standard - second column in the table.</p> <p>In order to build your image run:</p> <pre><code>docker build -t mypaper:3.0 -f Dockerfile .\n</code></pre> <p>Check that OCR languages were installed:</p> <pre><code>docker run -it --rm  mypaper:3.0  tesseract --list-langs\n</code></pre>"},{"location":"setup/ansible/","title":"Ansible","text":"<p>Ansible playbook is available at papermerge/ansible.</p> <p>Playbook will install web app, two workers, database, Redis and Solr search engine on target host. All services will be deployed as docker containers. All services will be placed behind traefik, reverse proxy which will take care of TLS certficates.</p> <p></p> <p>Choose one of following options:</p> <ul> <li>option 1: install Papermerge with PostgreSQL database</li> <li>option 2: install Papermerge with PostgreSQL + PgBouncer</li> <li>option 3: install Papermerge with MariaDB as database</li> </ul>"},{"location":"setup/ansible/#secrets","title":"Secrets","text":"<p>Ansible repository does not include secrets file. Secrets file contains all sensitive (paswords, api tokens) information.</p> <p>You need to create secrets filein <code>group_vars</code> folder:</p> <pre><code>$ touch groups_vars/secrets\n</code></pre> <p>Place following content:</p> <pre><code>secret_key: ...\nsuperuser_password: ...\ndatabase_url: ...\ndb_pass: ...\ncloudflare_api_key: ...\ntraefik_api_password: ...\n</code></pre> <p>Of course you need to replace dots with correct passwords, secret_key etc. database_url is in secrets file because it includes password.</p>"},{"location":"setup/ansible/#option-1-postgresql","title":"Option 1 / PostgreSQL","text":"<p>Make sure <code>database_url</code> in your secrets files matches database related options in <code>group_vars/all</code> (db_user, db_name). Also port number <code>database_url</code> should match the one in <code>db_postgres/vars/main.yml</code>.</p> <p><code>database_url</code> should have following format:</p> <pre><code>postgresql://&lt;user&gt;:&lt;pass&gt;@db:5432/&lt;dbname&gt;\n</code></pre> <p>Install Papermerge DMS with PostgreSQL:</p> <pre><code>$ ansible-playbook install_1.yml -i inventory --extra-vars \"@group_vars/secrets\"\n</code></pre> <p>Application will be accessible via https:// <code>acme_domain</code> is variable you set in <code>group_vars/all</code> e.g. trusel.net"},{"location":"setup/ansible/#option-2-postgresql-pgbouncer","title":"Option 2 / PostgreSQL + PgBouncer","text":"<p>In this setup application will connect to the database via pgbouncer, this means that <code>database_url</code> should point to pgbouncer.</p> <p>Your <code>database_url</code> should look like:</p> <pre><code>postgresql://&lt;user&gt;:&lt;pass&gt;@pgbouncer:6432/&lt;dbname&gt;\n</code></pre> <p>Install Papermerge DMS with PostgreSQL and PgBouncer:</p> <pre><code>$ ansible-playbook install_2.yml -i inventory --extra-vars \"@group_vars/secrets\"\n</code></pre> <p>Application will be accessible via https:// <code>acme_domain</code> is variable you set in <code>group_vars/all</code> e.g. trusel.net"},{"location":"setup/ansible/#option-3-mariadb","title":"Option 3 / MariaDB","text":"<p>For Mysql/MariaDB <code>database_url</code> should have following format:</p> <pre><code>mysql://&lt;user&gt;:&lt;pass&gt;@db:3306/&lt;dbname&gt;\n</code></pre> <p>Install Papermerge DMS with MariaDB:</p> <pre><code>$ ansible-playbook install_3.yml -i inventory --extra-vars \"@group_vars/secrets\"\n</code></pre>"},{"location":"setup/ansible/#backup","title":"Backup","text":"<p>In order to create a backup:</p> <pre><code>$ ansible-playbook backup.yml\n</code></pre>"},{"location":"setup/ansible/#restore","title":"Restore","text":"<p>In order to restore the backup:</p> <pre><code>ansible-playbook restore.yml --extra-vars \"backup_file=/backup/backup_20_11_2023-07_33_03.tar.gz\"\n</code></pre> <p>The backup file path is the one from inside docker container.</p>"},{"location":"setup/ansible/#contribute","title":"Contribute","text":"<p>papermerge/ansible assumes Debian12/Ubuntu 22.04 host.</p> <p>We are happy to accept your pull requests for other hosts.</p>"},{"location":"setup/authentication/","title":"Authentication","text":"<p>Papermerge supports different authentication modes:</p> <ul> <li>Database (default)</li> <li>OAuth 2.0</li> <li>LDAP</li> </ul> <p>The difference consist in who decides if user with given username and password, are valid. In first mode i.e. database authentication - it is  Papermerge who decides if credentials are valid, this is why this database authentication is also called \"internal authentication\". For other two authentication modes it is the other party, external one like LDAP, which decides on validity of the given credentials.</p>"},{"location":"setup/authentication/#database-authentication","title":"Database Authentication","text":"<p>In this case authentication is performed against credentials stored in database configured with <code>PAPERMERGE__DATABASE__URL</code>. This is default operation mode.</p>"},{"location":"setup/authentication/#oauth-20","title":"OAuth 2.0","text":"<p>Papermerge supports OAuth 2.0 authentication protocol with Google and GitHub providers.</p>"},{"location":"setup/authentication/#google-provider","title":"Google Provider","text":"<p>For Google provider you need to configure following environment variables:</p> <pre><code>* PAPERMERGE__AUTH__GOOGLE_CLIENT_SECRET=&lt;google oauth 2.0 client secret&gt;\n* PAPERMERGE__AUTH__GOOGLE_CLIENT_ID=&lt;google oauth 2.0 client ID&gt;\n* PAPERMERGE__AUTH__GOOGLE_AUTHORIZE_URL=https://accounts.google.com/o/oauth2/auth\n* PAPERMERGE__AUTH__GOOGLE_REDIRECT_URI=&lt;https|http&gt;://&lt;your-domain&gt;/google/callback\n</code></pre> <p>Note that <code>PAPERMERGE__AUTH__GOOGLE_AUTHORIZE_URL</code> should always hold the same value:  <code>https://accounts.google.com/o/oauth2/auth</code> If all four environment variables are provided, the sign in view will render one extra button \"Login with Google\" as in picture below:</p> <p></p>"},{"location":"setup/authentication/#github-provider","title":"GitHub Provider","text":"<p>For GitHub provider you need to configure following environment variables:</p> <pre><code>* PAPERMERGE__AUTH__GITHUB_CLIENT_SECRET=&lt;github oauth 2.0 client secret&gt;\n* PAPERMERGE__AUTH__GITHUB_CLIENT_ID=&lt;github oauth 2.0 client ID&gt;\n* PAPERMERGE__AUTH__GITHUB_AUTHORIZE_URL=https://github.com/login/oauth/authorize\n* PAPERMERGE__AUTH__GITHUB_REDIRECT_URI=&lt;https|http&gt;://&lt;your-domain&gt;/github/callback\n</code></pre> <p>Note that <code>PAPERMERGE__AUTH__GITHUB_AUTHORIZE_URL</code> should always hold the same value:  <code>https://github.com/login/oauth/authorize</code></p> <p>If all four environment variables are provided, the sign in view will render one extra button \"Login with Github\" as in picture below:</p> <p></p>"},{"location":"setup/authentication/#ldap","title":"LDAP","text":"<p>Papermerge can perform authentication against users stored in LDAP system. In order to enable LDAP authentication you need to provide at least two environment variables:</p> <ul> <li>PAPERMERGE__AUTH__LDAP_URL</li> <li>PAPERMERGE__AUTH__LDAP_USER_DN_FORMAT</li> </ul> <p>First one is the URL to your ldap server, without scheme, example:</p> <pre><code>PAPERMERGE__AUTH__LDAP_URL=ldap.trusel.net\n</code></pre> <p>By default, Papermerge will connect to LDAP server using secure TLS connection. If you want Papermerge to access LDAP server using plain text connection, set PAPERMERGE__AUTH__LDAP_USE_SSL to False:</p> <pre><code>PAPERMERGE__AUTH__LDAP_USE_SSL=False\n</code></pre> <p>The second mandatory option is PAPERMERGE__AUTH__LDAP_USER_DN_FORMAT. It instructs Papermerge the DN (distinguished name) of the user you want to authenticate against. Example:</p> <pre><code>PAPERMERGE__AUTH__LDAP_USER_DN_FORMAT=uid={username},ou=People,dc=ldap,dc=trusel,dc=net\n</code></pre> <p>Notice \"{username}\" part - it must be literaly this value; the \"{username}\" will be replaced with actual username of the user when performing LDAP bind.</p> <p>Info</p> <p>In case you are curious, Papermerge uses ldap3 python package to perform LDAP authentication. Here is source code of ldap authentication part.</p> <p>By default Papermerge will try to extract user's email from <code>mail</code> attribute of LDAP entry identified <code>PAPERMERGE__AUTH__LDAP_USER_DN_FORMAT</code> distinguished name. You can instruct Papermerge about email attribute in LDAP entry with PAPERMERGE__AUTH__LDAP_URL.</p>"},{"location":"setup/docker-compose/","title":"Docker Compose","text":"<p>This section describes how to setup Papermerge using docker compose.</p>"},{"location":"setup/docker-compose/#web-app-worker","title":"Web App + Worker","text":"<p>The simpliest docker compose setup for Papermerge is following:</p> <pre><code>version: \"3.9\"\n\nx-backend: &amp;common\n  image: papermerge/papermerge:3.1\n  environment:\n      PAPERMERGE__SECURITY__SECRET_KEY: 12345\n      PAPERMERGE__AUTH__USERNAME: admin\n      PAPERMERGE__AUTH__PASSWORD: admin\n      PAPERMERGE__REDIS__URL: redis://redis:6379/0\n  volumes:\n      - data:/db\n      - index_db:/core_app/index_db\n      - media:/core_app/media\nservices:\n  web:\n    &lt;&lt;: *common\n    ports:\n     - \"12000:80\"\n    depends_on:\n      - redis\n  worker:\n    &lt;&lt;: *common\n    command: worker\n  redis:\n    image: redis:6\nvolumes:\n  data:\n  index_db:\n  media:\n</code></pre> <p>You can access Papermerge user interface using any modern web browser (e.g. Firefox, Chrome). Open your web browser and point it to http://localhost:12000.</p>"},{"location":"setup/docker-compose/#postgresql","title":"PostgreSQL","text":"<p>By default Papermerge uses sqlite3 database. Here is setup to which uses PostgreSQL:</p> <pre><code>version: \"3.9\"\n\nx-backend: &amp;common\n  image: papermerge/papermerge:3.1\n  environment:\n    PAPERMERGE__SECURITY__SECRET_KEY: 12345\n    PAPERMERGE__AUTH__USERNAME: admin\n    PAPERMERGE__AUTH__PASSWORD: admin\n    PAPERMERGE__DATABASE__URL: postgresql://coco:kesha@db:5432/cocodb\n    PAPERMERGE__REDIS__URL: redis://redis:6379/0\n  volumes:\n    - index_db:/core_app/index_db\n    - media:/core_app/media\nservices:\n  web:\n    &lt;&lt;: *common\n    ports:\n     - \"12000:80\"\n    depends_on:\n      db:\n        condition: service_healthy\n      redis:\n        condition: service_healthy\n  worker:\n    &lt;&lt;: *common\n    command: worker\n  redis:\n    image: redis:6\n    healthcheck:\n      test: redis-cli --raw incr ping\n      interval: 5s\n      timeout: 10s\n      retries: 5\n      start_period: 10s\n  db:\n    image: postgres:16.1\n    volumes:\n      - postgres_data:/var/lib/postgresql/data/\n    environment:\n      POSTGRES_PASSWORD: kesha\n      POSTGRES_DB: cocodb\n      POSTGRES_USER: coco\n    healthcheck:\n      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB\n      interval: 5s\n      timeout: 10s\n      retries: 5\n      start_period: 10s\nvolumes:\n  postgres_data:\n  index_db:\n  media:\n</code></pre>"},{"location":"setup/docker-compose/#solr","title":"Solr","text":"<p>By default Papermerge uses Xapian search engine. However, for production environments, full fledged search engine like Solr is recommanded.</p> <pre><code>version: \"3.9\"\n\nx-backend: &amp;common\n  image: papermerge/papermerge:3.1\n  environment:\n    PAPERMERGE__SECURITY__SECRET_KEY: 1234  # top secret\n    PAPERMERGE__AUTH__USERNAME: admin\n    PAPERMERGE__AUTH__PASSWORD: admin\n    PAPERMERGE__DATABASE__URL: postgresql://coco:kesha@db:5432/cocodb\n    PAPERMERGE__REDIS__URL: redis://redis:6379/0\n    PAPERMERGE__SEARCH__URL: solr://solr:8983/pmg-index\n  volumes:\n    - media_root:/core_app/media\n  depends_on:\n    db:\n      condition: service_healthy\n    redis:\n      condition: service_healthy\n\nservices:\n  web:\n    &lt;&lt;: *common\n    ports:\n     - \"12000:80\"\n  worker:\n    &lt;&lt;: *common\n    command: worker\n  redis:\n    image: redis:6\n    healthcheck:\n      test: redis-cli --raw incr ping\n      interval: 5s\n      timeout: 10s\n      retries: 5\n      start_period: 10s\n  solr:\n    image: solr:9.3\n    ports:\n     - \"8983:8983\"\n    volumes:\n      - solr_data:/var/solr\n    command:\n      - solr-precreate\n      - pmg-index\n  db:\n    image: postgres:16.1\n    volumes:\n      - postgres_data:/var/lib/postgresql/data/\n    environment:\n      POSTGRES_PASSWORD: kesha\n      POSTGRES_DB: cocodb\n      POSTGRES_USER: coco\n\n    healthcheck:\n      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB\n      interval: 5s\n      timeout: 10s\n      retries: 5\n      start_period: 10s\n\nvolumes:\n  postgres_data:\n  solr_data:\n  media_root:\n</code></pre>"},{"location":"setup/docker-compose/#mysql-mariadb","title":"MySQL / MariaDB","text":"<p>Here is an example of docker compose setup with MariaDB:</p> <pre><code>version: \"3.9\"\n\nx-backend: &amp;common\n  image: papermerge/papermerge:3.1\n  environment:\n    PAPERMERGE__SECURITY__SECRET_KEY: 1234  # top secret\n    PAPERMERGE__AUTH__USERNAME: admin\n    PAPERMERGE__AUTH__PASSWORD: admin\n    PAPERMERGE__DATABASE__URL: mysql://coco:kesha@db:3306/cocodb\n    PAPERMERGE__REDIS__URL: redis://redis:6379/0\n    PAPERMERGE__SEARCH__URL: solr://solr:8983/pmg-index\n  volumes:\n    - media_root:/core_app/media\n  depends_on:\n    db:\n      condition: service_healthy\n    redis:\n      condition: service_healthy\n\nservices:\n  web:\n    &lt;&lt;: *common\n    ports:\n     - \"12000:80\"\n  worker:\n    &lt;&lt;: *common\n    command: worker\n  redis:\n    image: redis:6\n    healthcheck:\n      test: redis-cli --raw incr ping\n      interval: 5s\n      timeout: 10s\n      retries: 5\n      start_period: 10s\n  solr:\n    image: solr:9.3\n    ports:\n     - \"8983:8983\"\n    volumes:\n      - solr_data:/var/solr\n    command:\n      - solr-precreate\n      - pmg-index\n  db:\n    image: mariadb:11.2\n    volumes:\n      - maria:/var/lib/mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: kesha\n      MYSQL_DATABASE: cocodb\n      MYSQL_USER: coco\n      MYSQL_PASSWORD: kesha\n    ports:\n      - \"3306:3306\"\n    healthcheck:\n      test: mariadb-admin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD\n      interval: 5s\n      timeout: 10s\n      retries: 5\n      start_period: 10s\n\nvolumes:\n  maria:\n  solr_data:\n  media_root:\n</code></pre>"},{"location":"setup/docker-compose/#oauth-20","title":"OAuth 2.0","text":"<p>Papermerge supports OAuth2.0 authentication with Google and Github providers.</p> <p>Here is an example of OAuth2.0 setup with Google provider.</p> <pre><code>version: \"3.9\"\n\nx-backend: &amp;common\n  image: papermerge/papermerge:3.1\n  environment:\n    PAPERMERGE__SECURITY__SECRET_KEY: 1234  # top secret\n    PAPERMERGE__AUTH__USERNAME: admin\n    PAPERMERGE__AUTH__PASSWORD: admin\n    PAPERMERGE__DATABASE__URL: mysql://coco:kesha@db:3306/cocodb\n    PAPERMERGE__REDIS__URL: redis://redis:6379/0\n    PAPERMERGE__SEARCH__URL: solr://solr:8983/pmg-index\n  volumes:\n    - media_root:/core_app/media\n  depends_on:\n    db:\n      condition: service_healthy\n    redis:\n      condition: service_healthy\n\nservices:\n  web:\n    &lt;&lt;: *common\n    environment:\n      PAPERMERGE__AUTH__GOOGLE_CLIENT_SECRET: GOCSPX-edited-of-course\n      PAPERMERGE__AUTH__GOOGLE_CLIENT_ID: 900000999991-edited-of-course.apps.googleusercontent.com\n      PAPERMERGE__AUTH__GOOGLE_AUTHORIZE_URL: https://accounts.google.com/o/oauth2/auth  # fixed\n      PAPERMERGE__AUTH__GOOGLE_REDIRECT_URI: https://demo.trusel.net/google/callback  # replace with your domain\n    ports:\n     - \"12000:80\"\n  worker:\n    &lt;&lt;: *common\n    command: worker\n  redis:\n    image: redis:6\n    healthcheck:\n      test: redis-cli --raw incr ping\n      interval: 5s\n      timeout: 10s\n      retries: 5\n      start_period: 10s\n  solr:\n    image: solr:9.3\n    ports:\n     - \"8983:8983\"\n    volumes:\n      - solr_data:/var/solr\n    command:\n      - solr-precreate\n      - pmg-index\n  db:\n    image: mariadb:11.2\n    volumes:\n      - maria:/var/lib/mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: kesha\n      MYSQL_DATABASE: cocodb\n      MYSQL_USER: coco\n      MYSQL_PASSWORD: kesha\n    ports:\n      - \"3306:3306\"\n    healthcheck:\n      test: mariadb-admin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD\n      interval: 5s\n      timeout: 10s\n      retries: 5\n      start_period: 10s\n\nvolumes:\n  maria:\n  solr_data:\n  media_root:\n</code></pre> <p>Here is an example of OAuth2.0 setup with GitHub provider.</p> <pre><code>version: \"3.9\"\n\nx-backend: &amp;common\n  image: papermerge/papermerge:3.1\n  environment:\n    PAPERMERGE__SECURITY__SECRET_KEY: 1234  # top secret\n    PAPERMERGE__AUTH__USERNAME: admin\n    PAPERMERGE__AUTH__PASSWORD: admin\n    PAPERMERGE__DATABASE__URL: mysql://coco:kesha@db:3306/cocodb\n    PAPERMERGE__REDIS__URL: redis://redis:6379/0\n    PAPERMERGE__SEARCH__URL: solr://solr:8983/pmg-index\n  volumes:\n    - media_root:/core_app/media\n  depends_on:\n    db:\n      condition: service_healthy\n    redis:\n      condition: service_healthy\n\nservices:\n  web:\n    &lt;&lt;: *common\n    environment:\n      PAPERMERGE__AUTH__GITHUB_CLIENT_SECRET: \"GitHub oauth2.0 client secret\"\n      PAPERMERGE__AUTH__GITHUB_CLIENT_ID: \"Github oauth2.0 client ID\"\n      PAPERMERGE__AUTH__GITHUB_AUTHORIZE_URL: \"https://github.com/login/oauth/authorize\"\n      PAPERMERGE__AUTH__GITHUB_REDIRECT_URI: \"&lt;http|https&gt;://&lt;your domain&gt;/github/callback\"\n    ports:\n     - \"12000:80\"\n  worker:\n    &lt;&lt;: *common\n    command: worker\n  redis:\n    image: redis:6\n    healthcheck:\n      test: redis-cli --raw incr ping\n      interval: 5s\n      timeout: 10s\n      retries: 5\n      start_period: 10s\n  solr:\n    image: solr:9.3\n    ports:\n     - \"8983:8983\"\n    volumes:\n      - solr_data:/var/solr\n    command:\n      - solr-precreate\n      - pmg-index\n  db:\n    image: mariadb:11.2\n    volumes:\n      - maria:/var/lib/mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: kesha\n      MYSQL_DATABASE: cocodb\n      MYSQL_USER: coco\n      MYSQL_PASSWORD: kesha\n    ports:\n      - \"3306:3306\"\n    healthcheck:\n      test: mariadb-admin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD\n      interval: 5s\n      timeout: 10s\n      retries: 5\n      start_period: 10s\n\nvolumes:\n  maria:\n  solr_data:\n  media_root:\n</code></pre> <p>For detailed information on authentication check Authentication section.</p>"},{"location":"setup/docker-compose/#ldap","title":"LDAP","text":"<p>Papermerge supports LDAP authentication.</p> <p>Here is an example of LDAP authencation setup:</p> <pre><code>version: \"3.9\"\n\nx-backend: &amp;common\n  image: papermerge/papermerge:3.1\n  environment:\n    PAPERMERGE__SECURITY__SECRET_KEY: 1234  # top secret\n    PAPERMERGE__AUTH__USERNAME: admin\n    PAPERMERGE__AUTH__PASSWORD: admin\n    PAPERMERGE__DATABASE__URL: mysql://coco:kesha@db:3306/cocodb\n    PAPERMERGE__REDIS__URL: redis://redis:6379/0\n    PAPERMERGE__SEARCH__URL: solr://solr:8983/pmg-index\n  volumes:\n    - media_root:/core_app/media\n  depends_on:\n    db:\n      condition: service_healthy\n    redis:\n      condition: service_healthy\n\nservices:\n  web:\n    &lt;&lt;: *common\n    environment:\n      ... # replace here with ldap configs\n    ports:\n     - \"12000:80\"\n  worker:\n    &lt;&lt;: *common\n    command: worker\n  redis:\n    image: redis:6\n    healthcheck:\n      test: redis-cli --raw incr ping\n      interval: 5s\n      timeout: 10s\n      retries: 5\n      start_period: 10s\n  solr:\n    image: solr:9.3\n    ports:\n     - \"8983:8983\"\n    volumes:\n      - solr_data:/var/solr\n    command:\n      - solr-precreate\n      - pmg-index\n  db:\n    image: mariadb:11.2\n    volumes:\n      - maria:/var/lib/mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: kesha\n      MYSQL_DATABASE: cocodb\n      MYSQL_USER: coco\n      MYSQL_PASSWORD: kesha\n    ports:\n      - \"3306:3306\"\n    healthcheck:\n      test: mariadb-admin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD\n      interval: 5s\n      timeout: 10s\n      retries: 5\n      start_period: 10s\n\nvolumes:\n  maria:\n  solr_data:\n  media_root:\n</code></pre> <p>For detailed information on authentication check Authentication section.</p>"},{"location":"setup/docker/","title":"Docker","text":""},{"location":"setup/docker/#web-app","title":"Web App","text":"<p>The only two required environment variables are <code>PAPERMERGE__SECURITY__SECRET_KEY</code> and <code>PAPERMERGE__AUTH__PASSWORD</code>. To start web ui part use following command:</p> <pre><code>docker run -p 12000:80 \\\n    -e PAPERMERGE__SECURITY__SECRET_KEY=abc \\\n    -e PAPERMERGE__AUTH__PASSWORD=admin \\\n    papermerge/papermerge:3.1\n</code></pre> <p>Point your web browser to <code>http://localhost:12000</code> and you will see login screen:</p> <p></p> <p>Credentials are:</p> <ul> <li>username <code>admin</code></li> <li>password <code>admin</code></li> </ul> <p>Note</p> <p>The above <code>docker run</code> starts only web UI part. For complete setup you also need one or multiple workers.</p>"},{"location":"setup/docker/#official-docker-image","title":"Official Docker Image","text":"<p>Official Papermerge docker image is available on docker hub.</p>"},{"location":"setup/docker/#get-docker-image","title":"Get Docker Image","text":"<p>The recommended way to get the Papermerge docker image is via docker pull command:</p> <pre><code>docker pull papermerge/papermerge:3.1\n</code></pre>"},{"location":"setup/docker/#web-app-worker","title":"Web App + Worker","text":"<p>For complete setup you need to start one or multiple workers. Worker is the component which, among other things, performs OCR.</p> <p>Here is minimal docker compose file with web UI and one worker:</p> <pre><code>version: \"3.9\"\n\nx-backend: &amp;common\n  image: papermerge/papermerge:3.1\n  environment:\n      PAPERMERGE__SECURITY__SECRET_KEY: 12345\n      PAPERMERGE__AUTH__USERNAME: admin\n      PAPERMERGE__AUTH__PASSWORD: admin\n      PAPERMERGE__REDIS__URL: redis://redis:6379/0\n  volumes:\n      - data:/db\n      - index_db:/core_app/index_db\n      - media:/core_app/media\nservices:\n  web:\n    &lt;&lt;: *common\n    ports:\n     - \"12000:80\"\n    depends_on:\n      - redis\n  worker:\n    &lt;&lt;: *common\n    command: worker\n  redis:\n    image: redis:6\nvolumes:\n    data:\n    index_db:\n    media:\n</code></pre> <p>With above setup, web app is accessible on  <code>http://localhost:12000</code>.</p>"},{"location":"setup/kubernetes/","title":"Kubernetes","text":"<p>To be added soon...</p>"},{"location":"setup/overview/","title":"Overview","text":""},{"location":"setup/overview/#web-app-and-worker","title":"Web App and Worker","text":"<p>Papermerge consists of one web app and multiple workers (at least one). The web app is the one which you see in your browsers or interact via REST API. The worker (one or multiple) is the part which performs background tasks like OCR, updating search engine index etc.</p>"},{"location":"setup/overview/#database","title":"Database","text":"<p>In order to function Papermerge needs a database, which can be one of following:</p> <ul> <li>SQLite</li> <li>PostgreSQL</li> <li>MySQL (MariaDB)</li> </ul> <p>By default Papermerge uses SQLite.</p>"},{"location":"setup/overview/#search-engine","title":"Search Engine","text":"<p>Papermerge supports multiple search engine backends:</p> <ul> <li>Xapian</li> <li>Apache Solr</li> </ul> <p>Xapian is used by default.</p>"},{"location":"setup/overview/#ocr","title":"OCR","text":"<p>Papermerge uses Tesseract to perform Optical Character Recognition.</p>"},{"location":"setup/requirements/","title":"Requirements","text":""},{"location":"setup/requirements/#software","title":"Software","text":"<p>Papermerge is designed to run on Linux/Unix compatible system.</p> <p>You need to have docker installed, as Papermerge is shipped as docker image. All docker images are stored on docker hub.</p> <p>Make sure that you have docker available:</p> <pre><code>    $ docker --version\n    Docker version 24.0.3, build 3713ee1\n</code></pre>"},{"location":"setup/requirements/#hardware","title":"Hardware","text":"<p>Hardware specification for Papermerge depends on number of documents and users.</p> <p>For one user with 1000-2000 pages a system spec with:</p> <ul> <li>2 CPU at 2.8GHz clock</li> <li>2 GB RAM</li> <li>25 GB Storage</li> </ul> <p>will do just fine.</p> <p>For OCR, Papermerge uses Tesseract. OCR is very CPU intensive operation, thus more CPUs and RAM memory your system has - better. More CPU cores and more powerful the CPUs means OCR will be performed faster.</p> <p>Note<p>GPU is not required as Tesseract runs OCR entirely on your CPU.</p> </p> <p>Testing system for Papermerge has following specs:</p> <ul> <li>Ubuntu 22.04</li> <li>8 Core i7 2.8GHz CPU</li> <li>16 GB RAM</li> <li>50 GB storage</li> </ul>"},{"location":"user/file-formats/","title":"File Formats","text":"<p>Papermerge supports PDF, TIFF, JPEG and PNG file formats.</p> <p>PDF format is called native because Papermerge interals operate as if all documents are PDF.</p> <p>TIFF, JPEG or PNG on the other hand are not native (non-native) formats.</p> <p>The import of native format yields one version document - the PDF itself i.e. orignal version.</p> <p>The import of any non-native formats yields two versions document:</p> <ul> <li>version 1 with non-native file i.e. original file</li> <li>version 2 with PDF file into which non-native format was converted</li> </ul> <p>Note<p>At its core Papermerge code is written to work with PDF files only. All other files (non-natives) are converted, on import, into PDF format.</p> </p>"},{"location":"user/getting-started/","title":"Getting Started","text":"<p>In this part of the documentation we define important concepts used Papermerge parlance. We highly recommend you to read and understand this section.</p>"},{"location":"user/getting-started/#document","title":"Document","text":"<p>For Papermerge a document is anything which is a good candidate for archiving - some piece of information which is not editable but you need to store it for future reference. For example receipts - you don't need to edit receipts or read them everyday, but eventually you will need them for your tax declaration. In this sense - scanned documents, which are usually in PDF, JPEG or TIFF format, are perfect match.</p> <p>If you take a picture of a paper document with your mobile phone - you'll have a file in jpeg format (or maybe png file format). In context of Papermerge that picture of a document (though just a single jpeg file) is a valid one page document.</p> <p>On the other hand, if you take a picture of a flower and upload that jpeg image to Papermerge - the 'document' will be processed. However, that jpeg format flower image is not a document in Papermerge sense.</p> <p></p> <p>Usually office formats with .docx (Microsoft Word), .odt (Libre Office), .txt (plain text) are not good candidates for archiving - as by their nature they are meant to be changed/edit regularly. However, once converted to PDF format (for instance Contract_C2.docx to Contract_C2.pdf) they are full fledged documents in Papermerge sense.</p> <p>Info</p> <p>Papermerge works with four file formats: PDF, TIFF, JPEG and PNG.</p>"},{"location":"user/getting-started/#document-version","title":"Document Version","text":"<p>One document has one or multiple versions. The original document version - is version number 1. For every change applied to the document - a new document version is created with that change applied.</p> <p>When we say \"change applied to a document\" - we mean things like rotate pages, reorder pages or merge two documents.</p> <p>The point of document versions is to keep track of changes applied to the document.</p>"},{"location":"user/getting-started/#folder","title":"Folder","text":"<p>Folder in Papermerge is counterpart of \"folder\" concept used in major computer file manager applications (e.g. Finder in macOS). Folders in Papermerge are, intuitively enough, hierarchical - in other words one folder may contain other folders and/or documents.</p>"},{"location":"user/getting-started/#node","title":"Node","text":"<p>Node is an abstraction of two concepts: document and folder. Every time you read node, you can mentally replace that term with either document or folder and the statement will still hold.</p> <p>Bellow is graphical example of Folder, Document, Document Version relationship:</p> <p></p> <p>Same hierarchy can be illustrated as nodes:</p> <p></p>"},{"location":"user/getting-started/#special-folders","title":"Special Folders","text":"<p>Each user in Papermerge has two special folders: Inbox and Home.</p> <p>Inbox folder is where all incoming documents land first. Home folder is where all user documents are.</p> <p>Special folders are top level folders (they don't have parent folder).</p> <p></p> <p>Note</p> <p>Both <code>Inbox</code> and <code>Home</code> folders are special only by convention; structurally they are just normal folders. Internally their title is actually \".inbox\" and \".home\". By convention special folders start with dot character.</p>"},{"location":"user/getting-started/#ocr","title":"OCR","text":"<p>OCR (Optical Character Recognition) is a technique to extract text information from binary image formats. This technique enables users to:</p> <ul> <li>copy/paste  text from the document's content</li> <li>search documents by document's actual text content</li> </ul> <p>OCR is essential tool (or technique if you will) which helps basically to extract textual information and thus derive useful work-flows (based on document's actual content) with the documents. Papermerge relies on external open source specialized tools like Google's Tesseract OCR</p>"},{"location":"user/getting-started/#tags","title":"Tags","text":"<p>Organizing documents in folders is very common. Thus the idea of keeping your documents in folders doesn't need further introduction. The idea of using tags to organize your documents may be new for you though. Tags are kind of labels. You can associate tags to a document or to a folder. Tags have a color and a name.</p> <p></p> <p>Once tagged, documents can be searched by their tags. Conversely, is it also possible to show all the documents tagged with a particular tag(s).</p> <p>Both tags and folders complement each other and provide you with powerful means to stay organized.</p>"},{"location":"user/getting-started/#page-management","title":"Page Management","text":"<p>Many times scanning documents in bulk yields documents with blank pages; some pages my be out of order, rotated, maybe part of totally different document. Even if you notices these flaws immediately it is time consuming and frustrating to redo scanning process. Papermerge helps you with your scanned documents like no other tool. With Papermerge you can reorder, rotate or even delete pages in case you need to do so.</p> <p></p> <p>There is a separate chapter about page management where you can learn details about this feature.</p>"},{"location":"user/merge-documents/","title":"Merge Documents","text":"<p>Let's first clarify what is meant by documents merging. Merging is the process of combining two documents into one: all pages from the source document are transferred into destination document and then source document is deleted.</p> <p>On the target document, transferred pages can:</p> <ol> <li>entirely replace target pages</li> <li>be appended to the target pages</li> </ol> <p>The rest of this documentation chapter describes how to use Papermerge in case 1. For how to use Papermerge in case 2, see :ref:<code>Page Moving &lt;page_move&gt;</code>.</p>"},{"location":"user/merge-documents/#1-source-pages-replace-target-pages","title":"1. Source pages replace target pages","text":"<p>Figure 1 illustrate this case. Both source (better_scan.pdf) and target (scan_d.pdf) documents have only one version (v1). Both source and target have two pages.</p> <p>In this case merge result is that in scan_d.pdf document there is a new version created (v2) and new version contains only source pages (BS1 and BS2). Previous pages of scan_d.pdf document (D1, D2) are still available in version 1 (v1 in figure) of the document.</p> <p></p> <p>This use case is useful when you scan same document twice and for some reason you want to keep both copies around. Because both copies contain slightly different versions of the same document, it is more practical to keep them as two document versions in one single file. In such case you will avoid duplicate results in search results.</p>"},{"location":"user/merge-documents/#2-source-pages-are-appended-to-the-target-pages","title":"2. Source pages are appended to the target pages","text":"<p>Figure 2 illustrate this case. Both source (better_scan.pdf) and target (scan_d.pdf) documents have only one version (v1). Also, both source and target have two pages.</p> <p>In this case result is that in scan_d.pdf document there is a new version created (v2) and new version contains now four pages: BS1, BS2, D1, D2. Previous version of scan_d.pdf document (v1) has contains two pages: D1 and D2.</p> <p></p> <p>This scenario is special case of 'moving pages' between documents with all pages selected on the source. How to use Papermerge in this scenario is described in detail in Moving Pages section.</p> <p>Important</p> <p>When merging two documents, one of them (source) is deleted. That's why, it is very important that when you merge two documents, you correctly choose which one is the source and which one is the target.</p> <p>Now, that you understand what is meant exactly by \"document merging\", let's see how you can merge document with Papermerge.</p>"},{"location":"user/merge-documents/#dual-panel","title":"Dual Panel","text":"<p>In order to merge two documents in Papermerge you need to open each of them in two panels:</p> <p></p> <p>In one of the panels, the one which you want to be the source, right click the mouse button to open the context menu.</p> <p>Important</p> <p>Merge Documents context menu item will be displayed only if there are no selected pages.</p> <p></p> <p>In Figure 3, notice the direction of the arrow icon just before \"Merge Document\". The arrow icon points from source to the target. In Figure 3, context menu was opened in left panel, this means that document opened in left panel (better_scan.pdf) is the source. On the other hand if we would open context menu in right panel, then the arrow will point from right to left - which also implies that in such case document opened in the right panel would be the source.</p> <p>Click the \"Merge Document\" context menu item. After you confirm the operation, the source document (better_scan.pdf) will be merged with scan_d.pdf.</p> <p></p>"},{"location":"user/ocr/","title":"OCR","text":"<p>OCR is the process which extracts text information from the scanned document and makes them searchable.</p> <p>By default, ocr process is triggered automatically on document file upload. The OCR process status is indicated by little circle next to document's title. When OCR process is completed new document version is created and document becomes searchable.</p>"},{"location":"user/ocr/#default-ocr-language","title":"Default OCR Language","text":"<p>In order to perform OCR on the document you need to indicate beforehand the language of respective document. When you click \"Run OCR\" in document viewer you will need to choose OCR language.</p> <p>When you upload documents, the value of <code>PAPERMERGE__OCR__DEFAULT_LANGUAGE</code> indicates OCR language system will use (if you don't change anything it will use <code>deu</code>, which stands for German).</p> <p>Question</p> <p>Or maybe UI should ask user OCR language on upload as well, some sort of   modal dialog which appears when user drops docs/clicks upload? Or there   should be an UI preference where user can opt which way he/she wants to   indicate default OCR language without being ask on every doc upload?   Open a disscussion on this   topic and let's disscuss it!</p>"},{"location":"user/ocr/#status-indicator","title":"Status Indicator","text":"<p>Papermerge features real time OCR status indicator - this means that you can see document's OCR status updates as they happen (i.e. in real time). The OCR status is displayed by a small circle next to the document's title. The status indicates has following meanings:</p> <ul> <li>gray circle - status is unknown (figure 1)</li> <li>orange still circle - document was scheduled for OCR (figure 2)</li> <li>orange rotating circle - document's OCR process is in progress (figure 3)</li> <li>green check - document's OCR process completed successfully and document is now searchable (figure 4)</li> <li>red cross - document's OCR process failed.</li> </ul> <p> </p>"},{"location":"user/ocr/#ocred-text-layer","title":"OCRed Text Layer","text":"<p>Once OCR process completed successfully a new document version is created - version with OCRed text layer. This version is available for download from the <code>Download</code> dropdown in document view.</p> <p></p> <p>Note</p> <p>Under the hood Papermerge uses awesome OCRmyPDF utility to create   OCRed text layer. Thus, in respect of OCRed text layer, Papermerge acts   like a graphical user interface for OCRmyPDF.</p>"},{"location":"user/ocr/#document-ocred-text","title":"Document OCRed Text","text":"<p>You can view OCRed text of the entire document either from commander or from viewer, in both cases choose \"OCRed Text\" from context menu:</p> <p></p> <p>If you want to see OCRed text of entire document (to be exact - all pages of the last document version) from the viewer - just make sure that no pages are selected:</p> <p></p>"},{"location":"user/ocr/#selected-pages-ocred-text","title":"Selected Pages OCRed Text","text":"<p>In case document has many pages and you are interested in OCRed text of one (or multiple) very specific pages, then select pages first and then from context menu choose \"OCRed Text\" item:</p> <p></p> <p>Note</p> <p>In case there are selected pages, OCRed Text menu item will show you OCRed   text ONLY of the selected pages.</p> <p></p>"},{"location":"user/ocr/#ocr-languages-support","title":"OCR Languages Support","text":"<p>Papermerge uses Tesseract to extract text from scanned documents. Tesseract supports over 130 languages - thus with Papermerge you can have documents in any of those languages.</p>"},{"location":"user/page-management/","title":"Page Management","text":"<p>Many times scanning documents in bulk results in documents with blank pages; some pages maybe out of order or maybe part of totally different document. Even if you notice these problems immediately it is time consuming to redo scanning process. Wouldn't it be nice to fix out of order pages without scanning all docs again?</p> <p>Page management is set of features which helps to fix scanning process errors. In other words you can delete, reorder, rotate, and extract pages within document(s).</p> <p>Every time one of the operations described in this section is applied - a new document version is created. Because of this, the changes you apply on the document like rotate, delete, extract, reorder, do not destroy the document, in other words  page management is non-destructive  process.</p> <p>Note</p> <p>In order perform any of operations described below (delete, reorder, rotate or extract) you need to have Change Permission on respective document. You have automatically granted Change Permission on the documents you uploaded (because you own the documents uploaded by you).</p>"},{"location":"user/page-management/#delete","title":"Delete","text":"<p>You can delete specific pages (for instance blank pages) from the document. Although many scanners have automatic \"remove blank pages\" feature, many times they get confused of what a blank page is. In case your scans end up with undesired blank pages you can easily remove those pages.</p> <p></p> <p>In order to delete a page, you need to select desired page by clicking on it, then <code>Right Click--&gt; Delete Page</code>.</p> <p>Every time you delete one or several pages, document version is incremented by one. For instance if document Invoice-X56.pdf currently has four pages and the document latest version is version 1, then, after deleting one page - document latest version will be 2. Thus document's version 1 has all four pages and document version 2 has three pages:</p> <p></p>"},{"location":"user/page-management/#reorder","title":"Reorder","text":"<p>Out of order pages occur very often during scanning process. Papermerge empowers users to change pages order within the document.</p> <p>For instance, in figure below you can see that pages 2 and 4 are out of place. To correct pages' order use drag 'n drop. For example grab page 2 and drop it in correct position, and then do same thing with page 3:</p> <p></p> <p>For these changes to take effect you need to click 'Apply Changes' button.</p> <p>Warning</p> <p>Document pages reorder will only be saved when you click 'Apply Changes'</p> <p></p> <p>Similarly to deleting pages, every time you save new pages order, document version will be incremented (i.e. advanced by one).</p> <p></p>"},{"location":"user/page-management/#rotate","title":"Rotate","text":"<p>Often scanned pages are upside down or maybe rotated 90\u00b0 (degrees). In order to quickly fix that, select one or multiple pages you want to rotate and then <code>Right Click --&gt; Rotate --&gt; 180\u00b0 CCW</code> (or 90\u00b0 CW, 90\u00b0 CCW depending on your specific case):</p> <p></p> <p>Note</p> <p>CW stand for clockwise. CCW stands for counter-clockwise.</p> <p>Similarly to page deletion and page ordering, every time you rotate a page, document version will be incremented (i.e. advanced by one).</p> <p>Warning</p> <p> After page rotation you have to re-run OCR  for the document. It is because if page was upside down when ingested, the OCR operation won't make sense of it and thus won't be able to extract text (and then index) from that page. After you have manually fixed the page (by correctly rotating it) - OCR will be able to extract and index page's contented.</p>"},{"location":"user/page-management/#move-document-to-document","title":"Move (Document to Document)","text":"<p>You can move one, multiple or even all strayed pages from one document (source) to another (target). If you choose to move all documents from the source - the source will be deleted, because it does not make sense to have \"document with zero pages\".</p> <p>When moving pages between documents you will be prompted to choose between two different move strategies:</p> <ol> <li>Replace target</li> <li>Append to target</li> </ol> <p>The outcome between replace vs append strategies is illustrated below:</p> <p></p> <p></p> <p>The difference is outcome of the B.pdf (target). With replace strategy, the document B.pdf ended up having two pages (which replaced previous ones), while with append strategy the document B.pdf ended up with four pages as source pages were appened to the existing ones.</p> <p>Note</p> <p>What happens if you select all source pages, i.e. when you</p> <p>select A1, B1, B2, A2? In such case - source document (A.pdf) will be    deleted, because it does not make any sense to have a document with zero    pages. For the target document (B.pdf) this case does not make any    difference, as the outcome is always the same.</p> <p>Note</p> <p>Use case when you select all pages and chose \"replace strategy\" has same outcome as merging documents.</p> <p>Now, that \"theory\" is clear, let's move on to the practical part and see Papermerge in action. First of all, note that in Papermerge you can move pages between documents either using context menu or by using drag 'n drop.</p> <p>Tip</p> <p>You can also move pages between documents with REST API as well</p>"},{"location":"user/page-management/#use-context-menu","title":"Use Context Menu","text":"<p>In order to move pages between documents, using context menu:</p> <ol> <li>Make sure both documents are open in left and right panels</li> <li>Select pages you want to move in :ref:<code>thumbnails panel &lt;Thumbnails_Panel&gt;</code> of the source document viewer</li> <li>Use right click to open context menu in source document viewer</li> <li>Choose \"Move\" context menu item</li> </ol> <p>Context menu is dynamic - which means it renders only relevant menu items. If for example you have in one panel opened :ref:<code>document viewer &lt;Viewer&gt;</code> while other panel is in :ref:<code>commander mode &lt;Commander&gt;</code>, then \"there will be \"extract\" menu item instead of \"move\". In other words, \"move\" menu item will be visible only if:</p> <ol> <li>both panels are in :ref:<code>viewer mode &lt;Viewer&gt;</code></li> <li>there is at least one page selected</li> </ol> <p></p> <p>Important<p>The arrow next to the \"Move\" menu item changes direction depending in which panel you invoke context menu - it hints direction of the pages transfer. Arrow icon of the \"Move\" item always points from source to target.</p> </p> <p></p>"},{"location":"user/page-management/#drag-n-drop","title":"Drag 'n Drop","text":"<p>In example illustrated in pictures below there are two documents:</p> <ul> <li>document A - with pages marked as A1, A2, B1, A3</li> <li>document B - with pages B2, B3</li> </ul> <p>During scan page B1 wrongly ended up in document A, although it belongs to document B.</p> <p>Note<p>A page that during the scan ended up in wrong document is called strayed page. In example above, page B1 is strayed page.</p> </p> <p>In order to fix this scanning issue, you need open documents in two panels and then drag 'n drop page B1 from document A (source) to document B (target):</p> <p></p> <p>Note<p>Pages are moved immediately after 'mouse drop' i.e. there is no need to 'click apply button' as in re-order operation</p> </p> <p>Note<p>Both documents' (source and target) version will be incremented by one</p> </p>"},{"location":"user/page-management/#extract-document-to-folder","title":"Extract (Document to Folder)","text":"<p>Page extraction is moving page out of the document as completely new document. It differs from <code>page moving &lt;page_move&gt;</code> because the destination is a folder, not a document.</p> <p>You can extract one or multiple pages at once. Pages can be extracted:</p> <ol> <li>as one document; in this case one document will be created in the target    folder, new document will contain all extracted pages</li> <li>as multiple documents; in this case multiple documents will be created in the    target folder, each new document will have one page</li> </ol> <p>Note that in Papermerge you can extract pages either using context menu or by using drag 'n drop.</p> <p>Tip</p> <p>You can also extract pages by using REST API</p>"},{"location":"user/page-management/#using-context-menu","title":"Using Context Menu","text":"<p>In order to extract pages from the document, using context menu:</p> <ol> <li>Open document in one panel and open target folder in another panel</li> <li>Select pages you want to extract in thumbnails panel of the source document viewer</li> <li>Use right click to open context menu in source document viewer</li> <li>Choose \"Extract\" context menu item</li> </ol> <p>Because of the dynamic nature of the context menu, \"Extract\" menu item will be visible only if all of the following conditions are true:</p> <ol> <li>Two panels are opened</li> <li>One of the panels is in <code>viewer mode</code> while another is in <code>commander mode</code></li> <li>There is at least one page selected</li> </ol> <p></p> <p>After you've clicked \"Extract\", the \"Extract Pages\" modal dialog will prompt you for additional details like title of the newly created document(s) and if you want to extract all pages as you or multiple documents:</p> <p></p> <p>A couple of notes here. First, newly created document will have extension \".pdf\", you cannot change that. Second, if \"Extract each page into separate document\" is checked, each pages will be, obviously enough, extracted as separate one page documents, otherwise all extracted pages will be placed into a single document in the target folder.</p> <p>Note</p> <p>Papermerge will try to make sure that newly created documents feature unique name. Thus if you choose to extract, say, two pages as separate documents, Papermerge will append to the title an UUID number. In case you choose to extract two pages into a single document - no UUID number will be appended. In case you leave \"Title format\" field empty, Papermerge will generate an unique title for you.</p>"},{"location":"user/page-management/#using-drag-n-drop","title":"Using Drag 'n Drop","text":"<p>Let's show how page extraction works by example. Say we have one document - document A - with following pages: A1, A2, B1, B2, A3. What we want to do is to extract pages B1 and B2 into a new document. As mentioned above there are two cases:</p> <ol> <li>Both pages B1 and B2 are extracted into one single new document (two page document)</li> <li>Both pages B1 and B2 are extracted into multiple (new) single page documents.</li> </ol> <p></p> <p>In order to extract pages B1 and B2 into one single new document you need to uncheck 'Extract each page into separate document' checkbox in modal dialog:</p> <p></p> <p>Similarly to other operations document A's (source document) version is incremented by one.</p>"},{"location":"user/page-management/#ocr-data","title":"OCR Data","text":"<p>Do you need re-run OCR after document's page was moved/rotated/extracted/deleted ?</p> <p>In short - no, you don't need to re-run OCR. The only exception is page rotation. Every time you rotate a page in the document, you need to re-run OCR for that document. It actually makes sense, because if page was upside down when document was ingested, the OCR operation won't make much sense of it and thus won't be able to extract any text data from the page. Once you correct that part manually (rotate page), you re-run OCR so that correct text will be extracted and then indexed.</p> <p>Note</p> <p>Generally speaking you don't need to re-run OCR after performing page management operations. The only exception from this rule is page rotation.</p> <p>For longer answer, let's clarify first what OCR data is. OCR data is: text information extracted from the document by OCR and associated with that document. That text information is stored in both database and on filesystem.</p> <p>When one page is moved from one document into another (or when page is deleted), the text associated with source (or target) document changes as well. For example, say document fruits.pdf has three pages: apples, oranges and bananas, i.e each page has only one word page 1 has work apples etc. You can find document fruits.pdf by searching 'apples' (will match first page), 'orages' (will match second page) or bananas (will match last page).</p> <p>After you extract first page (apples) from document fruits.pdf into another document, searching by term 'apples' should not reveal document 'fruits.pdf' - because term/page 'apples' is not part of it anymore.</p> <p>In order to keep text information associated with document fruits.pdf up to date, there are at least two possibilities:</p> <ol> <li>re-run OCR after each extract/delete/move/rotate operation</li> <li>re-use existing OCR and move it/delete it according to the operation</li> </ol> <p>From technical point of view 1. is very easy to implement but very inefficient in terms of computing power. Think that you have 100 pages document and you delete one blank page - what a waste of CPU resources to re-OCR entire document when OCR data is already available!</p> <p>The second possibility (point 2.) is very challenging to implement, but extremely efficient - you need to run OCR on the document only once (maybe twice, in case you decide to fix couple of pages by rotating them).</p> <p>Papermerge decided on 2. in other words, Papermerge reuses already extracted OCR data and updates it accordingly every time you re-order/move/extract/delete pages.</p> <p>The result is that whatever page management operation you perform the search results are always up-to-date without the need to re-OCR the document! As mentioned above the only exception are page rotations.</p> <p>Below is illustrated the case of three page fruits.pdf document with apples/oranges/bananas content. Initially search term 'apples' will reveal fruits.pdf document (from Inbox). After 'apples' page was extracted into separate document (found in Home/My Documents folder) search term 'apples' correctly reveals new document! Notice here that search index is updated instantaneously:</p> <p></p>"},{"location":"user/search/","title":"Search","text":"<p>Papermerge offers an extensive searching mechanism that is designed to allow you to quickly find a document you're looking for.</p> <p>When you search Papermerge for a document, it tries to match this query against your documents. Papermerge will look for matching documents by inspecting their content, title, and tags.</p> <p>Note</p> <p>Papermerge searches only in content of the last version of the document</p> <p>By default, Papermerge returns only documents which contain any of the words typed in the search bar. However, Papermerge also offers additional search syntax if you want to drill down the results further.</p> <p>Matching inexact words:</p> <pre><code>*5951\n</code></pre> <p>Will return document with title: brother_005951.pdf</p> <p>Matching specific tags:</p> <pre><code>tags:paid\n</code></pre> <p>will return documents with tag \"paid\"</p> <p>You can match document with logical expressions:</p> <pre><code>pizza AND salami\n</code></pre> <p>will return all documents containing both words: \"pizza\" and \"salami\".</p> <pre><code>pizza AND (salami OR speciale)\n</code></pre> <p>will return all documents containing either \"pizza\" and \"salami\"; or \"pizza\" and \"speciale\".</p> <p>Note</p> <p>Logical expression must be in capital case, otherwise they will be ignored.</p> <p>Implicit logical expression is \"OR\". In other words, if you search:</p> <pre><code>pizza salami\n</code></pre> <p>is same as you would search with following query:</p> <pre><code>pizza OR salami\n</code></pre> <p>All of these constructs can be combined as you see fit. For example, following search query will return all documents tagged with \"important\" and contain word \"pizza\":</p> <pre><code>pizza AND tags:important\n</code></pre>"},{"location":"user/tags/","title":"Tags","text":"<p>Tags are sort of labels. You can associate tags to a document or to a folder. Tags have a color and a name. Once tagged, documents can be searched by their tags.</p> <p></p>"},{"location":"user/upload-documents/","title":"Upload Documents","text":"<p>There are multiple ways to upload documents to your Papermerge instance: web UI, command line utilities, REST API.</p> <p>The obvious way is via web UI. After briefly explaining how to upload documents from web user interface, this page will dive into more interesting parts: command line utilities and REST API.</p>"},{"location":"user/upload-documents/#web-ui","title":"Web UI","text":"<p>Uploading documents via user interface is the most straightforward method, just click <code>upload</code> button:</p> <p></p> <p>Documents will be uploaded into your current folder. Current folder is considered the one which you currently see as opened in web UI:</p> <p></p> <p>Also, instead of using upload button, you can drag'n drop documents from your desktop file manager into Papermerge's web ui.</p> <p></p> <p>Warning</p> <p>Currently drag 'n drop feature does not work for folders, in other words you can drag 'n drop only documents. If you want to import an folders with entire content preserved - use <code>papermerge-cli</code> described in next paragraph.</p>"},{"location":"user/upload-documents/#command-line","title":"Command Line","text":"<p>You can upload documents and folders from your local filesystem using papermerge-cli command line utility:</p> <pre><code>papermerge-cli import /path/to/local/folder/\n</code></pre> <p>Note that <code>papermerge-cli</code> will import all content of /path/to/local/folder/ directory recursively i.e. it will preserve the structure of local folder in Papermerge as well.</p> <p>You can upload one document by providing path to the document:</p> <pre><code>papermerge-cli import /path/to/document.pdf\n</code></pre> <p>Note</p> <p>By default all imported documents and folders will end up inside user's Inbox folder.</p> <p>For more information about <code>papermerge-cli</code> check papermerge-cli section.</p> <p></p>"},{"location":"user/upload-documents/#rest-api","title":"REST API","text":"<p>For uploading documents you can use directly REST API. You can access REST API swagger schema definition from user menu (upper right corner of the web UI). In order to upload a document there are two steps:</p> <ol> <li>Create document node without file</li> <li>Upload the file for the created node in previous step</li> </ol> <p>For step 1. use <code>POST /nodes/</code> REST API endpoint. For step 2 use <code>POST /documents/&lt;doc-uuid&gt;/upload</code> REST API endpoint, where <code>&lt;doc-uuid&gt;</code> is the ID of the node created in first step.</p>"},{"location":"user/user-interface/","title":"User Interface","text":"<p>Papermerge comes with intuitive user interface (UI) layout. The UI is divided into four areas:</p> <ol> <li>Navigation Menu - contains different views like tags, users, inbox</li> <li>Search Bar - quick search of any document</li> <li>User Menu - contains user preferences, API tokens and other menu items.</li> <li>Commander Panel - or Commander - area for browsing documents and folders</li> </ol> <p></p>"},{"location":"user/user-interface/#dual-panel-mode","title":"Dual Panel Mode","text":"<p>Commander (in figure 1. marked with number 4.) is designed to have similar look and feel of modern desktop file browsers. This is the place where you browse your documents and folders.</p> <p>In order to assist you to quickly move around documents, folders and pages - there is a special mode - dual panel model. In dual panel mode there are two panels displayed side by side. Between two panels documents (as well as folders and pages) can be moved with one simple drag'n drop. Figure below shows how dual panel mode looks like:</p> <p></p> <p>In order to switch to dual panel mode, use Commander's upper right button:</p> <p></p> <p>To switch back to single panel mode, use close button - which is in the upper right corner of one of the panels:</p> <p></p> <p>Note<p>Close button will be displayed only on one of the panels. Although both panels look and feel exactly the same, internally application still distinguishes them as main and secondary one. Main panel is the one which is always visible and secondary panel is the on which opens and closes i.e. the one with \"close button\" in upper right corner.</p> </p>"},{"location":"user/user-interface/#commander","title":"Commander","text":"<p>Commander or Commander Panel is one of the two available panels. Commander is the panel which shows documents and folders - modern web based file browser if you will.</p> <p></p> <p></p>"},{"location":"user/user-interface/#viewer","title":"Viewer","text":"<p>Viewer or Viewer Panel or Document Viewer is one of the two available panels. Viewer is the panel in which document is opened.</p> <p></p> <p>There can be two Viewers opened side by side. This mode (i.e. dual panel mode with a Viewer in each panel) is very handy when it comes to moving pages between documents.</p> <p></p>"},{"location":"user/user-interface/#thumbnails-panel","title":"Thumbnails Panel","text":"<p>Document viewer features a thumbnails panel which can be toggles on and off. Pages can be selected only inside thumbnails panel; also pages can be dragged/dropped only from thumbnails panel.</p> <p></p>"},{"location":"user/user-management/","title":"User Management","text":"<p>Papermerge is multi user system.</p> <p>The most privileged user (which has all permissions) is called <code>superuser</code>. Brand new Papermerge instance ships with one default user - which happens to be <code>superuser</code>. With default user, you can add as many users as you wish.</p> <p>Note</p> <p>You can add multiple <code>superusers</code> as well</p>"},{"location":"user/versions/","title":"Versions","text":"<p>Papermerge is a non-destructive DMS, which means you always have available original document regardless how many transformations (page rotations, deletion, document merges) you apply on the document.</p> <p>Retention of the original is ensured because of document versioning feature. With each extra transformation you apply - a new document version is created.</p> <p> Version 1 (one)  of the uploaded document  is the original file  i.e. document without any changes applied. Original document version is always available, regardless what operation(s) you apply to the document (except deletion of the document itself).</p> <p>Any page management OCR operation on the document will increment (increase by one) its version.</p>"}]}