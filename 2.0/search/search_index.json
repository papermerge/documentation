{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Papermerge DMS","text":"<p>Papermerge is a open source document management system designed to work with scanned documents. It extracts text from your scans (which might be PDF, TIFF, JPEG or PNG), indexes it, and prepares it for full text search. Papermerge provides the look and feel of modern desktop file browsers. It has features like tags, hierarchical folders and automations so that you can efficiently organize your documents.</p> <p></p>"},{"location":"#what-it-does","title":"What It Does","text":"<ul> <li>It extract and indexes text from your documents</li> <li>Provides nice user interface to easily find your documents</li> <li>Augments your documents with tags and metadata</li> <li>Helps you instantly find your documents:<ul> <li>based on extracted text</li> <li>based on metadata</li> <li>based on tags and folders</li> </ul> </li> <li>Helps you fix scanned documents issues</li> </ul>"},{"location":"#what-it-doesnt-do","title":"What It Doesn't Do","text":"<ul> <li>It does not take control of your documents. Documents are stored on   filesystem in a simple and intuitive manner so that you can take snapshot of   your data at any time</li> <li>It does not stay in your way when you make decisions about your data</li> <li>It does not overwrite your original documents</li> </ul>"},{"location":"#right-tool-for-you","title":"Right Tool for You?","text":"<p>To be efficient you always need to choose right tool for the problem. Because Document Management is too generic - I think that a definition of what is a Document in context of this software is needed.</p>"},{"location":"#what-is-a-document","title":"What is a Document?","text":"<p>For Papermerge a document is anything which is a good candidate for archiving - some piece of information which is not editable but you need to store it for future reference. For example receipts are perfect examples - you don't need to read receipts everyday, but eventually you will need them for your tax declaration. In this sense - scanned documents, which are usually in PDF or TIFF format, are perfect match.</p> <p>PDF (Portable Document Format) is de facto standard for storing archived documents. In correct technical terms - it is PDF/A subset. PDF/A differs from PDF by prohibiting features unsuitable for long-term archiving, such as font linking and encryption.</p> <p>Most of the modern office scanners will output scanned files in PDF/A format. This is why, PDF is practically synonymous for document in context of Papermerge.</p> <p>A picture made with your phone of a A4 paper document is regarded by Papermege as full fledged document, even though digitally it is stored as jpeg or png format. You can think of a picture made with a phone (of a document) as a bad quality scan.</p>"},{"location":"#what-is-not-a-document","title":"What is Not a Document?","text":"<p>Out of scope are Office documents (ODT, DOCX, spreadsheets, presentations etc), text files (notes); these files are usually editable i.e. user can alter the content of the document. Any format of alterable type of document is out of scope for Papermerge project.</p> <p>Papermerge is simply not designed to store books. Yes, you can scan a book and import it in Papermerge, but again - this is not what Papermerge was designed for.</p>"},{"location":"settings/","title":"Settings","text":""},{"location":"dev/","title":"Developer's Manual","text":""},{"location":"setup/backup/","title":"Backup","text":"<p>For peace of mind you always need to backup data. There three aspects of full backup:</p> <ul> <li>media directory</li> <li>database</li> <li>application version</li> </ul> <p>If all you want is to just to ensure safe copy of you documents then all you need to do is to backup media directory. If you want to create full snapshot (i.e you want to be able to restore full application state from specific moment in past) then you need media directory backup + database backup + Papermerge version of that specific moment in time.</p>"},{"location":"setup/backup/#media-directory","title":"Media Directory","text":"<p>Media directory is place where Papermerge application saves all your original documents and their derivatives (extracted text, images etc). By backing up your media directory - you ensure your documents are safe.</p> <p>Media directory is configured with :ref:<code>media_dir</code> setting. By default it is a folder named \"media\" in of same directory where papermerge project was cloned.</p> <p>Note</p> <p><code>media_dir</code> has two subfolders docs and results. :ref:<code>media_dir</code>/docs is place where original documents are uploaded - it is the location you want to ensure is regularly backed up. Media directory configuration is pure Django webframework thing; in Django it is called MEDIA_ROOT</p> <p>Note</p> <p>Papermerge never overwrites or renames original uploads!, in that sense, Papermerge is non-destructive :ref:<code>dms</code>. Every time you perform changes on document, like :ref:<code>moving pages around &lt;page_management&gt;</code> a new document version is created, thus keeping original document version intact.</p>"},{"location":"setup/backup/#database","title":"Database","text":"<p>Another important part of whole backup picture - is backing up your Papermerge database. In database, Papermerge stores information like user related information, documents' metadata, documents' tags etc.</p> <p>Note</p> <p>Uploaded documents are NOT stored in database! Uploaded files are stored (by default) on local filesystem. In general, binary files are never stored in databases.</p> <p>Basically with database backup you can restore \"the state\" of Papermerge application.</p>"},{"location":"setup/backup/#application-version","title":"Application Version","text":"<p>If you want to restore Papermerge backups you need to know for what application version that backup is. This is why it is a good idea to append Papermerge application version to your backup archives.</p>"},{"location":"setup/backup/#backup-utility","title":"Backup Utility","text":"<p>Papermerge is shipped with backup command line utility. You can run it from project current directory:</p> <pre><code>./manage.py backup\n</code></pre> <p>That command will backup all your documents with preserved directory structure (it will backup documents of all users).</p> <p>Note</p> <p>provided backup utility does not backup tags and metadata information.</p> <p>In order to restore backup:</p> <pre><code>./manage.py restore &lt;path-to-tar-file&gt;\n</code></pre>"},{"location":"setup/docker/","title":"Docker","text":"<p>Docker is a widespread containerization technology. With docker you can start in almost no time pretty complex configuration setups. There two popular docker images for Papermerge:</p> <ol> <li>Official docker image shipped within Papermerge repository</li> <li>Docker image provided by linuxserver.io</li> </ol>"},{"location":"setup/docker/#linuxserverio-image","title":"LinuxServer.io Image","text":"<p>LinuxServer.io provides a high quality docker image for Papermerge.</p> <p></p> <p>For how to install Docker image provided by linuxserver.io please refer to their documentation. For docker image specific issues please use Papermerge docker image repository provided by Linux Server team.</p>"},{"location":"setup/docker/#official-image","title":"Official Image","text":"<p>Docker files to build official docker image are shipped within Papermerge repository. In following guide is explained how you can build, run and troubleshoot official docker images with docker compose.</p> <p>You will need <code>git</code>, <code>docker</code> and <code>docker-compose</code> installed.</p> <ol> <li>Install Docker</li> <li>Install docker-compose</li> <li>Clone Papermerge Repository:</li> </ol> <pre><code>$ git clone https://github.com/ciur/papermerge papermerge-proj\n</code></pre> <ol> <li>Run docker compose command (which will pull images from DockerHub):</li> </ol> <pre><code>$ cd papermerge-proj/docker\n$ docker-compose up -d\n</code></pre> <p>This will pull and start the necessary containers. If you wish, you can use <code>docker-compose -f docker-compose-dev.yml up --build -d</code> command instead to build local images.</p> <p>Check if services are up and running:</p> <pre><code>$ docker-compose ps\n</code></pre> <p>Papermerge Web Service is available at <code>http://localhost:8000</code> For initial sign in use:</p> <ul> <li>URL: http://localhost:8000</li> <li>username: admin</li> <li>password: admin</li> </ul> <p>You can check logs of each service with:</p> <pre><code>$ docker-compose logs worker\n$ docker-compose logs app\n$ docker-compose logs db\n</code></pre>"},{"location":"setup/docker/#main-app-worker-or-both","title":"Main App, Worker or Both?","text":"<p>The command <code>docker-compose up</code> starts three containers:</p> <ul> <li>main app (exact container name is papermerge_app)</li> <li>worker (exact container name is papermerge_worker)</li> <li>postgres_db</li> </ul> <p>By default, both <code>main app</code> and <code>worker</code> container will have their own copy of <code>papermerge.conf.py</code>. In case you want to change/adjust <code>papermerge.conf.py</code> you need to take into account for whom that configuration applies. All settings have in their description a field context with one of three values:</p> <ol> <li>main app</li> <li>worker</li> <li>main app, worker</li> </ol> <p>In first and second cases configuration needs to be changed only on main app or worker respectively. When context field states <code>main app, worker</code> - it means that respective configuration variable must be changed on both main app AND worker to function properly.</p>"},{"location":"setup/docker/#configuration-changes-in-docker-container","title":"Configuration Changes in Docker Container","text":"<p>Here is how you can apply configuration changes on the running docker containers. First, make sure docker containers are up and running:</p> <pre><code>$ docker ps\n\nCONTAINER ID        IMAGE                             COMMAND                  CREATED              STATUS              PORTS                    NAMES\n3018d5fc00cf        eugenci/papermerge-worker:1.4.3   \"/opt/app/startup.sh\"    4 seconds ago        Up 3 seconds                                 papermerge_worker\n3e554df78f5d        eugenci/papermerge:1.4.3          \"/opt/app/startup.sh\"    About a minute ago   Up 2 seconds        0.0.0.0:8000-&gt;8000/tcp   papermerge_app\nba160197ff8c        postgres:12.3                     \"docker-entrypoint.s\u2026\"   22 hours ago         Up 3 seconds        5432/tcp                 postgres_db\n</code></pre> <p>Then, login to running docker of e.g. worker container. In example above CONTAINER ID of the worker is 3018d5fc00cf:</p> <pre><code>\n$ docker exec -it 3018d5fc00cf /bin/bash\nwww@3018d5fc00cf:~$ whoami\nwww\nwww@3018d5fc00cf:~$ pwd\n/opt/app\nwww@3018d5fc00cf:~$ cat papermerge.conf.py\n\nDBUSER = \"***\"\nDBPASS = \"***\"\nDBHOST = \"***\"\nDBNAME = \"***\"\n\nMEDIA_DIR = \"/opt/media\"\nSTATIC_DIR = \"/opt/static\"\nMEDIA_URL = \"/media/\"\nSTATIC_URL = \"/static/\"\n\nOCR_DEFAULT_LANGUAGE = \"deu\"\n\nOCR_LANGUAGES = {\n    \"deu\": \"Deutsch\",\n    \"spa\": \"Spanish\",\n}\n</code></pre> <p>If you want to add English as additional language and make it default ocr language. I need to change <code>OCR_LANGUAGES</code> and <code>OCR_DEFAULT_LANGUAGE</code> as follows:</p> <pre><code>OCR_DEFAULT_LANGUAGE = \"eng\"\n\nOCR_LANGUAGES = {\n    \"eng\": \"English\",\n    \"deu\": \"Deutsch\",\n    \"spa\": \"Spanish\",\n}\n</code></pre> <p>Note that you don't need to install tesseract's English language pack as it is already part of the worker image:</p> <pre><code>www@3018d5fc00cf:~$ tesseract --list-langs\n\nList of available languages (5):\ndeu\neng\nfra\nosd\nspa\n</code></pre> <p>In both <code>ocr_languages</code> and <code>ocr_default_language</code> settings, there is a line mentioning \"context: main app, worker\" - it means that you need to change these settings in both worker and main app. So, in next step, change <code>OCR_LANGUAGES</code> and <code>OCR_DEFAULT_LANGUAGE</code> in main app as well:</p> <pre><code>$ docker ps\nCONTAINER ID        IMAGE                             COMMAND                  CREATED             STATUS              PORTS                    NAMES\n3018d5fc00cf        eugenci/papermerge-worker:1.4.3   \"/opt/app/startup.sh\"    16 minutes ago      Up 16 minutes                                papermerge_worker\n3e554df78f5d        eugenci/papermerge:1.4.3          \"/opt/app/startup.sh\"    18 minutes ago      Up 16 minutes       0.0.0.0:8000-&gt;8000/tcp   papermerge_app\nba160197ff8c        postgres:12.3                     \"docker-entrypoint.s\u2026\"   23 hours ago        Up 16 minutes       5432/tcp                 postgres_db\n\n$ docker exec -it 3e554df78f5d /bin/bash\n# same changes as for worker container\n# cat papermerge.conf.py\n# etc etc\n</code></pre> <p>Restart containers. Restarting containers will preserve changes you made to papermerge.conf.py.</p>"},{"location":"setup/downloading/","title":"Downloading","text":"<p>The source is currently only available via GitHub. You can either clone it with <code>git</code>:</p> <pre><code>git clone  --depth 1 --branch v1.5.5 https://github.com/ciur/papermerge.git\n</code></pre> <p>Notice <code>--branch</code> option. Always clone from latest stable release branch. See all available stable releases here.</p> <p>Note</p> <p>Master branch is used for development.</p> <p>or just download the tarball for latest stable release:</p> <pre><code>wget https://github.com/ciur/papermerge/archive/v1.5.5.zip\n</code></pre>"},{"location":"setup/downloading/#papermerge-core","title":"Papermerge-Core","text":"<p>Note</p> <p>Below information will be interesting for software developers</p> <p>The GitHub repository mentioned above is the Papermerge's Django project. A good way to think about (any) Django project is a as a collection of reuseable apps plus project specific configurations. The above mentioned repository contains mostly configurations, unit tests and references for further dependencies. If you will look for actual application code - you won't find it there. Instead, the most important part, the heart of it so to speak, was extracted into separate reusable django app called Papermerge Core.</p> <p>If you want learn in detail Papermerge's source code you will need to check Papermerge Core repository as well.</p>"},{"location":"setup/installation/","title":"Installation","text":"<p>If you follow this document and still have troubles, please open an issue on GitHub so I can fill in the gaps.</p> <p>This guide is split into two parts: short one and very detailed one. Short version is meant for people who are comfortable with development tools like Python, Django, pip, git or even gcc. In this case I will skip most of details as they will sound boring for such persons.</p> <p>Detailed is for people who probably heard of Python - as programming language - but do not have any experience working with it. Any form of prior programming (in ruby, perl, java, C/C++) experience will help you to grasp the concepts quicker.</p> <p>In both versions of this guide you need to know what is a command line terminal and how to work with it. In general Papermerge is a Linux/Unix based software. In this guide I will use Ubuntu 20.04 as example, but this instructions can be adopted easily for any Linux distribution.</p>"},{"location":"setup/installation/#short-version","title":"Short Version","text":"<p>First download the source code. In this guide we clone latest stable version 1.5.5 into folder PapermergeDMS (located in home folder):</p> <pre><code>git clone --branch v1.5.5 https://github.com/ciur/papermerge.git  PapermergeDMS\n</code></pre> <ol> <li>Install required Ubuntu 20.04 LTS deb packages:</li> </ol> <pre><code>  sudo apt install build-essential \\\n    python3-pip \\\n    python3-venv \\\n    git \\\n    imagemagick \\\n    poppler-utils \\\n    pdftk \\\n    tesseract-ocr \\\n    tesseract-ocr-eng \\\n    tesseract-ocr-deu \\\n    tesseract-ocr-fra \\\n    tesseract-ocr-spa\n</code></pre> <ol> <li>Create python virutal environment and activate it:</li> </ol> <pre><code>  cd ~/PapermergeDMS\n  python3 -m venv .venv --system-site-packages\n  source .venv/bin/activate\n</code></pre> <p>Alternatively you can create python virtual environment with command:</p> <pre><code>  virtualenv .venv -p python3.7\n</code></pre> <p>Advantage of last command is that you can specify exact python version. Papermerge requires python version &gt;= 3.7</p> <ol> <li>Install necessary dependencies:</li> </ol> <pre><code>pip3 install -r requirements/base.txt\n</code></pre> <ol> <li>Initialize SQLite database with:</li> </ol> <pre><code>  ./manage.py migrate\n</code></pre> <ol> <li>Create a user for Papermerge instance:</li> </ol> <pre><code>./manage.py createsuperuser\n</code></pre> <ol> <li>Start webserver with:</li> </ol> <pre><code>  ./manage.py runserver &lt;IP&gt;:&lt;PORT&gt;\n</code></pre> <p>If no specific IP or PORT is given, the default is 127.0.0.1:8000 also known as http://localhost:8000/.</p> <ol> <li>In a separate window, change to the project's root directory again, but this time, you should start the worker script with:</li> </ol> <pre><code>  ./manage.py worker\n</code></pre>"},{"location":"setup/installation/#detailed-version","title":"Detailed Version","text":""},{"location":"setup/installation/#step-1-python-and-friends","title":"Step 1 - Python and Friends","text":"<p>Papermerge is written in Python. First thing you need to make sure python interpreter is installed. Ubuntu 20.04 comes with python interpreter already installed. However, the command to invoke python interpreter is <code>python3</code>:</p> <pre><code>    $ python3 --version\n    Python 3.8.2\n</code></pre> <p>Note</p> <p>Python community now transitions from python2 (which is not maintained anymore) to python3. This is why in many Linux distributions you can access python interpreter either with <code>python</code> command or with <code>python3</code> command.</p> <p>Warning<p>Make sure your python is at least version 3.7</p> </p> <p>A close python's friend is pip command. pip is python's package manager. Similar as with python interpreter story - there might be either pip or <code>pip3</code> - latter is specifically for python version 3. We will use pip3:</p> <pre><code>  sudo apt install python3-pip\n</code></pre> <p>Make sure it was installed:</p> <pre><code>  pip3 --version\n</code></pre> <pre><code>  pip 20.0.2 from /usr/lib/python3/dist-packages/pip (python 3.8)\n</code></pre> <p>Another package which you need to install is <code>python3-venv</code>. This one will be used in Step 2  we'll learn and setup python virtual environment:</p> <pre><code>  sudo apt install python3-venv\n</code></pre> <p>Although Papermerge is written in python, it uses some special python modules which are compiled from C sources and used in binary form. This means that you need gcc compiler installed as well.</p> <p>In Ubuntu 20.04, <code>gcc</code> is available via <code>built-essential</code> package:</p> <pre><code>  sudo apt install build-essential\n</code></pre> <p>Double check that <code>gcc</code> was installed:</p> <pre><code>    $ gcc --version\n    gcc (Ubuntu 9.3.0-10ubuntu2) 9.3.0\n    Copyright (C) 2019 Free Software Foundation, Inc.\n    This is free software; see the source for copying conditions.  There is NO\n    warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n</code></pre> <p>Ok, great! We have to install one more utility - <code>git</code>. Strictly speaking, you don't need <code>git</code>, because you can download the tarball and unzip (or untar or extract) sources. But let's stick with git:</p> <pre><code>sudo apt install git\n</code></pre> <p>Double check that <code>git</code> was installed:</p> <pre><code>$ git --version\n  git version 2.25.1\n</code></pre> <p>And now clone the latest stable version of Papermerge directly from GitHub repository:</p> <pre><code>git clone --branch v1.5.5 https://github.com/ciur/papermerge.git  PapermergeDMS\n</code></pre> <p>Note</p> <p>As of writing this - latest stable version of Papermerge is 1.5.5, thus the argument <code>--branch</code> with respective version. Also, notice that repository was cloned inside folder named PapermergeDMS, you can choose whatever title for that folder suites you.</p> <p>From now on, I will refer to PapermergeDMS folder as project root or top level folder of the project</p>"},{"location":"setup/installation/#step-2-python-virtual-environment","title":"Step 2 - Python Virtual Environment","text":"<p>Change directory to project's root (folder where you cloned/extracted sources):</p> <pre><code>cd PapermergeDMS\n</code></pre> <p>Our goal in this step is to install python dependencies - like Django for example. Most important dependencies - without which project won't start - are listed in <code>requirements/base.txt</code> (relative to project's root).</p> <p>The command to do that is as simple as <code>pip install -r requirements/base.txt</code> - but please don't rush to type it yet. We need to clarify the concept of python virtual environment first.</p> <p>If you simply type <code>pip insall -r requirements/base.txt</code> - it will install packages system-wide. A better approach is to install dependencies per project. So, the place designated for python packages specific for this project is called a virtual environment. Let's create a python virtual environment and name it <code>.venv</code>:</p> <pre><code>python3 -m venv .venv --system-site-packages\n</code></pre> <p>Note</p> <p>For virtual environment you can choose whatever name you want. For example you can choose to name your virtual environment py37, in that case command will be <code>python3 -m venv py37</code>. However, I chose .venv because in Unix/Linux dotted folders have special meaning - they are hidden so to speak.</p> <p>Note</p> <p><code>--system-site-packages</code> is necessary, it will install a package called <code>wheel</code>. Without <code>wheel</code> package, pip install later will issue warning.</p> <p>Alternatively you can create python virtual environment with following command:</p> <pre><code>virtualenv .venv -p python3.7\n</code></pre> <p>Advantage of last command is that it specifies exact python version.</p> <p>Note</p> <p>Papermerge requires python version &gt;= 3.7</p> <p>Next we need to activate virtual environment:</p> <pre><code>source .venv/bin/activate\n</code></pre> <p>Terminal's prompt (bash - in Ubuntu) will change to indicate that python virtual environment is active.</p> <p></p> <p>Note</p> <p>Python virtual environment is just a directory where python packages will be installed. Activating python environment is basically changing your current <code>PATH</code> variable - this is exactly what <code>source .venv/bin/activate</code> command does. If you will run <code>echo $PATH</code> you will notice that <code>PapermergeDMS/.venv/bin</code> is first in path, this means that python interpreter first of all will look up for its dependencies there.</p> <p>And now, with python virtual environment active, let's install Papermerge dependencies:</p> <pre><code>source .venv/bin/activate\n</code></pre> <pre><code>pip3 install -r requirements/base.txt\n</code></pre> <p>At this point, all python packages were installed inside directory <code>.venv/lib/python3.8/site-packages</code> and that directory is first one in your path.</p>"},{"location":"setup/installation/#step-3-manage-command","title":"Step 3 - Manage Command","text":"<p>Papermerge is based on Django Web Framework. Django provides a <code>manage.py</code> script which is used to run all project related commands. <code>manage.py</code> script is located in project's root directory.</p> <p>First let's run migrations:</p> <pre><code>./manage.py migrate\n</code></pre> <p>Note</p> <p>At this point you will see warnings about missing binary dependencies. We deal with them little bit later when we will discuss <code>./manage.py check</code> command.</p> <p>run migrations - in django's jargon means that you prepare the database. By default Papermerge (as any Django based project) uses sqlite database - which is stored in a single file. <code>./manage.py migrate</code> command will create that file (it is called db.sqlite3 and is in project's root directory) and create database schema for the project.</p> <p>We are not ready yet, but at this point, you can built-in web server and access login screen:</p> <pre><code>./manage.py runserver\n</code></pre> <p><code>runserver</code> command will start web server on port <code>8000</code>. You can access login screen via any web browser by pointing it to <code>http://localhost:8000/</code></p> <p></p> <p>But as I mentioned, we are not ready yet. First of all, when you run <code>./manage.py runserver</code> command you probably noticed couple of warnings. To see if all binary dependencies were installed run following command:</p> <pre><code>./manage.py check\n</code></pre> <p>On freshly installed Ubuntu 20.04 LTS you will see following warnings:</p> <pre><code>    System check identified some issues:\n\n    WARNINGS:\n    ?: Papermerge can't find convert. Without it, image resizing is not possible.\n            HINT: Either it's not in your PATH or it's not installed.\n    ?: Papermerge can't find identify. Without it, it is not possible to count pages in TIFF.\n            HINT: Either it's not in your PATH or it's not installed.\n    ?: Papermerge can't find tesseract. Without it, OCR of the documents is impossible.\n            HINT: Either it's not in your PATH or it's not installed.\n    ?: papermerge.conf.py file was found. Following locations attempted /etc/papermerge.conf.py, papermerge.conf.py\n            HINT: Create one of those files or point PAPERMERGE_CONFIG environment name to it.\n\n    System check identified 5 issues (0 silenced).\n</code></pre> <p>This means that you need to install all above dependencies. Let's install all of them in one shot:</p> <pre><code>sudo apt install imagemagick \\\n    poppler-utils \\\n    tesseract-ocr \\\n    tesseract-ocr-eng \\\n    tesseract-ocr-deu \\\n    tesseract-ocr-fra \\\n    tesseract-ocr-spa\n</code></pre> <p>When installation is complete, run check again:</p> <pre><code>./manage.py check\n</code></pre> <pre><code>    System check identified some issues:\n\n    WARNINGS:\n    ?: papermerge.conf.py file was found. Following locations attempted /etc/papermerge.conf.py, papermerge.conf.py\n            HINT: Create one of those files or point PAPERMERGE_CONFIG environment name to it.\n\n    System check identified 1 issue (0 silenced).\n</code></pre> <p>To silence last warning, just create an empty <code>papermerge.conf.py</code> file in project's root, we will turn our attention to that file little bit later:</p> <pre><code>touch papermerge.conf.py\n</code></pre>"},{"location":"setup/installation/#step-4-superuser","title":"Step 4 - Superuser","text":"<p>It's time to create administrative (superuser) user for your Papermerge instance:</p> <pre><code>./manage.py createsuperuser\n</code></pre> <p>The username and password you will type above you will use as login credentials. So, start server again (in case it is not running):</p> <pre><code>./manage.py runserver\n</code></pre> <p>Point your web browser to <code>http://localhost:8000</code> and use superuser's username/password to login.</p>"},{"location":"setup/installation/#step-5-worker","title":"Step 5 - Worker","text":"<p>In a separate window, change to the project's root directory again, but this time, you should start the worker with <code>./manage.py worker</code>. Remember to activate python virtual environment first:</p> <pre><code>$ cd ~/PapermergeDMS\n$ source .venv/bin/activate\n$ ./manage.py worker\n</code></pre> <p>Worker is the part which performs ocr process. For correct function of Papermerge you must have both parts running:</p> <ul> <li>main app - the one which you start with <code>./manage.py runserver</code></li> <li>worker - the one which you start with <code>./manage.py worker</code></li> </ul> <p>Now, you can start uploading documents. Remember that only PDF, TIFF, jpeg and png :ref:<code>file_formats</code> are supported.</p> <p></p>"},{"location":"setup/installation/#step-6-configurations","title":"Step 6 - Configurations","text":"<p>By default, you don't need configuration <code>papermerge.conf.py</code> file. However, if there is no configuration file - Papermerge will issue a warning. In one of previous steps we created an empty configuration file:</p> <pre><code>    $ cd ~/PapermergeDMS\n    $ touch papermerge.conf.py # it is empty now\n</code></pre> <p>Note</p> <p>What is the purpose of empty configuration file? It has one - it raises awareness of administrator that such file exists. The logic is following - if administrator created papermerge.conf.py =&gt; Papermerge application immediately concludes admin is aware of such file and silence the warning message. Again - it is absolutely OK to leave papermerge.conf.py file empty.</p> <p>By default, in language dropdown menu, two languages will be displayed German and English. You can change that with following configuration:</p> <pre><code>    OCR_LANGUAGES = {\n        'eng': 'English',\n        'deu': 'Deutsch',\n        'spa': 'Espa\u00f1ol',\n        'fra': 'Fran\u00e7ais'\n    }\n</code></pre> <p>Now four languages will be displayed in language dropdown.</p> <p>Note</p> <p>In previous steps we installed english, spanish, french and german tesseract language packs (packages named tesseract-ocr-eng, tesseract-ocr-deu, tesseract-ocr-fra, tesseract-ocr-spa). For each language you want to ocr you need to have tesseract language pack installed.</p> <p>Learn more Papermerge configurations in settings</p>"},{"location":"setup/installation/#whats-next","title":"What's Next?","text":"<p>Once you\u2019ve tested things and are happy with the work flow, you should secure the installation and automate the process of starting the webserver and worker. server configurations explains different configuration scenarios of how you can make your bare metal setup - more stable.</p>"},{"location":"setup/requirements/","title":"Requirements","text":"<p>Papermerge is web based application. As with any web based application it can be accessed and used from any modern web browser, like Mozilla Firefox, Chrome, Edge, or Safari.</p> <p>Note</p> <p>To use Papermerge all you need is just a modern web browser. Papermerge can be accessed and used from any operating system (provided a web browser). It can be accessed via web browsers from Desktop computers, tablets or mobile phones.</p> <p>Like a typical web application it runs on server-side Linux or Unix-like computer. Thus, if you want to deploy and run Papermerge on your own, you need a Linux/Unix compatible operating system.</p> <p>Note</p> <p>To deploy Papermerge you need a Linux or Unix-like operating system.</p> <p>Following installation guide explains how to install and configure Papermerge on Ubuntu or Debian based Linux computer. With minor adjustments you must be able to successfully install and run Papermerge on any flavor of modern Linux (or Unix) computer.</p>"},{"location":"setup/requirements/#software-requirements","title":"Software Requirements","text":"<p>In order to successfully deploy Papermerge you need following software:</p> <ul> <li>Python &gt;= 3.7</li> <li>Django &gt;= 3.1</li> <li>Tesseract</li> <li>Imagemagick</li> <li>Poppler - PDF operations</li> </ul>"},{"location":"setup/requirements/#python","title":"Python","text":"<p>Papermerge (server side) is written in Python programming language. The minimum Python version required is 3.7.</p>"},{"location":"setup/requirements/#django","title":"Django","text":"<p>Papermerge uses Django Web Framework for its web facing components. The minimum required version for Django is 3.1. Generally speaking the fact that Papermerge is written in Django is not important for setup. You won't need to worry about exact version of Django (or other internal python libraries on which Papermerge depends) required as this details are conveniently covered by package management tools like <code>pip</code>.</p>"},{"location":"setup/requirements/#imagemagick","title":"Imagemagick","text":"<p>Papermerge uses Imagemagick to convert between images format. You will need to make sure you have image magic installed.</p>"},{"location":"setup/requirements/#poppler","title":"Poppler","text":"<p>More exactly poppler utils are used. For exampple pdfinfo command line utility is used to find out number of page in PDF document.</p>"},{"location":"setup/requirements/#tesseract","title":"Tesseract","text":"<p>If you never heard of [Tesseract software] (https://en.wikipedia.org/wiki/Tesseract_(software)) - it is google's open source Optical Character Recognition software.  It extracts text from images. It works fantastically well for wide range of human languages.</p> <p>In addition to the above, there are a number of Python requirements, all of which are listed in a file called <code>requirements/base.txt</code> in the project root directory.</p>"},{"location":"setup/requirements/#hardware-requirements","title":"Hardware Requirements","text":"<p>Papermerge can run a single or multiple hosts (computers). OCR operations are performed by a component called worker. There can be one or more workers. For more efficient setups worker(s) should run on separate computer(s). The exact number of papermerge workers depends on your documents volume.</p>"},{"location":"setup/requirements/#single-host","title":"Single Host","text":"<p>On single host, both web component and worker components run on same computer.</p> <p>The minimum hardware requirements in this case are:</p> <ul> <li>1 GHz CPU</li> <li>1 GB RAM</li> <li>25 GB disk space</li> </ul> <p>Note</p> <p>Please keep in mind that Papermerge uses Tesseract for optical character recognition (OCR) operations. OCR is very CPU intense task. The rule here is simple - more powerful CPU and more RAM - better! A more powerful CPU (+ more RAM) will be able to complete OCR operations faster.</p>"},{"location":"setup/requirements/#multiple-hosts","title":"Multiple Hosts","text":"<p>In multiple hosts scenarios, the web component (i.e. the web application) requires less resources:</p> <ul> <li>900 MHz CPU</li> <li>512 MB RAM</li> <li>15 GB disk space</li> </ul> <p>Minimum requirements for 1 worker are:</p> <ul> <li>1 GHz CPU</li> <li>1 GB RAM</li> <li>25 GB disk space</li> </ul>"},{"location":"setup/server_configuration/","title":"Server Configurations","text":"<p>The default is to use Django\u2019s development server provided by <code>./manage.py runserver</code> command, as that\u2019s easy and does the job well enough on a home network. However it is heavily discouraged to use it for more than that.</p> <p>If you want to do things right you should use a real webserver capable of handling more than one thread. You will also have to let the webserver serve the static files (CSS, JavaScript) from the directory configured in :ref:<code>static_dir</code>. The default static files directory is <code>static</code>.</p> <p>For that you need to activate your virtual environment and collect the static files with the command:</p> <pre><code>./manage.py collectstatic\n</code></pre> <p>Setting up a web server can sound daunting for folks who don't normally do that kind of thing. This guide will help you walk through the configuration for Apache or Nginx on Linux and OSX.</p>"},{"location":"setup/server_configuration/#apache","title":"Apache","text":"<p>The most common setup for Papermerge on a linux server is to use Apache, so if you're not sure what to pick, Apache might be the best bet, as it's free, easy to configure, and well documented.</p> <p>In order use apache web server with Django (web framework used by Papermerge) you need to install so called module mod_wsg</p>"},{"location":"setup/server_configuration/#step-1-install-apache-web-server","title":"Step 1 - Install Apache Web Server","text":"<p>On Ubuntu 20.04 LTS you install apache web server with following command:</p> <pre><code>sudo apt install apache2\n</code></pre>"},{"location":"setup/server_configuration/#step-2-get-mod_wsgi","title":"Step 2 - Get mod_wsgi","text":"<p>Get latest release of <code>mod_wsgi</code> from here. Extract archive:</p> <pre><code>unzip mod_wsgi-4.7.1\ncd mod_wsgi-4.7.1\n</code></pre>"},{"location":"setup/server_configuration/#step-3-build-install-mod_wsgi","title":"Step 3 - Build &amp; Install mod_wsgi","text":"<p>In order to build mod_wsgi on Ubuntu Linux, you need three things:</p> <ul> <li><code>build-essential</code> ubuntu package with gcc compiler and friends</li> <li><code>apache2-dev</code> package</li> <li><code>python interpreter</code> from your papermerge virtual environment</li> </ul> <p>Let's first install required packages:</p> <pre><code>sudo apt install build-essential apache2-dev\n</code></pre> <p>Next, activate your Papermerge virtual environment (python virtual environment):</p> <pre><code>source /opt/papermerge/.venv/bin/activate\n</code></pre> <p>Warning</p> <p>Activating python virtual environment is very important step. Because when compilying mod_wsgi it must find in $PATH python interpreter located in same virtual environment with other python dependencies.</p> <p>Switch to extracted directory mod_wsgi-4.7.1 and run following commands:</p> <pre><code>$ ./configure\n$ make\n$ sudo make install\n</code></pre> <p>On Ubuntu 20.04 LTS <code>sudo make install</code> command will copy <code>mod_wsgi.so</code> binary file to <code>/usr/lib/apache2/modules/mod_wsgi.so</code></p> <p>Next enable mod_wsgi module with following command:</p> <pre><code>a2enmod mod_wsgi\n</code></pre> <p>You can double check if mod_wsgi module was enabled with:</p> <pre><code>apachectl -M\n</code></pre> <p>It should display a list enabled modules. Among other should be:</p> <pre><code>...\nwsgi_module (shared)\n...\n</code></pre>"},{"location":"setup/server_configuration/#step-4-configure-virtual-host","title":"Step 4 - Configure Virtual Host","text":"<p>In directory <code>/etc/apache2/sites-available</code> create a virtual configuration file for Papermerge. Let's say papermerge.site. Here is configuration example for virtual host:</p> <pre><code>&lt;VirtualHost *:8060&gt;\n    &lt;Directory /opt/papermerge/config&gt;\n        Require all granted\n    &lt;/Directory&gt;\n\n    Alias /media/ /var/media/papermerge/\n    Alias /static/ /var/static/papermerge/\n\n    &lt;Directory /var/media/papermerge&gt;\n        Require all granted\n    &lt;/Directory&gt;\n\n    &lt;Directory /var/static/papermerge&gt;\n        Require all granted\n    &lt;/Directory&gt;\n\n    ServerName papermerge.home\n    ServerRoot /opt/papermerge\n&lt;/VirtualHost&gt;\n\nWSGIPythonHome /opt/papermerge/.venv/\nWSGIPythonPath /opt/papermerge/\nWSGIScriptAlias / /opt/papermerge/config/wsgi.py\n</code></pre> <p>The first bit in the WSGIScriptAlias line is the base URL path you want to serve your application at (/ indicates the root url), and the second is the location of a WSGI file, inside papermerge project as <code>config/wsgi.py</code>. This tells Apache to serve any request below the given URL using the WSGI application defined in that file.</p> <p><code>WSGIPythonHome</code> is path to python's virtual environment.</p>"},{"location":"setup/server_configuration/#nginx-gunicorn","title":"Nginx + Gunicorn","text":"<p>Another way to deploy Papermerge behind a real web server is by using <code>Nginx + Gunicorn</code> duo. Gunicorn is called application server - it serves WSGI (Papermerge/Django) application via HTTP protocol (in that sense Gunicorn is kind of web server). However, gunicorn cannot serve static content (JavaScript, CSS, images), this task falls on NginX shoulders.</p>"},{"location":"setup/server_configuration/#step-1-install-gunicorn","title":"Step 1 - Install Gunicorn","text":"<p>Gunicorn is not provided in list of dependencies. Thus, you need to installed in your current virtual python environment:</p> <pre><code>$ source .venv/bin/activate\n$ pip install gunicorn\n</code></pre> <p>Create gunicorn configuration file:</p> <pre><code>// Content of /opt/etc/gunicorn.conf.py file\n\nworkers = 2\nerrorlog = \"/opt/log/gunicorn.error\"\naccesslog = \"/opt/log/gunicorn.access\"\nloglevel = \"debug\"\n\nbind = [\"127.0.0.1:9001\"]\n</code></pre> <p>Note</p> <p>Gunicorn configuration file must have .py extention and its syntax is valid python syntax.</p> <p>Important</p> <p>Binding port is 9001. This same port will be later used to proxy http requests from nginx to gunicorn.</p> <p>and environment variables file:</p> <pre><code>// Content of /opt/etc/gunicorn.env file\n\nDJANGO_SETTINGS_MODULE=config.settings.production\n</code></pre> <p>You need to create a production.py file in /opt/papermerge/config/setting/ directory. Here is an example of production.py file content:</p> <pre><code>// Content of /opt/papermerge/config/settings/production.py file\n\nfrom .base import *  # noqa\n\nDEBUG = False\nALLOWED_HOSTS = ['*']\n</code></pre>"},{"location":"setup/server_configuration/#step-2-systemd-service-for-gunicorn","title":"Step 2 - Systemd Service for Gunicorn","text":"<p>Example of systemd unit file for Gunicorn:</p> <pre><code>// SystemD unit file for gunicorn\n\n[Unit]\nDescription=Gunicorn Service\n\n[Service]\nWorkingDirectory=/opt/papermerge\nEnvironmentFile=/opt/etc/gunicorn.env\nExecStart=/opt/papermerge/.venv/bin/gunicorn config.wsgi:application --config /opt/etc/gunicorn.conf.py\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"setup/server_configuration/#step-3-nginx","title":"Step 3 - Nginx","text":"<p>And finally connect nginx with gunicorn. Here is a sample configuration for nginx:</p> <pre><code>server {\n    server_name papermerge.home;\n    listen 9000;\n\n    location /static/ {\n        alias /opt/static/;\n    }\n\n    location /media/ {\n        alias /opt/media/;\n    }\n\n    location / {\n        proxy_pass http://127.0.0.1:9001;\n    }\n}\n</code></pre>"},{"location":"setup/server_configuration/#worker","title":"Worker","text":"<p>Here is worker.service unit:</p> <pre><code>// Worker.service unit file\n\n[Unit]\nDescription=Papermerge Worker\nAfter=network.target\n\n[Service]\nType=simple\nWorkingDirectory=/opt/papermerge\nExecStart=/opt/papermerge/.venv/bin/python /opt/papermerge/manage.py worker --pidfile /tmp/worker.pid\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Note</p> <p>Notice that <code>ExecStart</code> is absolute path to python interpreter inside python virtual environment. Absolute path to python interpreter inside virtual environment is enough information for python to figure out the rest of python dependencies from the same virtual environment. Thus, you don't need to provide futher information about virtual environment.</p> <p>Systemd .service may be placed in one of several locations. One options is to place it in <code>/etc/systemd/system</code> together with other system level units. In this case you need root access permissions.</p> <p>Another option is to place .service file inside <code>$HOME/.config/systemd/user/</code> In this case you can start/check status/stop systemd unit service with following commands:</p> <pre><code>// Useful systemd comments\n\n$ systemctl --user start worker\n$ systemctl --user status worker\n$ systemctl --user stop worker\n</code></pre>"},{"location":"setup/server_configuration/#broker-messaging-queue-and-their-configuration","title":"Broker, Messaging Queue and their Configuration","text":"<p>Web application (a.k.a. main app) shows users fancy UI and is basically what end users see and interact with. Worker extracts information from scanned documents OCRs them) i.e workers actually do the most laborious task. Number of workers is only limited by your resources: there can be one worker or one thousand.</p> <p>How does web application pass the heavy OCR jobs to the worker(s)? How does it happen that in case of many workers one starts the job and others are aware of it and do not start the same again - i.e. a job is never performed twice? All this workers management is done by a component called Broker. Passing of those OCR related jobs from main app to the broker (which in turn will pass it to correct worker) is done via so called Messaging Queue. Messaging queue can be something as simple as file system; but database, computer memory, key/value in-memory databases are also good candidates.</p> <p>The thing is, to keep initial setup very simple (i.e. to require the minimum amount of configuration to start the application) the broker part is performed by a package called celery - which is part of Papermerge. Similarly, to keep everything simple at the beginning message queue was chosen to be file system itself.</p> <p>By default, configurations for broker and messaging queue are following:</p> <pre><code>CELERY_BROKER_URL = \"filesystem://\"\nCELERY_BROKER_TRANSPORT_OPTIONS = {\n    'data_folder_in': PAPERMERGE_TASK_QUEUE_DIR,\n    'data_folder_out': PAPERMERGE_TASK_QUEUE_DIR,\n}\n</code></pre> <p>Where <code>PAPERMERGE_TASK_QUEUE_DIR</code> points to the folder on the file system, and its default value is <code>queue</code>. Which basically means that all messages will be saved in the current folder named <code>queue</code>.</p> <p>Above configuration is fantastic for development, because zero configuration required.</p> <p>However, filesystem based broker configuration is terrible for production!</p> <p>If you will use it, you will experience CPU increase over time, like described in this ticket on github.</p> <p>Following is good configuration for production:</p> <pre><code>// Recommended options for production\n\nCELERY_BROKER_URL = \"redis://\"\nCELERY_BROKER_TRANSPORT_OPTIONS = {}\nCELERY_RESULT_BACKEND = \"redis://localhost/0\"\n</code></pre> <p>It uses redis key value database. With redis as broker transport you will never have CPU spikes.</p> <p>Important</p> <p><code>CELERY_BROKER_URL</code>, <code>CELERY_BROKER_TRANSPORT_OPTIONS</code> and <code>CELERY_RESULT_BACKEND</code> configurations go into django configuration file of Papermerge project not in papermerge.conf.py. Django configuration file is the one in project_dir/config/base.py</p>"},{"location":"setup/settings/","title":"Settings","text":"<p>Papermerge loads its settings from a configurations file. At first it tries to read following files:</p> <ol> <li>/etc/papermerge.conf.py</li> <li>papermerge.conf.py - from current project directory</li> </ol> <p>If neither of above files exists it will check environment variable <code>PAPERMERGE_CONFIG_FILE</code>. In case environment variable <code>PAPERMERGE_CONFIG_FILE</code> points to an existing file - it will try to read its configurations from there.</p> <p>If all above attempts fail, Papermerge will use default configurations values and issue you a warning. If you want to get rid of warning message, just create an empty configuration file papermerge.conf.py in project root directory (right next to papermerge.conf.py.example) or in location /etc/papermerge.conf.py.</p> <p>Configuration file uses python syntax.</p>"},{"location":"setup/settings/#django-settings","title":"Django Settings","text":"<p>Papermerge is based on Django Web Development Framework. This means basically that if you'll know how Django projects are configured  - you'll be more familiar with how papermerge's configuration internals. One particularly important thing to be aware of  is the [DJANGO_SETTINGS_MODULE] (https://docs.djangoproject.com/en/3.1/topics/settings/#designating-the-settings) environment variable - which is Django specific. Learn more about Django's settings from Django documentation.</p>"},{"location":"setup/settings/#papermerge_-prefix","title":"PAPERMERGE_ Prefix","text":"<p>There is slight difference where you place papermerge settings enumerated below. In short, when placed in papermerge.conf.py file, they don't need <code>PAPERMERGE_</code> prefix, while if you place very same configuration in django settings file - it needs <code>PAPERMERGE_</code> prefix.</p> <p>Papermerge settings can be either in:</p> <ol> <li>papermerge.conf.py file</li> <li>django settings file (the one referenced by DJANGO_SETTINGS_MODULE environment variable)</li> </ol> <p>In <code>papermerge.conf.py</code> file configuration settings are without <code>PAPERMERGE_</code> prefix, because all (well, 90%) of them are papermerge specific. In django settings file however, there are all sort of settings - for celery (prefixed with <code>CELERY_</code>), for allauth (prefixed with <code>ACCOUNT_</code>). Respectively settings for specific for papermerge are prefixed as well. Thus, any settings listed below, when added directly to django settings file - needs <code>PAPERMERGE_</code> prefix.</p> <p>Configuration file <code>papermerge.conf.py</code> is there for convenience. Most of the time you will need only that file.</p>"},{"location":"setup/settings/#main-app-worker-or-both","title":"Main App, Worker or Both?","text":"<p>Some configuration variables are for worker only (the part which OCRs the documents, imports documents form local directory or fetches them from imap/email account), some configuration variables are for main app only and some are for both. This distinction becomes aparent in case you deploy main app and worker on separate hosts; another scenario when this distinction is important in case of containerized deployment via docker - it so, because usually main app and worker will run in different containers - and thus will have different copies of papermerge.conf.py file.</p> <p>The settings below specify for whom configuration settings is addressed. When it says: \"context: <code>worker</code>\" - it means variable applies only in context of worker i.e. it needs to be changed in <code>papermerge.conf.py</code> on worker instance/host/container.</p> <p>When settings description states \"context: <code>main app, worker</code>\" - it means configuration needs to be changed on both - main app and worker in order to function properly.</p> <p>Some of the most used configurations which you might be interest in:</p> <ul> <li>:ref:<code>media_dir</code> - location where all uploaded/imported documents are stored</li> <li>:ref:<code>ocr_languages</code> - user can select one of those languages to perform :ref:<code>OCR &lt;ocr&gt;</code></li> <li>:ref:<code>ocr_default_language</code> - default language for :ref:<code>OCR &lt;ocr&gt;</code></li> </ul>"},{"location":"setup/settings/#paths-and-folders","title":"Paths and Folders","text":""},{"location":"setup/settings/#dbdir","title":"DBDIR","text":"<ul> <li><code>/path/to/papermerge/sqlite/db/</code></li> <li>context: <code>main app</code></li> </ul> <p>Defines location where db.sqlite3 will be saved. By default uses project's local directory.</p> <p>Example:</p> <pre><code>DBDIR = \"/opt/papermerge/db/\"\n</code></pre>"},{"location":"setup/settings/#media_dir","title":"MEDIA_DIR","text":"<ul> <li><code>/path/to/media/</code></li> <li>context: <code>main app, worker</code></li> </ul> <p>Defines directory where all uploaded documents will be stored.</p> <p>By default uses a folder named <code>media</code> in project's local directory.</p>"},{"location":"setup/settings/#static_dir","title":"STATIC_DIR","text":"<ul> <li><code>/path/to/collected/static/assets/</code></li> <li>context: <code>main app</code></li> </ul> <p>Location where all static assets of the project Papermerge project (javascript files, css files) will be copied by <code>./manage collectstatic</code> command.</p> <p>By default uses a folder named <code>static</code> in project's local directory.</p> <p>Example:</p> <pre><code>STATIC_DIR = \"/opt/papermerge/static/\"\n</code></pre>"},{"location":"setup/settings/#document-importer","title":"Document Importer","text":"<p>Importer is a command line utility, which you can invoke with <code>./manage.py importer</code>, used to import all documents from local directory.</p>"},{"location":"setup/settings/#importer_dir","title":"IMPORTER_DIR","text":"<ul> <li><code>/path/where/documents/will/be/imported/from/</code></li> <li>context: <code>worker</code></li> </ul> <p>Location on local file system where Papermerge will try to import documents from.</p> <p>Example:</p> <p>IMPORTER_DIR = \"/opt/papermerge/import/\"</p>"},{"location":"setup/settings/#ocr","title":"OCR","text":""},{"location":"setup/settings/#ocr_languages","title":"OCR_LANGUAGES","text":"<ul> <li>context: <code>main app, worker</code></li> </ul> <p>Addinational languages for text OCR. A dictionary where key is ISO 639-2/T code and value human   text name for language</p> <p>Example:</p> <pre><code>OCR_LANGUAGES = {\n    'heb': 'hebrew',\n    'jpn': 'japanese'\n}\n</code></pre> <p>Note that both <code>hebrew</code> and <code>japanes</code> language data for tesseract must be installed. You can check Tesseract's available languages with following command:</p> <pre><code>$ tesseract --list-langs\n</code></pre> <p>Default value for OCR_LANGUAGES uses following value:</p> <pre><code>OCR_LANGUAGES = {\n    \"deu\": \"Deutsch\",  # German language\n    \"eng\": \"English\",\n  }\n</code></pre>"},{"location":"setup/settings/#ocr_default_language","title":"OCR_DEFAULT_LANGUAGE","text":"<ul> <li>context: <code>main app, worker</code></li> </ul> <p>By default Papermerge will use language specified with this option to perform OCR. Change this value for language used by majority of your documents.</p> <p>Example:</p> <pre><code>OCR_DEFAULT_LANGUAGE = \"spa\"\n</code></pre> <p>Default value is \"deu\" (German language).</p>"},{"location":"setup/settings/#i18n-and-localization","title":"I18n and Localization","text":""},{"location":"setup/settings/#language_code","title":"LANGUAGE_CODE","text":"<ul> <li>context: <code>main app</code></li> </ul> <p>This option specifies language of user interface. There are two options:</p> <ul> <li>en - for user interface in English language</li> <li>de - for user interface in German language</li> </ul> <p>English is default fallback i.e. if you don't specify anything or specify unsupported language then English will be used. Instead of <code>en</code> you can use <code>en-US</code>, <code>en-UK</code> etc. Instead of <code>de</code> you can use <code>de-DE</code>, <code>de-AT</code> etc. See here full least of all available language codes.</p> <p>Default value: <code>en</code></p>"},{"location":"setup/settings/#language_from_agent","title":"LANGUAGE_FROM_AGENT","text":"<p>If is set to True, will use same language code as your Web Browser (agent) does. Browsers send 'Accept-Language' header with their locale. For more, read here</p> <ul> <li>If <code>True</code>  - will override <code>LANGUAGE_CODE</code> option. This means that with <code>LANGUAGE_FROM_AGENT=True</code> in whatever locale settings your Web Browser runs - same will be used by Papermerge instance.</li> <li>If <code>False</code> - language code specified in <code>LANGUAGE_CODE</code> option will be used and 'Accept-Language' header in browser will be ignored.</li> </ul> <p>Default value: <code>False</code></p>"},{"location":"setup/settings/#database","title":"Database","text":"<p>By default, Papermerge uses SQLite3 database (which is a file located in :ref:<code>db_dir</code>). Alternatively you can use a PostgreSQL or MySQL/MariaDB database. Following are options for PostgreSQL and MySQL/MariaDB database connections.</p>"},{"location":"setup/settings/#dbtype","title":"DBTYPE","text":"<p>context: <code>main app</code></p> <p>DB type (if different from SQLite3). For PostgreSQL database use one of following values:</p> <ul> <li>pg</li> <li>postgre</li> <li>postgres</li> <li>postgresql</li> </ul> <p>For MySQL/MariaDB database (they share same database backend) use one of following values:</p> <ul> <li>my</li> <li>mysql</li> <li>maria</li> <li>mariadb</li> </ul> <p>Example:</p> <pre><code>  DBTYPE = \"mysql\"\n</code></pre>"},{"location":"setup/settings/#dbuser","title":"DBUSER","text":"<p>context: <code>main app</code></p> <p>DB user used for database connection.</p> <p>Example:</p> <pre><code>DBUSER = \"john\"\n</code></pre>"},{"location":"setup/settings/#dbname","title":"DBNAME","text":"<p>context: <code>main app</code></p> <p>Database name. Default value is papermerge.</p>"},{"location":"setup/settings/#dbhost","title":"DBHOST","text":"<p>context: <code>main app</code></p> <p>Database host. Default value is localhost.</p>"},{"location":"setup/settings/#dbport","title":"DBPORT","text":"<p>context: <code>main app</code></p> <p>Database port. Port must be specified as integer number. No string quotes.</p> <p>Example:</p> <pre><code>DBPORT = 5432\n</code></pre> <p>Default value is 5432 for PostgreSQL and 3306 for MySQL/MariaDB.</p>"},{"location":"setup/settings/#dbpass","title":"DBPASS","text":"<p>context: <code>main app</code></p> <p>Password for connecting to database Default value is empty string.</p>"},{"location":"setup/settings/#email","title":"EMail","text":"<p>You can import documents directly from email/IMAP account. All EMail importer settings must be defined in <code>papermerge.conf.py</code> on worker side. Read details about ingesting documents via IMAP account in <code>document consumption chapter &lt;importer_imap&gt;</code>.</p>"},{"location":"setup/settings/#import_mail_host","title":"IMPORT_MAIL_HOST","text":"<p>context: <code>worker</code></p> <p>IMAP Server host.</p>"},{"location":"setup/settings/#import_mail_user","title":"IMPORT_MAIL_USER","text":"<p>context: <code>worker</code></p> <p>Email account/IMAP user. IMAP user needs read and write access to IMAP \"INBOX\" folder.</p>"},{"location":"setup/settings/#import_mail_pass","title":"IMPORT_MAIL_PASS","text":"<p>context: <code>worker</code></p> <p>Email account/IMAP password.</p>"},{"location":"setup/settings/#import_mail_inbox","title":"IMPORT_MAIL_INBOX","text":"<p>context: <code>worker</code></p> <p>IMAP folder to read email from. Default value for this settings is \"INBOX\".</p>"},{"location":"setup/settings/#import_mail_by_user","title":"IMPORT_MAIL_BY_USER","text":"<p>context: <code>worker</code></p> <p>Whether to allow users to receive in their inbox folder emails sent from their own email address. This capability of assigning attached documents to correct user's inbox is called email routing and is described at length in <code>email_routing</code>.</p>"},{"location":"setup/settings/#import_mail_by_secret","title":"IMPORT_MAIL_BY_SECRET","text":"<p>context: <code>worker</code></p> <p>Whether to allow users to receive in their inbox folder emails containing their own secret. This capability of assigning attached documents to correct user's inbox is called email routing and is described at length in <code>email_routing</code>.</p>"},{"location":"setup/settings/#import_mail_delete","title":"IMPORT_MAIL_DELETE","text":"<p>context: <code>worker</code></p> <p>Whether to delete emails after processing.</p>"},{"location":"setup/settings/#binary-dependencies","title":"Binary Dependencies","text":"<p>Papermerge uses a number of open source 3rd parties for various purposes. One of the most obvious example is tesseract - used to :ref:<code>OCR &lt;ocr&gt;</code> documents (extract text from binary image file). Another, less obvious example, is pdfinfo utility provided by poppler-utils package: pdfinfo is used to count number of pages in pdf document. Configurations listed below allow you to override path to specific dependency.</p>"},{"location":"setup/settings/#binary_ocr","title":"BINARY_OCR","text":"<p>context: <code>worker</code></p> <p>Full path to tesseract binary/executable file. Tesseract is used for :ref:<code>OCR &lt;ocr&gt;</code> operations - extracting of text from binary image files (jpeg, png, tiff). Default value is:</p> <pre><code>BINARY_OCR = \"/usr/bin/tesseract\"\n</code></pre>"},{"location":"setup/settings/#binary_file","title":"BINARY_FILE","text":"<p>context: <code>main app, worker</code></p> <p>File utility used to find out mime type of given file. Default value is:</p> <pre><code>BINARY_FILE = \"/usr/bin/file\"\n</code></pre>"},{"location":"setup/settings/#binary_convert","title":"BINARY_CONVERT","text":"<p>context: <code>main app, worker</code></p> <p>Convert utility is provided by ImageMagick package. It is used for resizing images. Default value is:</p> <p>BINARY_CONVERT = \"/usr/bin/convert\"</p>"},{"location":"setup/settings/#binary_pdftoppm","title":"BINARY_PDFTOPPM","text":"<p>context: <code>main app, worker</code></p> <p>Provided by Poppler Utils. Used to extract images from PDF file. Default value is:</p> <pre><code>BINARY_PDFTOPPM = \"/usr/bin/pdftoppm\"\n</code></pre>"},{"location":"setup/settings/#binary_pdfinfo","title":"BINARY_PDFINFO","text":"<p>context: <code>main app, worker</code></p> <p>Provided by Poppler Utils. Used to get page count in PDF file. Default value is::</p> <p>BINARY_PDFINFO = \"/usr/bin/pdfinfo\"</p>"},{"location":"setup/settings/#binary_stapler","title":"BINARY_STAPLER","text":"<p>context: <code>main app, worker</code></p> <p>Provided by stapler. This external tool is used to reorder, cut/paste, delete pages within PDF document.</p> <p>Default value is:</p> <pre><code>BINARY_STAPLER = \"/usr/bin/stapler\"\n</code></pre> <p>Depending on you system, and the way you installed stapler - you may want to adjust <code>BINARY_STAPLER</code> path.</p>"},{"location":"setup/upgrading/","title":"Upgrading","text":"<p>Always backup your database, media directory and configuration files before upgrading. We try very hard to make sure that all database changes are non-destructive, but you should always backup beforehand anyway. You will never regret backing up your database and media directory. You may regret not doing so, so it\u2019s just better to get into the habit.</p>"},{"location":"setup/upgrading/#general-instructions","title":"General Instructions","text":"<p>In general, an upgrade involves two parts:</p> <ul> <li>upgrade application code and dependencies</li> <li>apply new database changes (called database migrations)</li> </ul> <p>Upgrading application code is usually something like:</p> <pre><code>$ git pull  # pull latest changes\n$ export DJANGO_SETTINGS_MODULE=config.settings.prod\n$ pip install -r requirements/base.txt\n</code></pre> <p>Applying new database changes is performed with <code>migrate</code> command:</p> <pre><code>$ export DJANGO_SETTINGS_MODULE=config.settings.prod\n$ ./manage.py migrate\n</code></pre> <p>Note however that above instructions are very generic and may very depending on the release and deployment environment.</p>"},{"location":"setup/upgrading/#upgrade-via-docker","title":"Upgrade via Docker","text":"<p>In case you run Papermerge via docker container, then all you need to do is to change docker image to the newer version of papermerge docker image. New docker image means actually new application code (with correct dependencies already built-in) and, the most important part docker (startup script) will run database migrations for you!</p>"},{"location":"setup/upgrading/#from-15x-to-2x","title":"From 1.5.x to 2.x","text":"<p>Warning</p> <p>If you run an earlier version then 1.5.x please upgrade to 1.5.5 version first.</p> <p>It is very important to upgrade exactly from 1.5.5 to 2.0.0rc38. The very first 2.x release candidate (2.0.0rc35) has problems which will result in upgrade failure.</p>"},{"location":"user/apps/","title":"Apps","text":"<p>From the very beginning of its existence, Papermerge started to receive features requests. Many of those requests made perfect sense and were implemented (or will be implemented). It is thanks to the  community's feedback and contributions that Papermerge evolves naturally into a mature archives management system.</p> <p>However, a great number of features requests were subject to debate, or just not suitable for majority of users. A very good example of such feature is duplicates removal. First of all, how to define that a specific document is a duplicate (of other document)?</p> <p>There are at least three possibilities:</p> <ol> <li>duplicate are documents with same file name</li> <li>duplicates are documents with same digest value</li> <li>duplicates are those documents where extracted text is &gt;= 95% similar (i.e. very similar)</li> </ol> <p>Each of points above has pros and cons. Each of them may be right under specific circumstances and for specific user or company requirements. By default, Papermerge does not implement any of those points. Event more, if you upload same files (with same content and even same filename) it will gladly accept them. In the end, whole this document duplicates thingy is just a matter of preference.</p> <p>Apps were introduced to address such issues. App (or plugin if you like) is a way extend base Papermerge application. Continuing with above example with document duplicates, by adding/removing specific Papermerge app you can add/remove specific document duplicate detection criteria. This way, Papermerge base application, which is called Papermerge Core will contain only essential features.</p>"},{"location":"user/apps/#papermerge-core","title":"Papermerge Core","text":"<p>On the other hand, document management system are complex applications, with rich set of requirements such as LDAP authentication, document electronic signatures and even such fancy things as data retention policies. Not everybody needs LDAP authentication though. Also, not everybody uses document electronic signatures and data retention policies. These type of features are very good candidates for Papermerge apps. All non essential features will be implemented as apps which can be easily plugged or removed.</p>"},{"location":"user/apps/#apps_1","title":"Apps","text":"<p>Papermerge app is basically a Django app with few extras. You may wonder what is Django app anyway? First of all, Papermerge is build with help of web framework called Django. Secondly, Papermerge project is a Django project which in turn is a loose collection of Django apps plus (project) settings. Figure 1 illustrates this idea.</p> <p></p> <p>Notice that Papermerge Core app is part of every Papermerge project.</p>"},{"location":"user/apps/#writing-basic-app","title":"Writing Basic App","text":"<p>The gory details of how to develop apps and include them into papermerge project are explained in contributing guide. Here, in user manual, only high level concepts are explained.</p> <p>Let's consider an app which will detect file name duplicates i.e. an app which if used, will issue an error when user tries to upload twice documents with same file names. Keep in mind that here the goal is to familiarize with general concepts.</p> <p>Inside Papermerge project create a new django app:</p> <pre><code>./manage.py startapp filebased_unique\n</code></pre> <p>To highlight that filebased_unique app is part of papermerge ecosystem, it will be moved into a namespace papermerge (which is just an extra folder):</p> <pre><code>$ mkdir papermerge\n$ mv filebased_unique papermerge/\n</code></pre> <p>Also, change <code>name</code> and <code>label</code> app attributes as shown below:</p> <pre><code>from django.apps import AppConfig\n\n\nclass FilebasedUniqueConfig(AppConfig):\n    name = 'papermerge.filebased_unique'\n    label = 'filebased_unique'\n</code></pre> <p>The heart of papermerge.filebased_unique app is file papermerge/filebased_unique/models.py where core document model is extended as following:</p> <pre><code>from django.core.exceptions import ValidationError\nfrom papermerge.core.models import Document, AbstractDocument\n\n\nclass DocumentPart(AbstractDocument):\n\n    def clean(self):\n\n        file_name = self.get_file_name()\n\n        if Document.objects.filter(file_name=file_name).count() &gt; 1:\n            raise ValidationError(\n                \"Document file_name duplicates detected\"\n            )\n</code></pre> <p>Here is link to app code on GitHub.</p>"},{"location":"user/apps/#document-parts","title":"Document Parts","text":"<p>Apps are there not just for adding extra validations, you can add extra fields to the core document as well.</p> <p>For example, in case you want to add a special UUID field to the document model, you can:</p> <pre><code>import uuid\nfrom django.db import models\n\nfrom papermerge.core.models import AbstractDocument\n\n\nclass DocumentPart(AbstractDocument):\n\n    special_uuid = models.UUIDField(\n        default=uuid.uuid4,\n        editable=False\n    )\n</code></pre> <p>Those extra fields added by apps to core document model - are called document parts. Papermerge application treats core document fields and those extra fields added by apps as one whole:</p> <p></p> <p>This way, any user or company, can extend core document model with whatever number of custom fields they wish without interfering with core application code.</p>"},{"location":"user/apps/#document-widgets","title":"Document Widgets","text":"<p>Note</p> <p>This feature is experimental.</p> <p>Each document part (i.e all those extra fields) will be visualized as widgets on the right side widget panel along with metadata widget and basic info widget.</p>"},{"location":"user/automates/","title":"Automates","text":"<p>Automates are very handy  if you want to apply automatically certain actions on incoming documents. For example, if document contains specific keywords (like groceries store name) then automatically add tag \"groceries\" on it. Even better use case would be: if document contains specific keywords apply \"groceries\" tag on the document AND move it from Inbox to <code>Expenses --&gt; Groceries</code> folder. Incoming documents are those found in your Inbox folder.</p> <p>If you want to see automates in action watch following screencast. The rest of this chapter explains automate feature in detail.</p> <p>With Automation feature you can automate repetitive tasks like:</p> <ol> <li>moving documents into their destination folder</li> <li>assigning specific tags to the document</li> </ol> <p></p> <p>Each automate instance consists of:</p> <ul> <li>name or a title - give it whatever name you like</li> <li>keywords - terms or words to look up in the document to figure out if current automate is applicable for given document</li> <li>matching algorithm - method used to decide if document matches the automate</li> <li>case sensitivity attribute - are keywords specified in match case sensitive?</li> <li>(optional) destination folder - where shall it move the matched document?</li> <li>(optional) tags - which tags shall it associate to the matched document?</li> </ul> <p>Note that last two attributes of Automates - destination folder and tags - are optional. You may indicate one of them, both or neither.</p>"},{"location":"user/automates/#document-matching-algorithms","title":"Document Matching Algorithms","text":"<p>In order to decide if automate instance applies to current document - it will look for certain keywords in the document. For example if document contains capital case REWE, then this document must be routed to folder Expenses/Groceries; if document contains word Deutschlandradio (german word which translates to english as German radio), then it will be routed to ARD ZDF Briefe</p> <p>Danger</p> <p>It is crucial to understand that matching is per Page. Thus, statement match a document is not entirely correct. Automation processes is triggered every time when OCR for certain page completes. OCR page is sent to automation module and Papermerge will try to match each automate instance on it. In case there is a match - it is considered that document matched automate criteria, although technically correct is - page of respective the document matched!</p> <p>There are four different ways to perform a match:</p> <ol> <li>Any</li> <li>All</li> <li>Literal</li> <li>Regular Expression</li> </ol> <p>With <code>Any</code> matching algorithm, document matches if any of mentioned keyword will match. With <code>All</code>, document matches if all mentioned keywords are found in document. Keywords order does not matter. With <code>Literal</code> matching algorithm, text you enter must appear in the document exactly as you've entered it. You can use <code>Regular Expression</code> for matching criteria. Regular expressions is a general programming method of text matching. Computer programmers usually know what it means.</p> <p>Matching keywords should be separated by one or more spaces.</p> <p></p>"},{"location":"user/automates/#case-sensitivity-attribute","title":"Case Sensitivity Attribute","text":"<p>If case sensitivity attribute is checked, the matching algorithms will look up for words occurrences with exact same letter case as matching keywords</p> <p>For example if \"schnell\" is mentioned as keyword and Is case sensitive is checked then occurrences in the document of terms \"SCHNELL\", \"Schnell\", \"schneLL\" will be ignored because of mismatched letter case i.e. document will not match automate criteria.</p> <p>On the other hand, if very same keyword \"schnell\" is used but Is case sensitive attributed is unchecked, then any of following terms \"SCHNELL\", \"Schnell\", \"schneLL\" will match i.e. document will match automate criteria.</p>"},{"location":"user/automates/#inbox-automates","title":"Inbox + Automates","text":"<p>Automates run only for documents in <code>Inbox</code> folder.</p> <p>Imported documents from <code>local watch directory</code> or <code>from email account</code> end up in your <code>Inbox</code> folder. Papermerge will apply automates only on the documents in <code>Inbox</code> - regardless where those documents were imported from. The side effect of this feature is that automates will run on documents in <code>Inbox</code> even if you uploaded them manually - this one is a very useful trick to test your automates.</p> <p>Note</p> <p>There is a good reason why automates apply only on the documents from <code>Inbox</code>. The reason is that in <code>Inbox</code> documents may disappear. In other words -  it is acceptable for documents to suddenly move from <code>Inbox</code> to another folder - due to automation match. If automates would be applied on any folder - then imagine how confused you might be if documents would unexpectedly disappear from your current folder (due to automation match)!</p>"},{"location":"user/automates/#automates-and-ui-logs","title":"Automates and UI Logs","text":"<p>You can check which automate matched specific document by looking at UI Logs:</p> <p></p> <p>In UI Log entry you can see document's name, page number and document id on which Automates were applied (remember, automates are applied per Page!).  Also, you can see that text which was extracted from that document:</p> <p>Note</p> <p>UI Logs are very convenient to see the extracted text from the document.   Depending on the quality of the scan, extracted text may or may not exactly match   textual content of the document. For instance in figure below, OCR engine extracted text   \"SCHNEIL\" although the actual text on the receipt was \"SCHNELL\". Use UI Logs to spot such errors   and adjust MATCH term.</p> <p></p> <p>In order to check which Automate matched this document/page, you need to scroll to the very bottom of the message:</p> <p></p>"},{"location":"user/automates/#troubleshooting-mismatched-automates","title":"Troubleshooting Mismatched Automates","text":"<p>Writing Automates involves little bit of guesswork. Even if you know for sure that certain words will occur in the document, it will take couple of trial and error cycles until you'll end up with correct <code>match</code> field.</p> <p>To support this try-error cycle, with Papermerge you can manually trigger automates. It is very intuitive how re-run automates:</p> <ol> <li>Select Automate you wish to run</li> <li>Select <code>Run selected automates</code> in the action drop down on the right</li> <li>Click <code>Apply</code> button</li> </ol> <p></p> <p>Let's consider an example which will illustrate how Automates are troubleshooted. The goal is to create an Automate which will automatically move Schnell receipts to <code>Expenses --&gt; Groceries</code> folder and will tag them with <code>groceries</code>, <code>receipt</code>, <code>schnell</code> tags. For this purpose, following Automate was created:</p> <p></p> <p>Notice that <code>Match</code> field has as value one single lowercase keyword \"schnell\". <code>Is case sensitive</code> field is checked.</p> <p>For the beginning, two receipts shown in Figure 7 are uploaded to <code>Inbox</code> folder.</p> <p>Note</p> <p>Automates are triggered for all <code>incoming documents</code>, even if they are   manually uploaded to <code>Inbox</code> folder. However, if you cut/paste document(s)   from other folder to <code>Inbox</code>   - automates won't run.</p> <p>To make sure that automates ran, check last entries in <code>UI Logs</code>. Also, in <code>UI Logs</code> you will see actual extracted text the automates were compared with. For Automate and receipts from Figure 7 - uploaded receipts still will be in <code>Inbox</code>. The reason of that, is checked <code>Is case sensitive</code> attribute: in extracted text for \"schnell\" all uppercase while our keyword is all lowercase.</p> <p>Let's try again. Use following steps:</p> <ol> <li>Uncheck <code>Is case sensitive attribute</code></li> <li>Save changes schnell receipts automate</li> <li>Select schnell receipts automate</li> <li>run Automate again using action drop down menu <code>Action --&gt; Run selected automates --&gt; Apply</code></li> </ol> <p>You will notice that one of the two receipts moved indeed from <code>Inbox</code> folder to \"Groceries\" folder. Also it has applied all three tags as depicted in Figure 8.</p> <p></p> <p>Why other receipt didn't match ? Let's have a closer look the UI Logs. Open last UI Log entry which starts with Running automates for document brother_004026.pdf text:</p> <p></p> <p>Figure 9 - OCR engine got confused and extracted \"SCHNEIL\" instead of \"SCHNELL\"</p> <p>You see in Figure 9 above that OCR engine got confused and extracted slightly wrong text. To take into account this error as well, add to <code>Match</code> field of Automate \"schneil\" keyword as well:</p> <p></p> <p>Notice that <code>Matching Algorithm</code> is <code>Any</code>, this means that Automate will match if any mentioned keywords will match. After saving and rerunning automate - second receipt is successfully moved to Groceries folder and it has all three tags applied as you can see in picture below:</p> <p></p> <p>Watch following screencast to see this troubleshooting use case in action:</p>"},{"location":"user/consumption/","title":"Consumption","text":"<p>Once you\u2019ve got Papermerge up and running, you need to start feeding documents into it. Currently, there are four options: upload directly via web user interface, the importer directory, IMAP (email), and the REST API.</p> <p>Uploading document via web interface won't be explained here as it is very obvious. Uploading via REST API along with how to register a token is explained in REST API. Here we will focus on importing from a local directory and importing documents from an email account (imap).</p>"},{"location":"user/consumption/#the-importer-directory","title":"The Importer Directory","text":"<p>You can point Papermerge to a specific directory on your local system and <code>worker</code> script will import all documents from that directory. Getting stuff into this directory is up to you. If you\u2019re running Papermerge on your local computer, you might just want to drag and drop files there. Imported documents will land in your superuser's Inbox folder.</p> <p>The configuration setting you are looking for is <code>IMPORTER_DIR</code>. It points to the directory where all documents will be imported from. Example:</p> <pre><code>IMPORTER_DIR = \"/mnt/media/importer_dir\"\n</code></pre> <p>The <code>IMPORTER_DIR</code> directory pointed must be readable by the Papermerge application.</p> <p>Note</p> <p>Notice that <code>IMPORTER_DIR</code> must be defined on the worker side. For single deployments worker and main app will share the same <code>papermerge.conf.py</code> configuration file, thus all configurations will be in same configuration file. In case of distributed deployment - or even in case when the main app and worker run within different docker images - this distinction becomes important. <code>IMPORTER_DIR</code> should be defined in <code>papermerge.conf.py</code> of the host (or docker image) where the worker runs.</p> <p>All imported documents will land in superuser's Inbox.</p> <p>Note</p> <p>Papermerge is a multi-user system. The very first system user is called superuser. Papermerge must have at least one superuser. Regardless of how many users there are in Papermerge DMS, imported documents will always end up in first superuser's inbox.</p>"},{"location":"user/consumption/#imap-email","title":"IMAP (Email)","text":"<p>Papermerge can import documents from an email account. This feature is somehow similar to importing documents from a local directory, but instead of a local path you need to provide details about an email account (email account = IMAP account). At very least you need to provide following email importing settings:</p> <ol> <li><code>IMPORT_MAIL_HOST</code> - IMAP server hostname</li> <li><code>IMPORT_MAIL_USER</code> - IMAP username</li> <li><code>IMPORT_MAIL_PASS</code> - IMAP password</li> </ol> <p>Note</p> <p>Email importing settings must be defined on the worker side.</p> <p>with those three configurations worker will securely connect every 30 seconds to provided IMAP account and check for newly arrived email messages with attachments. By default email attachment's will end up in your superuser's Inbox.</p>"},{"location":"user/consumption/#one-imap-account-for-many-papermerge-users","title":"One IMAP Account for Many Papermerge Users","text":"<p>Adding all email attachments to your superuser Inbox is absolutely fine when superuser is the one and only user in Papermerge. However, if your Papermerge instance has multiple users, then assigning documents for specific Papermerge user's Inbox is little tricky. There are couple ways to match incoming emails to specific Papermerge user:</p> <ol> <li>matching by \"From\" or \"To\" fields (also called matching \"by user\")</li> <li>matching by special \"secret\" in email's subject or email's body</li> </ol> <p>The following configurations enable/disable respective matching features:</p> <ul> <li><code>IMPORT_MAIL_BY_USER</code> = True | False</li> <li><code>IMPORT_MAIL_BY_SECRET</code> = True | False</li> </ul>"},{"location":"user/consumption/#matching-by-user","title":"Matching By User","text":"<p><code>IMPORT_MAIL_BY_USER</code> allows user to send emails from their user-configured email address and have them end up in their inbox. With this option enabled, Papermerge looks up email's \"From\" and \"To\" fields to decide for who those documents are addressed. Document will end up in Papermerge user with same email address as either email's \"From\" or email's \"To\" field.</p> <p>Following picture illustrates how matching by user works:</p> <p></p> <p>Note</p> <p>You configure Papermerge with only one IMAP/email account.</p>"},{"location":"user/consumption/#matching-by-secret","title":"Matching By Secret","text":"<p><code>IMPORT_MAIL_BY_SECRET</code> is yet another way to route email's attachments to correct Papermerge inbox. It this case a per-user secret in email body or email subject is the decision factor. Secret can be any text. In your email you need to surround it with <code>SECRET{ ... }</code> keyword. Note that keyword <code>SECRET</code> must be all capital-case and there are no spaces between opening curly brackets and word <code>SECRET</code>, however there may be spaces between secret text and surrounding curly brackets. Papermerge looks for <code>SECRET{ ... }</code> in emails subject or emails text body - but NOT in the attachment!</p> <p>Let's consider an example: Papermerge user john in preferences enables Email routing by secret option and chooses as secret the one who loves cats and documents. Then any incoming email (in configured IMAP account) with following text (either in subject or in its body):</p> <pre><code>SECRET{ the one who loves cats and documents }\n</code></pre> <p>with be assigned to Papermerge user john.</p> <p>Danger</p> <p>There are no spaces between keyword <code>SECRET</code> and <code>{</code></p> <p>Notice that email matching feature must be enabled:</p> <ol> <li>system wide using <code>IMPORT_MAIL_BY_USER</code> and/or <code>IMPORT_MAIL_BY_SECRET</code> in <code>papermerge.conf.py</code> file</li> <li>per user - in user preferences menu</li> </ol> <p>If both configurations options <code>IMPORT_MAIL_BY_USER</code> and <code>IMPORT_MAIL_BY_SECRET</code> are set to <code>False</code> users won't see \"Email Routing\" configuration their preferences. If at lease one of above mentioned options is enabled users will see \"Email Routing\" preferences.</p> <p></p> <p></p> <p>Note</p> <p>Note that secret text is always shown (unlike passwords which are hidden from user's eyes) to users. Also, unlike passwords, secret text for email routing is stored in database as clear text. It is so, because secret text used for email routing and is not used as user credentials of any kind i.e. it doesn't grant you any privilege; in other words you cannot open any account with that \"secret text\" information so to speak.</p> <p>Finally if <code>IMPORT_MAIL_DELETE</code> is set to True then a processed email will be deleted from the mail account.</p>"},{"location":"user/document_pipelines/","title":"Document Pipelines","text":"<p>Note</p> <p>This feature is experimental.</p> <p>Document pipelines is a way to apply extra transformations on incoming documents. Using document pipelines capabilities, virtually any external file type can be imported and stored as PDF document (native format).</p> <p>pipelines concept</p> <p>With document pipelines for example email messages for example can be imported and stored as PDF files.</p> <p>Each pipeline is an external plugin.</p> <p>Warning</p> <p>Although basic pipeline functionality is already part of core application, the whole concept is still experimental and undocumented.</p>"},{"location":"user/file_formats/","title":"File Formats","text":"<p>Scanned documents play a central role in Papermerge. Technically, scanned document can be stored in a plethora of file formats. Papermerge supports following, the most common ones:</p> <ul> <li>PDF - Portable Document Format</li> <li>TIFF - a convenient file container. TIFF files can contain inside several images</li> <li>JPEG - popular image format</li> <li>PNG  - popular image format</li> </ul> <p>Many scanners output their scanned documents as PDF, TIFF or JPEG.</p> <p>Note</p> <p>Strictly speaking, JPEG and PNG are images. From the point of view of Papermerge - they are one page documents - it is assumed that JPEG contains scanned pages information. Many people nowadays use their mobile phones to capture documents.</p> <p>Warning</p> <p>Papermerge is not suitable to store pictures of pets, flowers, family portraits, trees, grass, selfies etc. That being said - you can upload any picture you want! Application won't complain as long as image is in one of supported technical formats. Papermerge will try to OCR uploaded picture and will handle it as regular document. Just keep in mind that Papermerge is designed work with documents (even if they are images taken with your phone).</p>"},{"location":"user/getting-started/","title":"Getting Started","text":""},{"location":"user/getting-started/#documents","title":"Documents","text":"<p>Let's start by clarifying the most important concept first: the document. For Papermerge a document is anything which is a good candidate for archiving - some piece of information which is not editable but you need to store it for future reference. For example receipts - you don\u2019t need to edit receipts or read them everyday, but eventually you will need them for your tax declaration. In this sense - scanned documents, which are usually in PDF or TIFF format, are perfect match.</p> <p>Another important thing - if you take a picture of a paper document with your mobile phone - you'll have a file in jpeg format (or maybe png file format). In context of Papermerge that picture of a document (though just a single jpeg file) is a valid one page document. Generally speaking, pictures of the documents produced by your camera - might be regarded as bad quality scans.</p> <p>On the other hand, if you take a picture of a flower and upload that jpeg image to Papermerge - the 'document' will be processed. However, that jpeg format flower image is not a document in Papermerge sense.</p> <p></p> <p>Usually office formats with .docx (Microsoft Word), .odt (Libre Office), .txt (plain text) are not good candidates for archiving - as by their nature they are meant to be changed/edit regularly. However, once converted to PDF format (for instance Contract_C2.docx to Contract_C2.pdf) they are full fledged documents in Papermege sense.</p> <p>By default, Papermerge works with documents in 4 (four) file formats: pdf, tiff, jpeg and png. However, many other formats (even email messages) can be imported as documents by converting incoming file automatically to PDF format. This is possible due to :ref:<code>document_pipelines</code> feature.</p>"},{"location":"user/getting-started/#optical-character-recognition-ocr","title":"Optical Character Recognition (OCR)","text":"<p>OCR is a technique to extract text information from binary image formats. This technique enables users to:</p> <ul> <li>copy/paste  text from the document's content</li> <li>search documents by document's actual text content</li> </ul> <p>OCR is essential tool (or technique if you will) which helps basically to extract textual information and thus derive useful work-flows (based on document's actual content) with the documents. Papermerge relies on external open source specialized tools like Google's Tesseract OCR</p>"},{"location":"user/getting-started/#tags-and-folders","title":"Tags and Folders","text":"<p>Organizing documents in folders is very common. Thus the idea of keeping your documents in folders doesn't need further introduction. It may be worth mentioning that Papermerge supports folders and that folders may be hierarchical i.e. one folder can contain other folder(s) as well. This nesting (folder in folder) ca be arbitrarily deep.</p> <p></p> <p>The idea of using tags to organize your documents may be new for you though. Tags are kind of labels. You can associate (add) tags to a document or to a folder. Tags have a color and a name. Once tagged, documents can be searched by their tags. Conversely, is it also possible to show all the documents tagged with a particular tag(s).</p> <p>Both tags and folders complement each other and provide you with powerful means to stay organized.</p>"},{"location":"user/getting-started/#page-management","title":"Page Management","text":"<p>Many times scanning documents in bulk yields documents with blank pages; some pages my be out of order or maybe part of totally different document. Even if you notices these flaws immediately it is time consuming and frustrating to redo scanning process. Papermerge helps you with your scanned documents like no other tool. With Papermerge you can delete blank or erroneous pages, you can move pages from one document into another (with cut and paste) and most importantly you can reorder document pages in case you need to do so.</p> <p></p> <p>There is a separate chapter about page management where you can learn details about this feature.</p>"},{"location":"user/getting-started/#metadata","title":"Metadata","text":"<p>Metadata is a very powerful concept and it marks the clear differences between an usual file browser and a system dedicated to manage your documents. Metadata is additional information about your folders, documents and pages. In other words - data about your data. Following picture is a (scanned document) receipt with highlighted shop name, price and date on it.</p> <p></p> <p>This additional information - shop name, price and date is so called document's metadata. It has two parts a label (in picture above <code>shop</code>, <code>date</code> and <code>price</code> are all labels) and a value (in example above values are <code>M\u00e4c-Geiz</code>, <code>08.06.2020</code>, <code>1.49</code> for shop label, date label and price label respectively). Many times instead of term label term key is used.</p> <p>Metadata is extremely useful as search criteria when you need to locate specific document among many other very similar documents: for example if you need to find specific receipt issued by M\u00e4c-Geiz company on May 27th, 2018 among other several thousands M\u00e4c-Geiz receipts.</p> <p>In Papermerge you can set metadata on folders, on documents and on each individual page of the document. Document's metadata can be viewed and edited on the right side in widgets panel. Additionally if you are inside folder with metadata attributes set, metadata information about each document (of current parent folder) is displayed in so called metacolumns as highlighted in Figure 5.</p> <p></p> <p>Read more on this topic in chapter dedicated to metadata.</p>"},{"location":"user/glossary/","title":"Glossary","text":"<p>Here is a list of terms, expressions and abbreviations used in this documentation. Many of terms here are specific for document management problem domain.</p>"},{"location":"user/glossary/#ocr","title":"OCR","text":"<p>Abbreviation from optical character recognition. OCR is the process of extracting plain text (and associated information) from an image, photo or a picture. Example: John takes a photo with his mobile phone of a paper based bank statement. Let's say IBAN number appears on that document. From resulted photo - filename bank-statement.jpeg - John won't be able to copy IBAN number and paste it over whatsapp to his wife.</p> <p>On the other hand, if the same bank statement photo is processed using optical character recognition technology (OCR) - the text is extracted from the photo (for example as bank-statement.txt file) and John can open bank-statement.txt file, select IBAN number and copy/paste it in whatsapp chat to his wife.</p> <p>OCR technology has widespread usage across many areas. It enables computers to understand pictures. If computers understand what text is inside images, then users can search for specific terms across photos.</p> <p>Scanned document is a just photo of the document - usually of higher quality than photos taken with mobile phones for example. Described with informal terms scanners are specialized devices for taking photos of the documents.</p>"},{"location":"user/glossary/#ocr-used-as-verb","title":"OCR Used as Verb","text":"<p>OCRs - jargon term - a verb derived from noun OCR. Expression File X was OCRed means that optical character recognition process was performed on file X. Similarly expression It OCRs the documents reads \"it uses optical character recognition technology over the documents\" with same meaning as \"it extracts text from scanned documents\"</p> <p>Funny enough, here is how you can conjugate verb OCR in present tense:</p> Singular Plural I OCR We OCR You OCR You OCR He/she/it OCRs They OCR <p>And in past tense (preterite)</p> Singular Plural I OCRed We OCRed You OCRed You OCRed He/she/it OCRed They OCRed"},{"location":"user/glossary/#incoming-documents","title":"Incoming Documents","text":"<p>Documents which are in user's <code>Inbox</code> folder are called Incoming Documents.</p>"},{"location":"user/glossary/#metacolumn","title":"Metacolumn","text":"<p>Metacolumns are the columns displayed for metadata defined on current folder.</p>"},{"location":"user/glossary/#dms","title":"DMS","text":"<p>DMS = Document Management System</p>"},{"location":"user/metadata/","title":"Metadata","text":""},{"location":"user/metadata/#main-concepts","title":"Main Concepts","text":"<p>Metadata is extra information about your folders, documents and pages. In other words - data about your data. Following picture is a (scanned document) receipt with highlighted shop name, price and date on it.</p> <p></p> <p>This additional information - shop name, price and date is so called document's metadata. It has two parts a label (in picture above <code>shop</code>, <code>date</code> and <code>price</code> are all labels) and a value (in example above values are <code>M\u00e4c-Geiz</code>, <code>08.06.2020</code>, <code>1.49</code> for shop label, date label and price label respectively). Many times instead of term label term key is used. Metadata is extremely useful when you need to locate specific document among many other very similar documents.</p> <p>Imagine that you scanned 60 groceries receipts and organized them in a folder named Groceries. If you would just store those receipts on an ordinary file system, then only way to distinguish between files is by file names or maybe by their text content (if your storage supports OCR) - finding, specific file, say all receipts you got in June 2020, would be time consuming.</p> <p>A more efficient and practical way to tackle this problem is by associating to all scanned documents (receipts in this example) - metadata. Let's continue with groceries receipts example. It would be very time consuming to go to each document and add metadata to each file individually. A faster way to create metadata and associated it to a group of files, is by a creating a folder - add metadata to that folder - let's name it Groceries-2020 - and then just copy all groceries related files into that folder.</p> <p></p> <p>Note</p> <p>Folder is nothing more than a group of related documents. Thus, folders are convenient way to perform group operations on documents. In particular, by assigning metadata attributes to a folder - you automatically create those metadata attributes on all documents in the folder.</p>"},{"location":"user/metadata/#metadata-inheritance","title":"Metadata Inheritance","text":"<p>Nested folder is a folder stored within another folder. Folders can be nested arbitrarily deep. Same way as documents inherit their metadata attributes from their parent folder - child folders inherit their metadata attributes from their parent folder. Let's consider following example:</p> <p></p> <p>In Figure 3 folders Groceries, Rent and Insurances are sub-folders of Expenses. On topmost folder - Expenses - only one metadata label is defined, namely <code>amount</code>. On folder Groceries two extra metadata labels are defined: <code>shop</code> and <code>date</code>. On folder Rent metadata label <code>date</code> is defined. On Insurances: <code>company</code>, <code>start date</code> and <code>end date</code>.</p> <p>As explained above, metadata labels are inherited from parent folder to descendant folders and documents. Because of metadata label inheritance, in scenario described above, folder Groceries has  in total three metadata label:</p> <ol> <li><code>shop</code> - its own</li> <li><code>date</code> - its own</li> <li><code>amount</code> - inherited from parent</li> </ol> <p>Similarly folder Insurances has in total four metadata labels, three of its own and one inherited (metadata label <code>amount</code>) and folder Rent has in total two metadata labels: one inherited (metadata label <code>amount</code>) and one of its own (metadata label <code>date</code>).</p> <p>All documents from folder Insurances will inherit metadata labels from their parental folders. Thus, documents ins-1.pdf and ins-2.pdf from Figure 3 have four metadata labels: <code>amount</code> inherited from topmost folder Expenses and <code>company</code>, <code>start date</code>, <code>end date</code> inherited from their direct parental folder - Insurances.</p> <p>Metadata inheritance concept is very convenient because you don't need to define all metadata labels on each individual document, instead you define metadata only once on the folder containing documents.</p> <p>Following illustrations show you how folder structure and metadata definition described in Figure 3 look in practice.</p> <p></p>"},{"location":"user/metadata/#metacolumns","title":"Metacolumns","text":"<p>If you open \"Expenses\" folder and change view to list mode, among Type, Title and Created At columns you will see an extra column. That extra column is called metacolumn. Metacolumns are there to display actual metadata values defined on the documents. At this moment there still no metadata values to display, thus metacolumn is empty.</p> <p></p> <p>If you select \"Groceries\" folder, on the right side, in metadata widgets panel you will see three metadata label definitions - one of which is inherited. Notice that inherited metadata labels is not editable while it is displayed in the context of \"Groceries\" folder:</p> <p></p> <p>Important</p> <p>Metadata labels can be edited ONLY on the folder on which they were defined. Conversely, inherited metadata labels (i.e. defined on parent or ancestor folders) cannot be edited. For example, in Figure 6, metadata label <code>amount</code> cannot be edited in the context of folder \"Groceries\", because <code>amount</code> label was defined on parent folder - \"Expenses\".</p> <p>If you enter now \"Groceries\" folder and switch to list mode (and assuming you uploaded couple of documents to \"Groceries\" folder), you will see three metacolumns <code>amount</code>, <code>shop</code> and <code>date</code> - all of which are empty now as neither of the documents has metadata values yet:</p> <p></p> <p>Finally, in Figure 8 you see metacolumns with values. Note how convenient it is to have data visualized this way: documents may be sorted and located by metadata values.</p> <p>Note</p> <p>At this point you need to fill in metadata values manually. However, in future versions of Papermerge it will be possible to extract metadata (and thus to fill in those metacolumns) automatically.</p> <p></p>"},{"location":"user/metadata/#add-and-edit-metadata","title":"Add and Edit Metadata","text":"<p>Metadata is added/editing via metadata widget located on the right bar. For folders you can add/edit only metadata labels. For documents you can add/edit both labels and values (metadata labels are sometimes called keys). Documents metadata (both labels and values) can be edited in document browser as well as in document viewer. In document browser you can see metadata corresponding to specific document/folder either by selecting document/folder or by switching list mode.</p>"},{"location":"user/metadata/#delete-metadata","title":"Delete Metadata","text":"<p>Danger</p> <p>When you delete metadata label on a folder, all data associated with it i.e. all metadata values of respective label from all documents inside respective folder will be irreversibly lost.</p>"},{"location":"user/metadata/#metadata-types","title":"Metadata Types","text":"<p>Papermerge defines four different metadata types:</p> <ol> <li>Free form text</li> <li>Monetary</li> <li>Numeric</li> <li>Date</li> </ol>"},{"location":"user/ocr_languages/","title":"OCR Languages Support","text":"<p>Papermerge uses Tesseract to extract text from scanned documents. Tesseract supports over 130 languages - thus with Papermerge you can have documents in any of those languages.</p>"},{"location":"user/page-management/","title":"Page Management","text":"<p>Many times scanning documents in bulk results in documents with blank pages; some pages my be out of order or maybe part of totally different document. Even if you notice these flaws immediately it is time consuming and frustrating to redo scanning process. Wouldn't it be nice to fix out of order pages with Papermerge?</p> <p>Page management is set of features which helps to fix scanning process errors. In other words you can delete, reorder, cut and paste pages within same document even outside it.</p> <p>Note</p> <p>In order perform any of operations described below (delete, reorder, cut and paste pages) you need to have Change Permission on respective document. You have automatically granted Change Permission on the documents you uploaded (because you own the documents uploaded by you).</p>"},{"location":"user/page-management/#delete-pages","title":"Delete Page(s)","text":"<p>You can delete specific pages (for instance blank pages) from the document. Although many scanners have automatic \"remove blank pages\" feature, many times they get confused of what is a blank page or what is not. In case your scans end up with undesired blank pages you can easily remove those pages. Obviously you can remove any page which you consider that should not be part of current document.</p> <p></p> <p>In order to delete a page, you need to select desired page by clicking on it, then <code>Right Click -&gt;  Delete Page</code>.</p> <p>Every time you delete one or several pages, document version is advanced by one. For instance if document Invoice-X56.pdf currently has 4 pages and the document latest version is version 1, then, after deleting page 3 document's latest version will be 2. Thus document's version 1 has all 4 pages or original scan (with one blank) and document version 2 has 3 pages (without blank page).</p>"},{"location":"user/page-management/#reorder-pages","title":"Reorder Pages","text":"<p>Out of order pages occur very often during scanning process. Papermerge allows users to change pages order within the document.</p> <p>For instance, in figure below you can see that pages 2 and 4 are out of order. When you hover over page's thumbnail, two green arrows will appear. Click respective arrows to move page up or down.</p> <p></p> <p>For these changes to take effect you need to <code>Right Click --&gt; Apply Reorder Changes</code>.</p> <p>Warning</p> <p>Document pages reorder will only be saved when you :menuselection:<code>Right Click--&gt; Apply Reorder Changes</code>. You can reorder pages all day around, but if you close the document (by browsing away to a different view for example) without <code>Apply Reorder Changes</code> - your hard work progress will be lost.</p> <p></p> <p>Similarly to deleting pages, every time you save new pages order document version will be incremented (i.e. advanced by one).</p>"},{"location":"user/page-management/#cut-paste","title":"Cut &amp; Paste","text":"<p>You can move document pages around from one document to another. Once you cut one or several pages from a document, you can paste them either inside another document - pages will become part of new document or you can paste pages in file browser, this will create entirely new document from cut pages.</p> <p>In example illustrated in pictures below there are two documents:</p> <ul> <li>document A - with pages marked as A1, A2, B1, A3</li> <li>document B - with pages B2, B3</li> </ul> <p>During scan page B1 wrongly ended up in document A, although it belongs to document B.</p> <p>In order to fix this scanning issue, you need to cut page from document A as illustrated in figure below.</p> <p></p> <p>Then, open document B and <code>Right Click --&gt; Paste</code></p> <p></p> <p>Note</p> <p>In order to see results you will need to click refresh button of your web browser</p> <p></p> <p>After browser refresh you will see that document has all 3 pages B1, B2, B3. Document A on the other contains now only correct pages: A1, A2 and A3.</p>"},{"location":"user/rest_api/","title":"REST API","text":"<p>REST API is a way to interact with Papermerge far beyond Web Browser realm. It gives you power to extend Papermerge in many interesting ways. For example it allows you to write a simple bash script to automate uploading of files from your local (or remote) computer's specific location.</p> <p>Another practical scenario where REST API can be used is to automatically (well, you need some sort of 3rd party script for that) import attached documents from a given email account.</p>"},{"location":"user/rest_api/#how-it-works","title":"How It Works?","text":"<p>Instead of usual Sign In, with username and password, via Web Browser, you will sign in with a token (a fancy name for sequence of numbers and letters) from practically any software which supports http protocol.</p> <p>Thus, working with REST API is two step process:</p> <ol> <li>get a token</li> <li>use the token from 3rd party REST API client</li> </ol>"},{"location":"user/rest_api/#get-a-token","title":"Get a Token","text":"<ol> <li>Click User Menu (top right corner) -&gt; API Tokens</li> <li>Click New Token</li> <li>You will to decide on number of hours the token will be valid. Default is 4464 hours, which is roughly equivalent of 6 months. Click Save button.</li> <li>After you click Save button, two information messages will be displayed. Write down your token from Remember the token: ... info window.</li> </ol> <p>Important</p> <p>Write down your token. For security reasons, it is will be displayed only once. In picture below, it is the one marked in red.</p> <p>Important</p> <p>Tokens are saved in database encrypted. Token's encrypted version is called digest. In tokens tables (by the way, you can have as many token you like) first column displays first 16 characters of the digest. It is a way to identify the token. In picture below, token's digest is marked with green.</p> <p></p>"},{"location":"user/rest_api/#use-the-token","title":"Use the Token","text":"<p>Once you have your REST API token, you can use Papermerge with any HTTP client, just remember to include REST API token as header using following format:</p> <pre><code>Authorization: Token &lt;you token here&gt;\n</code></pre> <p>Let's see some examples with  curl. The simplest REST API call is:</p> <pre><code>curl -H \"Authorization: Token 7502db85f8d40bc7f4f5ab0a4e4fee4a\"  &lt;HOST&gt;/api/documents\n</code></pre> <p>If get 2XX response, it means your <code>Authorization</code> header and token are correct.</p> <p>Upload local file to remote host specified with <code>&lt;HOST&gt;</code>:</p> <pre><code>curl -H \"Authorization: Token 7502db85f8d40bc7f4f5ab0a4e4fee4a\"  \\\n  -T /home/eugen/documents/demo/2019/berlin1.pdf  \\\n  &lt;HOST&gt;/api/document/upload/berlin_x1.pdf\n</code></pre> <p>Notice that local file name is berlin1.pdf while it features in url as berlin_x1.pdf. This way I can rename local file.</p> <p>You can upload files without specifying their remote name, in that case remote file will have same name as local file:</p> <pre><code>curl -H \"Authorization: Token 7502db85f8d40bc7f4f5ab0a4e4fee4a\"  \\\n  -T /home/eugen/documents/demo/2019/berlin1.pdf  \\\n  &lt;HOST&gt;/api/document/upload/\n</code></pre> <p>Note</p> <p>Notice the trailing <code>/</code> character. When uploading file with <code>curl</code> without specifying file name URL must end with <code>/</code>. This is a way to notify curl that we don't want to rename files.</p> <p>Your (REST API) uploaded files will end up in Inbox.</p> <p></p>"},{"location":"user/rest_api/#rest-api-reference","title":"REST API Reference","text":"<p>REST API authorization header:</p> <ul> <li>name: <code>Authorization</code></li> <li>value format <code>Token &lt;your-token-here&gt;</code></li> </ul> <p>Example:</p> <pre><code>curl ... -H \"Authorization: Token &lt;your-token-here&gt;\"\n</code></pre> <p>REST API URLs:</p> URL HTTP Method Description /api/documents GET json list of all documents /api/document/ GET json info about document with id= /api/document/upload/ PUT Uploads unnamed file (random name will be assigned) /api/document/upload/ PUT Uploads named file"},{"location":"user/tags-and-folders/","title":"Tags and Folders","text":"<p>Watch this screencast to see tags in action:</p> <p>Organizing your documents in folders may serve you well for the beginning. However as number of folders grow it starts to be very challenging to keep organized.</p> <p>Folders have one huge disadvantage: it is very easy to forget which document belongs to which folder.</p> <p>Tags comes to the rescue. For example if you have car insurance document just assign to it a series of tags: \"car, insurance, crash\" and then, even if you forgot where you placed your insurance documents just search for documents with \"insurance\" and/or \"car\" tags.</p>"},{"location":"user/tags-and-folders/#main-concepts","title":"Main Concepts","text":"<p>Tags are kind of labels. You can associate (add) tags to a document or to a folder. Tags have a color and a name. Once tagged, documents can be searched by their tags. Conversely, is it also possible to show all the documents tagged with a particular tag(s).</p> <p></p> <p>Tags can be pinned on the left bar for quick access. It is easier to explain pinning with help of images:</p> <p></p> <p></p> <p>In order to pin a tag, you need check \"Pinned\" checkbox. You can do that in edit form of respective tag. Also, in edit form of the tag, you can change tag's color (foreground and background). Foreground color is color of the text which is written on the tag.</p> <p></p>"},{"location":"user/tags-and-folders/#remember-the-comma","title":"Remember the Comma (,)","text":"<p>Comma, that is the \",\" character is used as tags separator. So whenever you add tags (even if you are adding only one) - you need to press comma at the end of each tag name; if you forget to do that - whatever text you entered will be discarded and tag will not be created.</p> <p></p>"},{"location":"user/user-interface/","title":"User Interface","text":"<p>Papermerge user interface is designed to be very intuitive. However, it is a good idea to know major interface areas by their name because they are referenced many times in this manual.</p> <p></p>"},{"location":"user/user-interface/#document-browser","title":"Document Browser","text":"<p>Marked with number 1</p> <p>Document browser is designed to have similar look and feel of modern desktop file browsers. This is the place where you browse your documents and folders. The huge different between Papermerge's Document Browser  and usual desktop environment's file managers (e.g. Windows File Manager is that in Papermerge there are only two times of items - folders and documents. Documents are mainly PDF, jpeg, png and tiff file formats. There is no such thing as audio files or video files.</p>"},{"location":"user/user-interface/#right-side-widgets-panel","title":"Right Side Widgets Panel","text":"<p>Marked with number 2.</p> <p>Details of selected folder or document appear in so called Right Side Widgets Panel or simply Widgets Panel. There may be many different widgets, but three most important ones are:</p> <ul> <li>OCR Language Widget</li> <li>Info Widget</li> <li>Metadata Widget</li> </ul> <p></p> <p>OCR Language Widget will always be displayed (when in Document Browser). OCR language indicates in which language your documents will be OCRed.</p> <p>Basic Info Widget displays basic information about currently selected document or folder. Among basic information like title, owner and creation date, it will display folder or document's associated tags. In Info Widget there is (an extra obvious) download button. Note that with download button in Info Widget you will download only latest version of selected document (or folder content). In order to download older versions of the document you need to open document in document viewer.</p> <p>Metadata Widget will display metadata of the currently selected folder or document.</p>"},{"location":"user/user-interface/#left-side-navigation-menu","title":"Left Side Navigation Menu","text":"<p>In Figure 1 marked with number 3.</p> <p>This is main navigation menu. Immediately after sign in you will land in Documents menu which will display document browser. Depending on your role and permissions you may or may not see some menu items visible on Left Side Navigation Menu illustrated in Figure 1. For example if you don't have permissions to view/change other users, roles and groups - menu items user, roles and groups won't be displayed.</p>"},{"location":"user/user-interface/#user-menu","title":"User Menu","text":"<p>In Figure 1 marked with number 4.</p> <p>It is almost a standard practice in almost any modern web applications to place their user sign out, user preferences menus in upper left corner of the application. In this regard Papermerge follows this best practice. Besides usual <code>Sign out</code> and <code>Preferences</code> menu items there will be <code>Change Password</code> menu item and link to (this) online Documentation. Depending on your role and permissions you may see additional menu items.</p>"},{"location":"user/user-interface/#breadcrumb","title":"Breadcrumb","text":"<p>Marked with number 5.</p> <p></p> <p>Breadcrumb indicates current (document or folder) path. It is usual part of any desktop file manager to have one sort of \"current path indicator\" - it is just called differently. For web applications such location indicator is usually called breadcrumb.</p> <p>Note</p> <p>The term breadcrumb is a reference to the trail of bread crumbs left by Hansel and Gretel in the German fairy tale of the same name.</p>"},{"location":"user/user-interface/#display-mode","title":"Display Mode","text":"<p>In Figure 1 marked with number 6.</p> <p>With display mode drop down menu you can switch between different modes in which folders and documents will be displayed in document browser. Currently two display modes are supported:</p> <ul> <li>list</li> <li>grid</li> </ul> <p>Besides obvious visual difference there is one very important distinction between two display modes: meta columns are displayed only in list mode.</p> <p></p>"},{"location":"user/versions/","title":"Versions","text":"<p>Papermerge is a non-destructive DMS, which means you always have available original document regardless how many transformations (page cut/paste, document merges) you apply on the document.</p> <p>Retention of the original is ensured because of document versioning feature. With each extra transformation (page cut/paste) you apply - a new document version is created.</p>"}]}